"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[9630],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>m});var a=r(6540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),c=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,m=u["".concat(l,".").concat(d)]||u[d]||y[d]||o;return r?a.createElement(m,s(s({ref:t},p),{},{components:r})):a.createElement(m,s({ref:t},p))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:n,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2186:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>y,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=r(8168),n=(r(6540),r(5680));const o={},s="ASLR",i={unversionedId:"Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization/README",id:"Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization/README",title:"ASLR",description:"Practice",source:"@site/docs/Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization/README.md",sourceDirName:"Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization",slug:"/Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization/",permalink:"/operating-systems/77/Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Wild Pointer Arithmetic Info Leak",permalink:"/operating-systems/77/Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak/"},next:{title:"Stack Protector",permalink:"/operating-systems/77/Data/Lab 5 - Memory Security/Drills/Tasks/Stack Protector/"}},l={},c=[{value:"Practice",id:"practice",level:2}],p={toc:c},u="wrapper";function y(e){let{components:t,...r}=e;return(0,n.yg)(u,(0,a.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"aslr"},"ASLR"),(0,n.yg)("h2",{id:"practice"},"Practice"),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"Makefile.aslr")," file to compile the ",(0,n.yg)("inlineCode",{parentName:"p"},"drills/tasks/aslr/support/aslr.c")," file:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/aslr/support/$ make -f Makefile.aslr\n")),(0,n.yg)("p",null,"By default, ASLR and PIC are enabled.\nObserve the results.\nNext, we disable ASLR:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/aslr/support/$ echo 0 | sudo tee /proc/sys/kernel/randomize_va_space\n")),(0,n.yg)("p",null,"Even though the code is compiled with PIC, both library and user functions have the same address between runs.\nRe-enable ASLR:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/aslr/support/$ echo 2 | sudo tee /proc/sys/kernel/randomize_va_space\n")),(0,n.yg)("p",null,"Disable PIC by uncommenting the ",(0,n.yg)("inlineCode",{parentName:"p"},"-fno-PIC")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"LDFLAGS")," lines."),(0,n.yg)("p",null,"We observe that for randomization to work, we need to instruct the OS to randomize the program sections and the compiler to generate code that is position independent."),(0,n.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/77/Data/Lab%205%20-%20Memory%20Security/memory-security"},"this")," reading material."))}y.isMDXComponent=!0}}]);