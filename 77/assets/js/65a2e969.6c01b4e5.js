"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[2008],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var a=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,y=m["".concat(s,".").concat(d)]||m[d]||u[d]||l;return t?a.createElement(y,o(o({ref:n},c),{},{components:t})):a.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var a=t(8168),r=(t(6540),t(5680));const l={},o="jemalloc",i={unversionedId:"Data/Lab 4 - Investigate Memory/guides/jemalloc/README",id:"Data/Lab 4 - Investigate Memory/guides/jemalloc/README",title:"jemalloc",description:"jemalloc is a featureful allocator that is intended to replace the standard allocator in the standard C library (libc).",source:"@site/docs/Data/Lab 4 - Investigate Memory/guides/jemalloc/README.md",sourceDirName:"Data/Lab 4 - Investigate Memory/guides/jemalloc",slug:"/Data/Lab 4 - Investigate Memory/guides/jemalloc/",permalink:"/operating-systems/77/Data/Lab 4 - Investigate Memory/guides/jemalloc/",draft:!1,tags:[],version:"current",frontMatter:{}},s={},p=[],c={toc:p},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"jemalloc"},(0,r.yg)("inlineCode",{parentName:"h1"},"jemalloc")),(0,r.yg)("p",null,(0,r.yg)("a",{parentName:"p",href:"http://jemalloc.net/"},"jemalloc")," is a featureful allocator that is intended to replace the standard allocator in the standard C library (libc).\njemalloc provides replacements for the general ",(0,r.yg)("inlineCode",{parentName:"p"},"malloc()")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"free()")," functions, and also provides a custom API targeted for performance tuning."),(0,r.yg)("p",null,"As ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/jemalloc/jemalloc/wiki/Getting-Started"},"documented"),", there are multiple ways to use ",(0,r.yg)("inlineCode",{parentName:"p"},"jemalloc"),", the easiest of which is to use the ",(0,r.yg)("inlineCode",{parentName:"p"},"LD_PRELOAD")," environment variable and preload the library and hook into ",(0,r.yg)("inlineCode",{parentName:"p"},"malloc()")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"free()")," function calls."),(0,r.yg)("p",null,"First install ",(0,r.yg)("inlineCode",{parentName:"p"},"jemalloc")," on our system.\nOn your typical Ubuntu / Debian-based system, use ",(0,r.yg)("inlineCode",{parentName:"p"},"apt"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../data/lab/content$ sudo apt -y install libjemalloc-dev\n")),(0,r.yg)("p",null,"Note that this installs the distribution package, not the latest one (that may provide more features)."),(0,r.yg)("p",null,"With this in place, we can use ",(0,r.yg)("inlineCode",{parentName:"p"},"jemalloc")," against our pre-built executables or system executables (such as ",(0,r.yg)("inlineCode",{parentName:"p"},"ls"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"ps"),").\nWe can test it against the executable files from ",(0,r.yg)("inlineCode",{parentName:"p"},"support/memory-leak/"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../lab/support/memory-leak$ LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so ./memory_leak_malloc\nAndrei Popescu is 22 years old and likes Linux\nIoana David is 23 years old and likes macOS\n")),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"jemalloc")," can use the ",(0,r.yg)("inlineCode",{parentName:"p"},"MALLOC_CONF")," environment variable for a ",(0,r.yg)("a",{parentName:"p",href:"https://www.freebsd.org/cgi/man.cgi?query=malloc.conf"},"diverse set of configurations"),".\nFor example, by using ",(0,r.yg)("inlineCode",{parentName:"p"},"stats_print:true")," we print out information regarding the use of the library functions:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../lab/support/memory-leak$ LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so MALLOC_CONF="stats_print:true" ./memory_leak_malloc\nAndrei Popescu is 22 years old and likes Linux\nIoana David is 23 years old and likes macOS\n___ Begin jemalloc statistics ___\nVersion: 3.6.0-11\nAssertions disabled\nRun-time option settings:\n  opt.abort: false\n  opt.lg_chunk: 22\n  opt.dss: "secondary"\n  opt.narenas: 32\n  opt.lg_dirty_mult: 3\n  opt.stats_print: true\n  opt.junk: false\n  opt.quarantine: 0\n  opt.redzone: false\n[...]\ndirty pages: 26:0 active:dirty, 0 sweeps, 0 madvises, 0 purged\n            allocated      nmalloc      ndalloc    nrequests\nsmall:          72672          114            0            3\nlarge:          32768            1            0            1\ntotal:         105440          115            0            4\nactive:        106496\nmapped:       4194304\n[...]\n')),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"jemalloc")," doesn't work against system executables using preloading, likely because of security options disabling the use of the library:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../lab/support/memory-leak$ LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so MALLOC_CONF="stats_print:true" /bin/ls\nMakefile  memory_leak  memory_leak.cpp  memory_leak_malloc  memory_leak_malloc.c  memory_leak_malloc.o  memory_leak.o\n\nstudent@os:~/.../lab/support/memory-leak$ LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libjemalloc.so MALLOC_CONF="stats_print:true" /bin/ps\n  PID TTY          TIME CMD\n 1581 pts/22   00:00:00 ps\n26732 pts/22   00:00:01 bash\n')))}u.isMDXComponent=!0}}]);