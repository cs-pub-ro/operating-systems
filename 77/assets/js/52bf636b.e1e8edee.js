"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[9631],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>y});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),i=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=i(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=i(r),m=a,y=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return r?n.createElement(y,l(l({ref:t},p),{},{components:r})):n.createElement(y,l({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,l[1]=s;for(var i=2;i<o;i++)l[i]=r[i];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4216:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var n=r(8168),a=(r(6540),r(5680));const o={},l=void 0,s={unversionedId:"Data/Data arena/Arena/tasks/exec-shellcode/README",id:"Data/Data arena/Arena/tasks/exec-shellcode/README",title:"README",description:"Shellcode Executor",source:"@site/docs/Data/Data arena/Arena/tasks/exec-shellcode/README.md",sourceDirName:"Data/Data arena/Arena/tasks/exec-shellcode",slug:"/Data/Data arena/Arena/tasks/exec-shellcode/",permalink:"/operating-systems/77/Data/Data arena/Arena/tasks/exec-shellcode/",draft:!1,tags:[],version:"current",frontMatter:{}},c={},i=[{value:"Shellcode Executor",id:"shellcode-executor",level:2}],p={toc:i},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.yg)(u,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h2",{id:"shellcode-executor"},"Shellcode Executor"),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"support/exec-shellcode/")," directory."),(0,a.yg)("p",null,"Your goal is to update the ",(0,a.yg)("inlineCode",{parentName:"p"},"src/exec-shellcode.s")," source code file to be able to read and execute shellcodes from a given binary files.\nThe program thus acts as a shellcode tester."),(0,a.yg)("p",null,"A ",(0,a.yg)("a",{parentName:"p",href:"https://cocomelonc.github.io/tutorial/2021/10/09/linux-shellcoding-1.html"},"shellcode")," is a small program that is commonly used in memory-related security exploits as a form of arbitrary code execution.\nIt's a binary string consisting of instructions / code to be directly interpreted by the CPU during the execution of the targeted vulnerable program."),(0,a.yg)("p",null,"Shellcodes end up in an ",(0,a.yg)("inlineCode",{parentName:"p"},"exit()")," system call to ensure a graceful exit of the program after running the shellcode.\nUse ",(0,a.yg)("inlineCode",{parentName:"p"},"mmap()")," to reserve a virtual page.\nUse anonymous mapping (i.e. the ",(0,a.yg)("inlineCode",{parentName:"p"},"MAP_ANONYMOUS"),") flag.\nUse the proper permissions required to enable the shellcode to be read from the file into memory and then executed."),(0,a.yg)("p",null,"To test the implementation, enter the ",(0,a.yg)("inlineCode",{parentName:"p"},"tests/")," directory and run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"make check\n")),(0,a.yg)("p",null,"As an extra item, add a shellcode for the ",(0,a.yg)("inlineCode",{parentName:"p"},"brk()")," system call in the ",(0,a.yg)("inlineCode",{parentName:"p"},"tests/brk.asm")," file.\nIt should be a simple shellcode that calls ",(0,a.yg)("inlineCode",{parentName:"p"},"brk(NULL)"),", i.e. with the purpose of getting the current program break."),(0,a.yg)("p",null,"In case of a correct solution, you will get an output such as:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-text"},"./run_all_tests.sh\ntest_helloworld                  ........................ passed ...  25\ntest_getpid                      ........................ passed ...  25\ntest_openfile                    ........................ passed ...  25\ntest_brk                         ........................ passed ...  25\n\nTotal:                                                           100/100\n")))}d.isMDXComponent=!0}}]);