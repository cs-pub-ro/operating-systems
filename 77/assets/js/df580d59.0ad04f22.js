"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[9152],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>d});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},y="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),y=c(t),g=a,d=y["".concat(l,".").concat(g)]||y[g]||m[g]||i;return t?n.createElement(d,o(o({ref:r},p),{},{components:t})):n.createElement(d,o({ref:r},p))}));function d(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=g;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[y]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3209:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=t(8168),a=(t(6540),t(5680));const i={},o="Memory Access",s={unversionedId:"Data/Working With Memory/Working with Memory/Drills/Tasks/Memory Access/README",id:"Data/Working With Memory/Working with Memory/Drills/Tasks/Memory Access/README",title:"Memory Access",description:"Accessing memory is defined by reading or writing values to or from a variable.",source:"@site/docs/Data/Working With Memory/Working with Memory/Drills/Tasks/Memory Access/README.md",sourceDirName:"Data/Working With Memory/Working with Memory/Drills/Tasks/Memory Access",slug:"/Data/Working With Memory/Working with Memory/Drills/Tasks/Memory Access/",permalink:"/operating-systems/77/Data/Working With Memory/Working with Memory/Drills/Tasks/Memory Access/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Tasks",permalink:"/operating-systems/77/Data/Working With Memory/Working with Memory/Drills/Tasks/"},next:{title:"Questions",permalink:"/operating-systems/77/Data/Working With Memory/Working with Memory/Drills/Questions/"}},l={},c=[{value:"Practice",id:"practice",level:2}],p={toc:c},y="wrapper";function m(e){let{components:r,...t}=e;return(0,a.yg)(y,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"memory-access"},"Memory Access"),(0,a.yg)("p",null,"Accessing memory is defined by reading or writing values to or from a variable.\nFrom a programmer's perspective, this looks pretty straightforward:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'int main(void)\n{\n    int a;               // declare variable\n    a = 42;              // write 42 to variable a\n    printf("%d\\n", a);   // read variable a and print its contents\n\n    return 0;\n}\n')),(0,a.yg)("p",null,"However, from a lower level perspective, there are other attributes that need to be taken care of.\nFor instance, variable ",(0,a.yg)("inlineCode",{parentName:"p"},"a")," needs to have a correspondent area that is reserved in memory.\nThat specific chunk of memory is described by an address and a size.\nThe address for ",(0,a.yg)("inlineCode",{parentName:"p"},"a")," is automatically generated by going through multiple layers of abstractions, but the size is spelled out indirectly by the programmer by using the keyword ",(0,a.yg)("inlineCode",{parentName:"p"},"int"),".\nAnother aspect is represented by the access rights for a specific memory area.\nIn our example, ",(0,a.yg)("inlineCode",{parentName:"p"},"a")," is defined as being plain mutable, however, it is possible to declare constant variables which are stored in memory location with no writing rights."),(0,a.yg)("p",null,"Using the above information, the compiler and the operating system co-work to allocate memory that can represent the contents of the variable."),(0,a.yg)("p",null,"No matter what sort of language you are using, statically or dynamically typed, a variable is always described by the ",(0,a.yg)("strong",{parentName:"p"},"(address, size, access rights)")," triplet.\nBy using this triplet, the content of a variable is stored, retrieved or rewritten."),(0,a.yg)("h2",{id:"practice"},"Practice"),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"memory-access/support/")," directory.\nInspect the ",(0,a.yg)("inlineCode",{parentName:"p"},"mem_access.c")," source file."),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Describe each variable by completing its ",(0,a.yg)("strong",{parentName:"p"},"(address, size, access rights)")," tuple.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Try to modify the ",(0,a.yg)("inlineCode",{parentName:"p"},"ca"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"cp")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"cp2")," variables by assigning some other value to them.\nExplain the behavior."))))}m.isMDXComponent=!0}}]);