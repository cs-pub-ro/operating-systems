"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[441],{5680:(e,t,n)=>{n.d(t,{xA:()=>m,yg:()=>d});var r=n(6540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},y="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),y=c(n),u=a,d=y["".concat(l,".").concat(u)]||y[u]||p[u]||o;return n?r.createElement(d,s(s({ref:t},m),{},{components:n})):r.createElement(d,s({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[y]="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2494:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var r=n(8168),a=(n(6540),n(5680));const o={},s="Memory Actions (and Leaks) in Existing Programs",i={unversionedId:"Data/Lab 4 - Investigate Memory/guides/memory-actions/README",id:"Data/Lab 4 - Investigate Memory/guides/memory-actions/README",title:"Memory Actions (and Leaks) in Existing Programs",description:"We can use Valgrind to investigate existing programs in the system.",source:"@site/docs/Data/Lab 4 - Investigate Memory/guides/memory-actions/README.md",sourceDirName:"Data/Lab 4 - Investigate Memory/guides/memory-actions",slug:"/Data/Lab 4 - Investigate Memory/guides/memory-actions/",permalink:"/operating-systems/77/Data/Lab 4 - Investigate Memory/guides/memory-actions/",draft:!1,tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Practice",id:"practice",level:3}],m={toc:c},y="wrapper";function p(e){let{components:t,...n}=e;return(0,a.yg)(y,(0,r.A)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"memory-actions-and-leaks-in-existing-programs"},"Memory Actions (and Leaks) in Existing Programs"),(0,a.yg)("p",null,"We can use Valgrind to investigate existing programs in the system.\nThis tells us whether they possess memory leaks:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../lab/support/memory-leak$ valgrind ls\n==24669== Memcheck, a memory error detector\n==24669== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==24669== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==24669== Command: ls\n==24669==\nMakefile  memory_leak  memory_leak.cpp  memory_leak_malloc  memory_leak_malloc.c  memory_leak_malloc.o  memory_leak.o\n==24669==\n==24669== HEAP SUMMARY:\n==24669==     in use at exit: 21,696 bytes in 14 blocks\n==24669==   total heap usage: 51 allocs, 37 frees, 61,331 bytes allocated\n==24669==\n==24669== LEAK SUMMARY:\n==24669==    definitely lost: 0 bytes in 0 blocks\n==24669==    indirectly lost: 0 bytes in 0 blocks\n==24669==      possibly lost: 0 bytes in 0 blocks\n==24669==    still reachable: 21,696 bytes in 14 blocks\n==24669==         suppressed: 0 bytes in 0 blocks\n==24669== Rerun with --leak-check=full to see details of leaked memory\n==24669==\n==24669== For counts of detected and suppressed errors, rerun with: -v\n==24669== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n\nstudent@os:~/.../lab/support/memory-leak$ valgrind ps\n==24671== Memcheck, a memory error detector\n==24671== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==24671== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==24671== Command: ps\n==24671==\n  PID TTY          TIME CMD\n24671 pts/22   00:00:00 memcheck-amd64-\n26732 pts/22   00:00:01 bash\n==24671==\n==24671== HEAP SUMMARY:\n==24671==     in use at exit: 264,929 bytes in 25 blocks\n==24671==   total heap usage: 692 allocs, 667 frees, 334,268 bytes allocated\n==24671==\n==24671== LEAK SUMMARY:\n==24671==    definitely lost: 0 bytes in 0 blocks\n==24671==    indirectly lost: 0 bytes in 0 blocks\n==24671==      possibly lost: 0 bytes in 0 blocks\n==24671==    still reachable: 264,929 bytes in 25 blocks\n==24671==         suppressed: 0 bytes in 0 blocks\n==24671== Rerun with --leak-check=full to see details of leaked memory\n==24671==\n==24671== For counts of detected and suppressed errors, rerun with: -v\n==24671== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n\nstudent@os:~/.../lab/support/memory-leak$ valgrind bash -c 'echo \"ha\"'\n==24675== Memcheck, a memory error detector\n==24675== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.\n==24675== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info\n==24675== Command: bash -c echo\\ \"ha\"\n==24675==\nha\n==24675==\n==24675== HEAP SUMMARY:\n==24675==     in use at exit: 43,056 bytes in 672 blocks\n==24675==   total heap usage: 774 allocs, 102 frees, 51,405 bytes allocated\n==24675==\n==24675== LEAK SUMMARY:\n==24675==    definitely lost: 12 bytes in 1 blocks\n==24675==    indirectly lost: 0 bytes in 0 blocks\n==24675==      possibly lost: 0 bytes in 0 blocks\n==24675==    still reachable: 43,044 bytes in 671 blocks\n==24675==         suppressed: 0 bytes in 0 blocks\n==24675== Rerun with --leak-check=full to see details of leaked memory\n==24675==\n==24675== For counts of detected and suppressed errors, rerun with: -v\n==24675== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)\n")),(0,a.yg)("p",null,"We can see that ",(0,a.yg)("inlineCode",{parentName:"p"},"ls")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"ps")," don't have memory leaks.\nHowever, the shell (Bash) shows a memory leak of 12 bytes (on the test system).\nThis may be a false positive or the subject of an actual investigation."),(0,a.yg)("p",null,"Note that the ",(0,a.yg)("inlineCode",{parentName:"p"},"still reachable")," section of the output refers to memory that wasn't freed, but still has pointers referring to it.\nA true memory leak occurs when no pointers refer any memory area."),(0,a.yg)("h3",{id:"practice"},"Practice"),(0,a.yg)("ol",null,(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Investigate 2-3 other executables in the system using Valgrind.")),(0,a.yg)("li",{parentName:"ol"},(0,a.yg)("p",{parentName:"li"},"Use ",(0,a.yg)("inlineCode",{parentName:"p"},"ltrace")," to list ",(0,a.yg)("inlineCode",{parentName:"p"},"malloc()")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"free()")," calls made by the investigated system executables."))),(0,a.yg)("p",null,"Note that, as explained in the ",(0,a.yg)("a",{parentName:"p",href:"https://open-education-hub.github.io/operating-systems/Lab/Software%20Stack/libcall-syscall"},"Software Stack lab"),", on some systems, ",(0,a.yg)("inlineCode",{parentName:"p"},"ltrace")," does not accurately show the output, due to ",(0,a.yg)("em",{parentName:"p"},"now binding"),".\nFear not, you can always check the library calls with a more verbose and harder to parse ",(0,a.yg)("inlineCode",{parentName:"p"},"ltrace")," command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ ltrace -x "*"\n')))}p.isMDXComponent=!0}}]);