"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[6670],{5680:(e,t,r)=>{r.d(t,{xA:()=>p,yg:()=>f});var n=r(6540);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(r),m=a,f=u["".concat(c,".").concat(m)]||u[m]||y[m]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[u]="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5633:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=r(8168),a=(r(6540),r(5680));const i={},o="Wild Pointer Arithmetic Info Leak",s={unversionedId:"Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak/README",id:"Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak/README",title:"Wild Pointer Arithmetic Info Leak",description:"Practice",source:"@site/docs/Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak/README.md",sourceDirName:"Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak",slug:"/Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak/",permalink:"/operating-systems/77/Data/Lab 5 - Memory Security/Drills/Tasks/Pointer Arithmetic Leak/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Tasks",permalink:"/operating-systems/77/Data/Lab 5 - Memory Security/Drills/Tasks/"},next:{title:"ASLR",permalink:"/operating-systems/77/Data/Lab 5 - Memory Security/Drills/Tasks/Address Space Layout Randomization/"}},c={},l=[{value:"Practice",id:"practice",level:2}],p={toc:l},u="wrapper";function y(e){let{components:t,...r}=e;return(0,a.yg)(u,(0,n.A)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"wild-pointer-arithmetic-info-leak"},"Wild Pointer Arithmetic Info Leak"),(0,a.yg)("h2",{id:"practice"},"Practice"),(0,a.yg)("p",null,"Navigate to the ",(0,a.yg)("inlineCode",{parentName:"p"},"drills/tasks/bypassing-stack-protector/support/")," directory. Open and analyze the ",(0,a.yg)("inlineCode",{parentName:"p"},"buff_leak.c")," file."),(0,a.yg)("p",null,"The pointer ",(0,a.yg)("inlineCode",{parentName:"p"},"p")," points to the stack, however, we can modify any variable that is declared in the program through ",(0,a.yg)("inlineCode",{parentName:"p"},"p"),".\nAll we need to know is the offset of the other memory locations that we wish to access.\nRun the program and try to input the correct offsets to modify variables from different regions of our program.\nOnce a correct offset is given as input, the program will output a validation message."),(0,a.yg)("p",null,"Note that adding or subtracting user provided values to pointers enables an attacker to observe a program's entire memory!"),(0,a.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,a.yg)("a",{parentName:"p",href:"/operating-systems/77/Data/Lab%205%20-%20Memory%20Security/memory-security"},"this")," reading material."))}y.isMDXComponent=!0}}]);