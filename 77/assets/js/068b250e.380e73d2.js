"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[337],{5680:(e,r,t)=>{t.d(r,{xA:()=>p,yg:()=>g});var n=t(6540);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=n.createContext({}),c=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},p=function(e){var r=c(e.components);return n.createElement(l.Provider,{value:r},e.children)},m="mdxType",y={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=a,g=m["".concat(l,".").concat(d)]||m[d]||y[d]||i;return t?n.createElement(g,o(o({ref:r},p),{},{components:t})):n.createElement(g,o({ref:r},p))}));function g(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9506:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var n=t(8168),a=(t(6540),t(5680));const i={},o="Working with Memory",s={unversionedId:"Data/Lab 3 - Memory/Working with Memory/Reading/working-with-memory",id:"Data/Lab 3 - Memory/Working with Memory/Reading/working-with-memory",title:"Working with Memory",description:"As previously stated, from a programmer's perspective, memory is abstracted into variables.",source:"@site/docs/Data/Lab 3 - Memory/Working with Memory/Reading/working-with-memory.md",sourceDirName:"Data/Lab 3 - Memory/Working with Memory/Reading",slug:"/Data/Lab 3 - Memory/Working with Memory/Reading/working-with-memory",permalink:"/operating-systems/77/Data/Lab 3 - Memory/Working with Memory/Reading/working-with-memory",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Reading",permalink:"/operating-systems/77/Data/Lab 3 - Memory/Working with Memory/Reading/"},next:{title:"Drills",permalink:"/operating-systems/77/Data/Lab 3 - Memory/Working with Memory/Drills/"}},l={},c=[{value:"Memory Access",id:"memory-access",level:2},{value:"Memory Protection",id:"memory-protection",level:2}],p={toc:c},m="wrapper";function y(e){let{components:r,...t}=e;return(0,a.yg)(m,(0,n.A)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"working-with-memory"},"Working with Memory"),(0,a.yg)("p",null,"As previously stated, from a programmer's perspective, memory is abstracted into variables.\nThis hides most of the lower level abstractions.\nEach variable is characterized by an address (or location in memory), type and access rights.\nSome languages require that the developer spells out these attributes explicitly (",(0,a.yg)("strong",{parentName:"p"},"statically typed languages")," - notable examples: C\\C++, D, Java) whereas others deduce them by analyzing the context (",(0,a.yg)("strong",{parentName:"p"},"dynamically typed languages")," - notable examples: Python, JavaScript).\nNevertheless, the language compiler needs to handle this information and, based on it, generate code that manages memory correctly and efficiently."),(0,a.yg)("h2",{id:"memory-access"},"Memory Access"),(0,a.yg)("p",null,"Accessing memory is defined by reading or writing values to or from a variable.\nFrom a programmer's perspective, this looks pretty straightforward:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-c"},'int main(void)\n{\n    int a;               // declare variable\n    a = 42;              // write 42 to variable a\n    printf("%d\\n", a);   // read variable a and print its contents\n\n    return 0;\n}\n')),(0,a.yg)("p",null,"However, from a lower level perspective, there are other attributes that need to be taken care of.\nFor instance, variable ",(0,a.yg)("inlineCode",{parentName:"p"},"a")," needs to have a correspondent area that is reserved in memory.\nThat specific chunk of memory is described by an address and a size.\nThe address for ",(0,a.yg)("inlineCode",{parentName:"p"},"a")," is automatically generated by going through multiple layers of abstractions, but the size is spelled out indirectly by the programmer by using the keyword ",(0,a.yg)("inlineCode",{parentName:"p"},"int"),".\nAnother aspect is represented by the access rights for a specific memory area.\nIn our example, ",(0,a.yg)("inlineCode",{parentName:"p"},"a")," is defined as being plain mutable, however, it is possible to declare constant variables which are stored in memory location with no writing rights."),(0,a.yg)("p",null,"Using the above information, the compiler and the operating system co-work to allocate memory that can represent the contents of the variable."),(0,a.yg)("p",null,"No matter what sort of language you are using, statically or dynamically typed, a variable is always described by the ",(0,a.yg)("strong",{parentName:"p"},"(address, size, access rights)")," triplet.\nBy using this triplet, the content of a variable is stored, retrieved or rewritten."),(0,a.yg)("h2",{id:"memory-protection"},"Memory Protection"),(0,a.yg)("p",null,"Memory contents (both code and data) are separated into sections or zones.\nThis makes it easier to manage.\nMore than that, it allows different zones to have different permissions.\nThis follows the ",(0,a.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Principle_of_least_privilege"},"principle of least privilege")," where only required permissions are part of a given section."),(0,a.yg)("p",null,"Code is usually placed in a section (",(0,a.yg)("inlineCode",{parentName:"p"},".text"),") with read and execute permissions;\nno write permissions.\nVariables are placed in different sections (",(0,a.yg)("inlineCode",{parentName:"p"},".data"),", ",(0,a.yg)("inlineCode",{parentName:"p"},".bss"),", stack, heap) with read and write permissions;\nno execute permissions."))}y.isMDXComponent=!0}}]);