"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[6244],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>h});var a=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(t),m=o,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,s=new Array(i);s[0]=m;var r={};for(var l in n)hasOwnProperty.call(n,l)&&(r[l]=n[l]);r.originalType=e,r[u]="string"==typeof e?e:o,s[1]=r;for(var p=2;p<i;p++)s[p]=t[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},281:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=t(8168),o=(t(6540),t(5680));const i={},s="OS Cloud",r={unversionedId:"Application Interaction/Lab 12 - Application Interaction/OS Cloud/os-cloud",id:"Application Interaction/Lab 12 - Application Interaction/OS Cloud/os-cloud",title:"OS Cloud",description:'In this section, we are going to build a "toy cloud" called OS Cloud.',source:"@site/docs/Application Interaction/Lab 12 - Application Interaction/OS Cloud/os-cloud.md",sourceDirName:"Application Interaction/Lab 12 - Application Interaction/OS Cloud",slug:"/Application Interaction/Lab 12 - Application Interaction/OS Cloud/os-cloud",permalink:"/operating-systems/76/Application Interaction/Lab 12 - Application Interaction/OS Cloud/os-cloud",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"OS Cloud",permalink:"/operating-systems/76/Application Interaction/Lab 12 - Application Interaction/OS Cloud/"},next:{title:"Drills",permalink:"/operating-systems/76/Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/"}},l={},p=[{value:"Containers vs VMs",id:"containers-vs-vms",level:2},{value:"Containers",id:"containers",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Initial Liftoff",id:"initial-liftoff",level:2},{value:"More Implementation Details",id:"more-implementation-details",level:2},{value:"(Even) More Implementation Details",id:"even-more-implementation-details",level:2},{value:"Virtual Machine Creation",id:"virtual-machine-creation",level:2},{value:"Disk Creation",id:"disk-creation",level:2},{value:"OS-Cloud: More Disk Customization",id:"os-cloud-more-disk-customization",level:2},{value:"Copy Additional Files to the Newly Created Disk",id:"copy-additional-files-to-the-newly-created-disk",level:3},{value:"SSH Key Setup",id:"ssh-key-setup",level:3},{value:"OS-Cloud: Internet Access",id:"os-cloud-internet-access",level:2}],c={toc:p},u="wrapper";function d(e){let{components:n,...i}=e;return(0,o.yg)(u,(0,a.A)({},c,i,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"os-cloud"},"OS Cloud"),(0,o.yg)("p",null,'In this section, we are going to build a "toy cloud" called ',(0,o.yg)("inlineCode",{parentName:"p"},"OS Cloud"),".\nSimilar to a real cloud (like ",(0,o.yg)("inlineCode",{parentName:"p"},"aws"),"), ",(0,o.yg)("inlineCode",{parentName:"p"},"OS Cloud")," will allow us to create and manage virtual machines, through an ",(0,o.yg)("inlineCode",{parentName:"p"},"http")," API."),(0,o.yg)("h2",{id:"containers-vs-vms"},"Containers vs VMs"),(0,o.yg)("p",null,"Containers are a lightweight virtualization technology that allows multiple isolated user-space instances to run on a single host operating system.\nThey are often compared to ",(0,o.yg)("a",{parentName:"p",href:"https://linux.die.net/man/1/chroot"},(0,o.yg)("inlineCode",{parentName:"a"},"chroot"))," because they both provide isolated environments for running applications."),(0,o.yg)("p",null,"Cgroups limit, account for, and isolate the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.\nThey can be used to enforce resource limits, prioritization, accounting, and control.\nNamespaces isolate processes from each other by creating independent views of system resources.\nThere are different types of namespaces, such as user, PID, network, mount, IPC, and UTS.\nYou can read more about them ",(0,o.yg)("a",{parentName:"p",href:"https://www.nginx.com/blog/what-are-namespaces-cgroups-how-do-they-work/"},"here"),", ",(0,o.yg)("a",{parentName:"p",href:"https://www.baeldung.com/linux/cgroups-and-namespaces"},"here")," and a particularly good read about namespaces can be found ",(0,o.yg)("a",{parentName:"p",href:"https://blog.quarkslab.com/digging-into-linux-namespaces-part-1.html"},"here")),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"questions/questions/cgroups-vs-namespaces.md"},"Quiz")),(0,o.yg)("p",null,"However, containers take this isolation a step further by using kernel features such as namespaces and cgroups to provide a more complete and secure isolation of resources."),(0,o.yg)("p",null,"Virtual machines, on the other hand, are a heavier form of virtualization that involves running a complete guest operating system on top of a host operating system using a hypervisor.\nThis allows multiple guest operating systems to run on a single physical machine, each with its own set of virtualized hardware resources."),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"VMs vs Containers",src:t(6158).A})),(0,o.yg)("p",null,"One key difference between containers and VMs is the level of abstraction.\nContainers virtualize the operating system, allowing multiple containers to share the same kernel while providing the illusion of running on separate machines.\nVMs virtualize the hardware, allowing multiple guest operating systems to run on the same physical machine while providing the illusion of running on separate physical hardware."),(0,o.yg)("p",null,"Another difference is the resource overhead.\nContainers are generally more lightweight than VMs because they share the host kernel and do not require a separate guest operating system to be installed.\nThis means that containers can start up faster and use less memory than VMs."),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/operating-systems/76/Application%20Interaction/Lab%2012%20-%20Application%20Interaction/OS%20Cloud/Drills/Questions/container-vs-vm"},"Quiz")),(0,o.yg)("h2",{id:"containers"},"Containers"),(0,o.yg)("p",null,"Our app will make use of ",(0,o.yg)("inlineCode",{parentName:"p"},"docker")," containers.\nA container is an OS-level virtualization method in which a group of userspace processes are isolated from the rest of the system."),(0,o.yg)("p",null,"Take for example a database server.\nInstead of running it directly on the host system, we'll run it in its own container.\nThis way, the server process will be isolated from other processes on the system.\nIt will also have its own filesystem."),(0,o.yg)("p",null,"Besides isolation, containers are also useful for portability.\nSince a container comes with its own filesystem image, we can pack it together will all the dependencies, so that the app will run correctly no matter what packages are installed on the host system."),(0,o.yg)("p",null,"Finally, since our application will consist of more than 1 container, we'll also use ",(0,o.yg)("inlineCode",{parentName:"p"},"docker-compose"),", which is a tool that helps us with running multi-container applications."),(0,o.yg)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.yg)("p",null,"Make sure the following packages are installed:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"sudo apt-get -y update; sudo apt-get -y install docker-compose jq\n")),(0,o.yg)("p",null,"Also, make sure your user can run docker commands.\nIf not, maybe you need to add it to the ",(0,o.yg)("inlineCode",{parentName:"p"},"docker")," group:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"sudo usermod -aG docker student\n")),(0,o.yg)("p",null,"Then, after relogin:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n")),(0,o.yg)("p",null,"If you are running inside a virtual machine, you need to enable nested virtualization.\nExample for vmware:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"nested-virt-vmware",src:t(962).A,width:"845",height:"699"})),(0,o.yg)("p",null,"For virtualbox:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"nested-virt-vbox",src:t(5635).A,width:"819",height:"590"})),(0,o.yg)("p",null,"If the button is greyed out, try from the command line:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ VBoxManage  list vms\n"USO 2022-2023" {042a5725-bfb7-4a46-9743-1164d3acac23}\n\nstudent@os:~$ VBoxManage modifyvm {042a5725-bfb7-4a46-9743-1164d3acac23} --nested-hw-virt on\n')),(0,o.yg)("h2",{id:"initial-liftoff"},"Initial Liftoff"),(0,o.yg)("p",null,"First, we need to do some initial setup:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ ./initial_setup.sh\n")),(0,o.yg)("p",null,"Then go to ",(0,o.yg)("inlineCode",{parentName:"p"},"support/os-cloud")," and run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ ./setup_db.sh\nSetting up db\nStarting db server\nWaiting for db server to start\n...\nStopping db server\nRestarting db server\nWaiting for db server to start\nCreating tables\nStopping db server\n\nstudent@os:~/.../support/os-cloud$ docker-compose up --build\n")),(0,o.yg)("p",null,"Now the http API will listen on port ",(0,o.yg)("inlineCode",{parentName:"p"},"localhost:5000"),". Let's try:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ curl localhost:5000\nWelcome to OS Cloud!\n")),(0,o.yg)("p",null,"Let's check the running virtual machines:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ curl localhost:5000/vm_list\n[]\n")),(0,o.yg)("p",null,"We got an empty list, since there are no virtual machines yet.\nLet's create one (the command will take about 1 minute to complete):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -H "Content-Type: application/json" \\\n    -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G"}\' \\\n    localhost:5000/vm_create\n{"id":1,"status":"ok"}\n')),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/operating-systems/76/Application%20Interaction/Lab%2012%20-%20Application%20Interaction/OS%20Cloud/Drills/Questions/vm-creation"},"Quiz")),(0,o.yg)("p",null,"Check the virtual machine list again:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl localhost:5000/vm_list\n[{"id":1,"name":"my_vm"}]\n')),(0,o.yg)("p",null,"We can also use the ",(0,o.yg)("inlineCode",{parentName:"p"},"jq")," tool to pretty print the ",(0,o.yg)("inlineCode",{parentName:"p"},"json")," outputs:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -s localhost:5000/vm_list | jq .\n[\n  {\n    "id": 1,\n    "name": "my_vm"\n  }\n]\n')),(0,o.yg)("p",null,"We see our newly created virtual machine.\nLet's get some information about it:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "RUNNING"\n}\n')),(0,o.yg)("p",null,"We recognize some parameters that we specified at creation time, like ",(0,o.yg)("inlineCode",{parentName:"p"},"mem_size")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"disk_size"),".\nAlso, the IP address ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.2")," has been allocated for our machine."),(0,o.yg)("h2",{id:"more-implementation-details"},"More Implementation Details"),(0,o.yg)("p",null,"The application consists of 2 containers:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"db"),", which runs a ",(0,o.yg)("inlineCode",{parentName:"p"},"MySQL")," database")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"os-cloud"),", which runs the web application and the virtual machines"))),(0,o.yg)("p",null,"Let's check them.\nAfter running ",(0,o.yg)("inlineCode",{parentName:"p"},"docker-compose up"),", in another terminal run ",(0,o.yg)("inlineCode",{parentName:"p"},"docker-compose ps"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose ps\n       Name                      Command              State                    Ports\n------------------------------------------------------------------------------------------------------\nos-cloud_db_1         docker-entrypoint.sh mariadbd   Up      3306/tcp\nos-cloud_os-cloud_1   python3 -u app.py               Up      0.0.0.0:5000->5000/tcp,:::5000->5000/tcp\n\n")),(0,o.yg)("p",null,"Now let's move inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"os-cloud")," container:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose exec os-cloud bash\nroot@89a986d2526e:/app#\n")),(0,o.yg)("p",null,"Since the virtual machines run inside this container, we should expect to see the one that we created in the previous step."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"root@89a986d2526e:/app# ps -ef | cat\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 09:02 ?        00:00:00 /sbin/docker-init -- python3 -u app.py\nroot           7       1  0 09:02 ?        00:00:00 python3 -u app.py\nroot          12       7  6 09:02 ?        00:00:41 qemu-system-x86_64 -enable-kvm -m 2048 -hda /vm-disks/1/disk.qcow2 -net nic,macaddr=52:54:00:12:34:00 -net tap,ifname=tap0,script=no -monitor telnet::10001,server,nowait -serial telnet::10002,server,nowait -nographic\nroot          27       0  0 09:11 pts/3    00:00:00 bash\nroot          35      27  0 09:13 pts/3    00:00:00 ps -ef\n")),(0,o.yg)("p",null,"Indeed, a ",(0,o.yg)("inlineCode",{parentName:"p"},"qemu-system-x86_64")," process is there.\nThe vm should be accessible via ",(0,o.yg)("inlineCode",{parentName:"p"},"ssh")," on the IP ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.2")," with password ",(0,o.yg)("inlineCode",{parentName:"p"},"123456")," (if you get ",(0,o.yg)("inlineCode",{parentName:"p"},"connection refused")," here, you need to wait a bit more for the machine to boot):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"root@adf6e0bf4e6e:/app# ssh root@192.168.0.2\nThe authenticity of host '192.168.0.2 (192.168.0.2)' can't be established.\nED25519 key fingerprint is SHA256:3Mfa1fB9y4knUDJWEmEOTz9dWOE7SVhnH/kCBJ15Y0E.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.0.2' (ED25519) to the list of known hosts.\nroot@192.168.0.2's password:\nWelcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-40-generic x86_64)\n\n...\n\nLast login: Thu Nov 17 07:49:55 2022\nroot@ubuntu:~#\n")),(0,o.yg)("p",null,"The vm is also accessible on the serial console (notice the ",(0,o.yg)("inlineCode",{parentName:"p"},"-serial telnet::10002,server,nowait")," argument to qemu).\nIf we start a telnet connection on port ",(0,o.yg)("inlineCode",{parentName:"p"},"10002"),", qemu will show us the virtual machine's serial console (basically the output that we normally see when running a virtual machine in text mode)"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"root@adf6e0bf4e6e:/app# telnet localhost 10002\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n\nubuntu login: root\nPassword:\nWelcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-40-generic x86_64)\n\n...\n\nLast login: Thu Nov 17 07:50:11 UTC 2022 from 192.168.0.1 on pts/0\nroot@ubuntu:~#\n")),(0,o.yg)("p",null,"To exit the serial console, press ",(0,o.yg)("inlineCode",{parentName:"p"},"CTRL+]"),", then type ",(0,o.yg)("inlineCode",{parentName:"p"},"quit"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"root@ubuntu:~#\ntelnet> quit\nConnection closed.\nroot@adf6e0bf4e6e:/app#\n")),(0,o.yg)("h2",{id:"even-more-implementation-details"},"(Even) More Implementation Details"),(0,o.yg)("p",null,"The architecture of the system can be summarized in the following diagram:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"os-cloud",src:t(6301).A})),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"os-cloud")," container is the core of the entire system.\nIt consists of a web application written in python using ",(0,o.yg)("inlineCode",{parentName:"p"},"flask"),".\nThis web application exposes a virtual machine ",(0,o.yg)("inlineCode",{parentName:"p"},"API")," that the user can interact with (like ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_create"),")."),(0,o.yg)("p",null,"So, when we're calling ",(0,o.yg)("inlineCode",{parentName:"p"},"curl")," like in the example above:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'curl -H "Content-Type: application/json" \\\n    -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G"}\' \\\n    localhost:5000/vm_create\n')),(0,o.yg)("p",null,"It will do an ",(0,o.yg)("inlineCode",{parentName:"p"},"HTTP POST")," request (because of the ",(0,o.yg)("inlineCode",{parentName:"p"},"-d")," parameter) to ",(0,o.yg)("inlineCode",{parentName:"p"},"/vm_create"),".\nThe request will be handled by the ",(0,o.yg)("inlineCode",{parentName:"p"},"api_vm_create")," function in ",(0,o.yg)("inlineCode",{parentName:"p"},"app.py")," (because of the ",(0,o.yg)("inlineCode",{parentName:"p"},'@app.route("/vm_create", methods=["POST"])')," line)."),(0,o.yg)("p",null,"Inside this function, we also have access to the request payload (the string that comes after ",(0,o.yg)("inlineCode",{parentName:"p"},"-d")," in our ",(0,o.yg)("inlineCode",{parentName:"p"},"curl")," call).\nMore specifically, ",(0,o.yg)("inlineCode",{parentName:"p"},"request.json")," will parse this payload as a ",(0,o.yg)("inlineCode",{parentName:"p"},"JSON")," object and hand it back to us as a python dictionary.\nIn this dictionary we'll find the parameters for our request, like ",(0,o.yg)("inlineCode",{parentName:"p"},"name"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"image"),", ",(0,o.yg)("inlineCode",{parentName:"p"},"network"),", and so on."),(0,o.yg)("p",null,"The function will then take the actions required to create the virtual machine: create the disk, start qemu, interact with the database, etc.\nFinally, whatever is returned by the ",(0,o.yg)("inlineCode",{parentName:"p"},"api_vm_create")," function will be received by the ",(0,o.yg)("inlineCode",{parentName:"p"},"curl")," request as the ",(0,o.yg)("inlineCode",{parentName:"p"},"HTTP")," response.\nHere we also return ",(0,o.yg)("inlineCode",{parentName:"p"},"JSON")," objects, like ",(0,o.yg)("inlineCode",{parentName:"p"},'{"id":1,"status":"ok"}'),"."),(0,o.yg)("p",null,"There are 3 objects used by the system:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"vm")," - the actual virtual machine")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"disk")," - holds information about virtual machine disks")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},(0,o.yg)("inlineCode",{parentName:"p"},"network")," - holds information about a network"))),(0,o.yg)("p",null,"Each of these objects are stored in a table in the database."),(0,o.yg)("p",null,"Let's check the database contents (take the password from the ",(0,o.yg)("inlineCode",{parentName:"p"},"setup_db.sh")," file):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose exec db mysql -u os-cloud -p os-cloud\nEnter password:\n...\nMariaDB [os-cloud]> select * from vm;\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n| id | name  | disk_id | mem_size   | network_id | tap_interface_idx | ip         | qemu_pid | qemu_monitor_port | qemu_serial_port | state |\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n|  1 | my_vm |       1 | 2147483648 |          1 |                 0 | 3232235522 |       18 |             10001 |            10002 |     0 |\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n1 row in set (0.001 sec)\n\nMariaDB [os-cloud]> select * from disk;\n+----+-------------+---------------+\n| id | size        | template_name |\n+----+-------------+---------------+\n|  1 | 10737418240 | ubuntu_22.04  |\n+----+-------------+---------------+\n1 row in set (0.000 sec)\n\nMariaDB [os-cloud]> select * from network;\n+----+---------+----------------------+------------+------------+\n| id | name    | bridge_interface_idx | ip         | mask       |\n+----+---------+----------------------+------------+------------+\n|  1 | default |                    0 | 3232235520 | 4294901760 |\n+----+---------+----------------------+------------+------------+\n1 row in set (0.000 sec)\n")),(0,o.yg)("p",null,(0,o.yg)("inlineCode",{parentName:"p"},"Note: in real life, DON'T store passwords in text files inside a repository"),"."),(0,o.yg)("p",null,"Some observations:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"There is a ",(0,o.yg)("inlineCode",{parentName:"p"},"default")," network already created.\nThat is why we specified ",(0,o.yg)("inlineCode",{parentName:"p"},'"network": "default"')," in the vm creation parameters, and we see that the vm is assigned to this network (",(0,o.yg)("inlineCode",{parentName:"p"},"network_id")," is ",(0,o.yg)("inlineCode",{parentName:"p"},"1"),").")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"This network's ip address is ",(0,o.yg)("inlineCode",{parentName:"p"},"3232235520"),", which in hex is ",(0,o.yg)("inlineCode",{parentName:"p"},"0xC0A80000"),", that is, ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.0"),".\nThe netmask is ",(0,o.yg)("inlineCode",{parentName:"p"},"0xFFFF0000"),", or ",(0,o.yg)("inlineCode",{parentName:"p"},"/16"),".\nThis explains why our vm received the ip address ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.2"),".")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"There is a disk with the size of ",(0,o.yg)("inlineCode",{parentName:"p"},"10GB"),", based on the ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22.04")," template, exactly like we requested.\nThis disk is assigned to our vm (",(0,o.yg)("inlineCode",{parentName:"p"},"disk_id")," is ",(0,o.yg)("inlineCode",{parentName:"p"},"1"),").\nThe disk file will reside in ",(0,o.yg)("inlineCode",{parentName:"p"},"support/os-cloud/vm-disks/1/disk.qcow2"),", or ",(0,o.yg)("inlineCode",{parentName:"p"},"/vm-disks/1/disk.qcow2")," inside the container."))),(0,o.yg)("h2",{id:"virtual-machine-creation"},"Virtual Machine Creation"),(0,o.yg)("p",null,"Take a look at the ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_create")," function in ",(0,o.yg)("inlineCode",{parentName:"p"},"support/os-cloud/os-cloud/vm.py"),".\nThe steps undertaken are roughly:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"some initial allocations: the virtual machine IP address, network interface, qemu ports, etc")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"the virtual machine disk is created, based on the template specified by the user (like ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22.04"),")")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"the virtual machine is started with this new disk, in order to do some more customizations (the ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function)")),(0,o.yg)("li",{parentName:"ol"},(0,o.yg)("p",{parentName:"li"},"the virtual machine is restarted again with the final disk in place"))),(0,o.yg)("h2",{id:"disk-creation"},"Disk Creation"),(0,o.yg)("p",null,"All the disk templates are in ",(0,o.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/support/disk-templates"),".\nThis directory will be mounted in ",(0,o.yg)("inlineCode",{parentName:"p"},"/disk-templates")," inside the container."),(0,o.yg)("p",null,"The first step of disk creation is to create a ",(0,o.yg)("inlineCode",{parentName:"p"},"qcow2")," disk file based on the template specified by the user (step 2 from the explanation above)."),(0,o.yg)("p",null,"This is done in the ",(0,o.yg)("inlineCode",{parentName:"p"},"create_disk_from_template")," function in ",(0,o.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/support/os-cloud/disk.py"),".\nThe function will first create a disk object in the database, then it will call 2 shell scripts: ",(0,o.yg)("inlineCode",{parentName:"p"},"create_disk_from_template.sh")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"setup_root_password.sh"),"."),(0,o.yg)("p",null,"The second step is to start the virtual machine with this disk and do some customizations (step 3 from above)."),(0,o.yg)("p",null,"This is done in the ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function in ",(0,o.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/support/os-cloud/vm.py"),".\nThe code will connect to the vm's qemu serial console using ",(0,o.yg)("inlineCode",{parentName:"p"},"pexpect"),".\nThen it will use a series of ",(0,o.yg)("inlineCode",{parentName:"p"},"expect_exact")," + ",(0,o.yg)("inlineCode",{parentName:"p"},"sendline")," pairs to interact with the virtual machine, as if those commands were typed in the command-line."),(0,o.yg)("h2",{id:"os-cloud-more-disk-customization"},"OS-Cloud: More Disk Customization"),(0,o.yg)("p",null,"You might have probably noticed that there are 2 types of disk customizations:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"One type is for things that can be done without running the virtual machine.\nIf we only want to modify some files inside the disk filesystem, we can do so by mounting the disk.\nThis is done, for example, in the ",(0,o.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04/setup_root_password.sh")," script.\nThere we use ",(0,o.yg)("inlineCode",{parentName:"p"},"nbd_connect_qcow2")," + ",(0,o.yg)("inlineCode",{parentName:"p"},"mount")," to mount the disk, then we modify the ",(0,o.yg)("inlineCode",{parentName:"p"},"/etc/shadow")," file to change the root password.")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"The second case is for operations that must be done with the virtual machine running.\nThese are handled in the ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function: the virtual machine is first started (",(0,o.yg)("inlineCode",{parentName:"p"},"start_qemu_for_vm"),"), then ",(0,o.yg)("inlineCode",{parentName:"p"},"pexpect")," is used to interact with the virtual machine via the ",(0,o.yg)("inlineCode",{parentName:"p"},"qemu")," serial console.\nHere we do things like running ",(0,o.yg)("inlineCode",{parentName:"p"},"ssh-keygen")," - a binary that is part of the disk filesystem, which depends on other parts of the operating system from the disk to be running.\nNote that in ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare"),", for convenience, we also do some customizations that fall into the first category (like modifying ",(0,o.yg)("inlineCode",{parentName:"p"},"/etc/ssh/sshd_config"),")."))),(0,o.yg)("h3",{id:"copy-additional-files-to-the-newly-created-disk"},"Copy Additional Files to the Newly Created Disk"),(0,o.yg)("p",null,"This is a customization from the first category.\nIn ",(0,o.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04/files")," there is a file called ",(0,o.yg)("inlineCode",{parentName:"p"},"99-os-cloud-welcome")," (a script that prints a greeting message).\nWe want to copy this file to ",(0,o.yg)("inlineCode",{parentName:"p"},"/etc/update-motd.d")," in our newly created disk, so that it will run whenever a user logs in."),(0,o.yg)("p",null,"To do this, you will create a script called ",(0,o.yg)("inlineCode",{parentName:"p"},"copy_files.sh")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04"),".\nThis script will receive a path to a ",(0,o.yg)("inlineCode",{parentName:"p"},"qcow2")," disk file as an argument, it will mount the disk, and then copy the file to the necessary location.\nThen, in the ",(0,o.yg)("inlineCode",{parentName:"p"},"create_disk_from_template")," function in ",(0,o.yg)("inlineCode",{parentName:"p"},"disk.py")," you will call this script, similar with how the other scripts are called."),(0,o.yg)("p",null,"You can use ",(0,o.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04/setup_root_password.sh")," as an example."),(0,o.yg)("h3",{id:"ssh-key-setup"},"SSH Key Setup"),(0,o.yg)("p",null,"We want to be able to log into the virtual machine using an ssh key, instead of the password ",(0,o.yg)("inlineCode",{parentName:"p"},"123456"),".\nNotice that the ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_create")," API also accepts an ",(0,o.yg)("inlineCode",{parentName:"p"},"ssh_key")," parameter.\nHere, the user can provide an ssh public key, which the system will install in ",(0,o.yg)("inlineCode",{parentName:"p"},"/root/.ssh/authorized_keys")," in the newly created virtual machine."),(0,o.yg)("p",null,"Your task is to implement this feature, as a customization from the second category (that is, implemented in the ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function).\nThe key will be accessible to the function as the ",(0,o.yg)("inlineCode",{parentName:"p"},"ssh_pub_key")," parameter.\nThen it's only a matter of writing the key to the appropriate place, using a command like ",(0,o.yg)("inlineCode",{parentName:"p"},"echo key > /root/.ssh/authorized_keys"),".\nNote that the ",(0,o.yg)("inlineCode",{parentName:"p"},"/root/.ssh")," directory might not exist, so you need to create it as well."),(0,o.yg)("p",null,"After the feature is complete, you can test it using the keys in the ",(0,o.yg)("inlineCode",{parentName:"p"},"support/os-cloud/keys")," directory.\nThis directory contains a pair of public-private keys.\nThe directory will also be mounted inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"os-cloud")," container in ",(0,o.yg)("inlineCode",{parentName:"p"},"/keys"),"."),(0,o.yg)("p",null,"You will create another virtual machine, passing the public key to ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_create"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -H "Content-Type: application/json" \\\n    -d \'{ "name": "my_vm2", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G", "ssh_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8CDHgeE4NIIIih3wSz58GDkfPLUk2m9gmbZB1f6o8Lzawzb3HVFpslAUWK0f/Ymw9cloInpMo50gWMYFSyJ7ZrOWWak54BedpHDkFAxxy+JCE9b+pkKsrAT7wiir7gn2LHlhj55FLZkC9PpM9cBcrMfzlcP9Bf+2cnpDdINybSLmOUmrI23ANteM4lEVaa2yEbCaJk6dFB8+atz5zPjvVI0Hd+kJK7yJ0xV6Zc2ADle7TKW3dyiXOE9qFKe9933Rj7ocqNXCAO1cxUoJCVuVS7lh+1pSSPXLWLTOhVp/XiLGWVP6KRYmmn710MWKm9Kj1tPiGUphUraL20SJiRT6/ os-cloud-user"}\' \\\n    localhost:5000/vm_create\n{"id":2,"status":"ok"}\n')),(0,o.yg)("p",null,"Obtain the IP address that was allocated to the new vm:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -s -H "Content-Type: application/json" -d \'{ "id": 2 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 2,\n  "ip": "192.168.0.3",\n  "mem_size": 2147483648,\n  "name": "my_vm2",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "RUNNING"\n}\n')),(0,o.yg)("p",null,"Then go inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"os-cloud")," container and ssh to the vm using the private key in ",(0,o.yg)("inlineCode",{parentName:"p"},"/keys"),".\nIt should work without prompting for the password:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose exec os-cloud bash\nroot@ac93d3d6cab2:/app# ssh -i /keys/ssh_key root@192.168.0.3\nWelcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-56-generic x86_64)\n[...]\nPowered by OS Cloud\nLast login: Mon Jan  2 19:34:53 2023 from 192.168.0.1\nroot@ubuntu:~#\n")),(0,o.yg)("h2",{id:"os-cloud-internet-access"},"OS-Cloud: Internet Access"),(0,o.yg)("p",null,"Notice that our virtual machines don't have internet access:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"Powered by OS Cloud\nLast login: Mon Jan  2 19:52:47 UTC 2023 on ttyS0\nroot@ubuntu:~# curl google.com\ncurl: (6) Could not resolve host: google.com\n")),(0,o.yg)("p",null,"In this task, we want to fix this problem.\nTo do this, we must first understand how the networking for the virtual machines is done."),(0,o.yg)("p",null,"First, there is the concept of a ",(0,o.yg)("inlineCode",{parentName:"p"},"network"),", which you saw in the previous section.\nThere is a network called ",(0,o.yg)("inlineCode",{parentName:"p"},"default"),", with the address of ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.0/24"),".\nAll virtual machines are part of this network, that's why they were allocated ip addresses like ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.2"),"."),(0,o.yg)("p",null,"Let's go inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"os-cloud")," container and take a look at the network interfaces:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"$ docker-compose exec os-cloud bash\nroot@8333e5cefb0d:/app# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 8a:68:b7:5b:6b:45 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.1/16 scope global br0\n       valid_lft forever preferred_lft forever\n3: tap0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\n    link/ether 8a:68:b7:5b:6b:45 brd ff:ff:ff:ff:ff:ff\n4: tap1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\n    link/ether fa:f8:7f:83:50:8f brd ff:ff:ff:ff:ff:ff\n77: eth0@if78: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:16:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.22.0.3/16 brd 172.22.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\nroot@8333e5cefb0d:/app# ps -ef | grep qemu\nroot          19       8 29 09:15 ?        00:01:26 qemu-system-x86_64 -m 2048 -hda /vm-disks/1/disk.qcow2 -net nic,macaddr=52:54:00:12:34:00 -net tap,ifname=tap0,script=no -monitor telnet::10001,server,nowait -serial telnet::10002,server,nowait -nographic -enable-kvm\nroot          29       8 28 09:15 ?        00:01:24 qemu-system-x86_64 -m 2048 -hda /vm-disks/2/disk.qcow2 -net nic,macaddr=52:54:00:12:34:01 -net tap,ifname=tap1,script=no -monitor telnet::10003,server,nowait -serial telnet::10004,server,nowait -nographic -enable-kvm\n")),(0,o.yg)("p",null,"Here we have 2 virtual machines running.\nEach virtual machine uses a ",(0,o.yg)("inlineCode",{parentName:"p"},"tap")," interface (the ",(0,o.yg)("inlineCode",{parentName:"p"},"-net tap,ifname=tap0,script=no")," parameter for ",(0,o.yg)("inlineCode",{parentName:"p"},"qemu"),").\nThis means that the ",(0,o.yg)("inlineCode",{parentName:"p"},"ens0")," interface inside the virtual machine corresponds to the ",(0,o.yg)("inlineCode",{parentName:"p"},"tap0")," interface outside the virtual machine.\nAll the tap interfaces are bridged together into the ",(0,o.yg)("inlineCode",{parentName:"p"},"br0")," bridge, which has the ip address ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.1"),".\nAlso, each virtual machine has the default gateway configured to be ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.1"),"."),(0,o.yg)("p",null,"In summary, it looks something like this:"),(0,o.yg)("p",null,(0,o.yg)("img",{alt:"os-cloud",src:t(2806).A})),(0,o.yg)("p",null,"All the traffic coming from the virtual machines passes through the ",(0,o.yg)("inlineCode",{parentName:"p"},"br0")," interface.\nSo, in order to make the internet work, all we have to do is a simple ",(0,o.yg)("inlineCode",{parentName:"p"},"NAT"),", with a command like:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"root@8333e5cefb0d:/app# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j MASQUERADE\n")),(0,o.yg)("p",null,"Now, the virtual machines should have internet access:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'root@8333e5cefb0d:/app# ssh root@192.168.0.2\n[...]\nroot@ubuntu:~# curl google.com\n<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF="http://www.google.com/">here</A>.\n</BODY></HTML>\n')),(0,o.yg)("p",null,"Now your task is to run the ",(0,o.yg)("inlineCode",{parentName:"p"},"iptables")," command above automatically when the system starts, so that it's not necessary to run it manually like we did in the above example."),(0,o.yg)("p",null,"A good place to do this is in the ",(0,o.yg)("inlineCode",{parentName:"p"},"create_one_network")," function in ",(0,o.yg)("inlineCode",{parentName:"p"},"network.py"),".\nThere you can add another ",(0,o.yg)("inlineCode",{parentName:"p"},"subprocess.run")," call to run ",(0,o.yg)("inlineCode",{parentName:"p"},"iptables"),".\nThe ",(0,o.yg)("inlineCode",{parentName:"p"},"192.168.0.0/24")," value should not be hardcoded, but you can take it from the ",(0,o.yg)("inlineCode",{parentName:"p"},"ip_with_prefixlen")," member of the ",(0,o.yg)("inlineCode",{parentName:"p"},"Net")," object."))}d.isMDXComponent=!0},6158:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/containers-vs-vms-75f454982e671d86b4d127b6bed5db07.svg"},5635:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nested_virt_vbox-4c9c494a233277658f851662ca2dc082.png"},962:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/nested_virt_vmware-1b3a6b314c74c626bc006936abb01bf7.png"},6301:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/os_cloud-ff20c47681f663aa8430106ab44e0cd5.svg"},2806:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/os_cloud_networking-c27fac0c5e0a3100a184bf283728b467.svg"}}]);