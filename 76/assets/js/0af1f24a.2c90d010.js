"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[6844],{5680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>y});var a=t(6540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(t),d=o,y=c["".concat(s,".").concat(d)]||c[d]||m[d]||r;return t?a.createElement(y,i(i({ref:n},u),{},{components:t})):a.createElement(y,i({ref:n},u))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[c]="string"==typeof e?e:o,i[1]=p;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},2961:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>p,toc:()=>l});var a=t(8168),o=(t(6540),t(5680));const r={},i="Create a New Disk by Hand",p={unversionedId:"Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/OS Cloud/README",id:"Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/OS Cloud/README",title:"Create a New Disk by Hand",description:"Let's replicate the above-mentioned steps and create a new disk ourselves.",source:"@site/docs/Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/OS Cloud/README.md",sourceDirName:"Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/OS Cloud",slug:"/Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/OS Cloud/",permalink:"/operating-systems/76/Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/OS Cloud/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Tasks",permalink:"/operating-systems/76/Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Tasks/"},next:{title:"Questions",permalink:"/operating-systems/76/Application Interaction/Lab 12 - Application Interaction/OS Cloud/Drills/Questions/"}},s={},l=[],u={toc:l},c="wrapper";function m(e){let{components:n,...t}=e;return(0,o.yg)(c,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"create-a-new-disk-by-hand"},"Create a New Disk by Hand"),(0,o.yg)("p",null,"Let's replicate the above-mentioned steps and create a new disk ourselves."),(0,o.yg)("p",null,"First, we have to call the 2 scripts from the ",(0,o.yg)("inlineCode",{parentName:"p"},"create_disk_from_template")," function:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ ./disk-templates/ubuntu_22.04/create_disk_from_template.sh ./disk-templates/ubuntu_22.04/ubuntu_22.04.qcow2 my-disk.qcow2 10737418240\nImage resized.\n\nstudent@os:~/.../support$ ls -lh my-disk.qcow2\n-rw-r--r-- 1 student student 619M Nov 20 15:41 my-disk.qcow2\n\nstudent@os:~/.../support$ sudo ./disk-templates/ubuntu_22.04/setup_root_password.sh my-disk.qcow2 123456\n")),(0,o.yg)("p",null,"Now we can start a qemu instance using this disk:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ qemu-system-x86_64 -enable-kvm -m 2G -hda my-disk.qcow2 -nographic\n...\nUbuntu 22.04 LTS ubuntu ttyS0\n\nubuntu login: root\nPassword:\n...\nroot@ubuntu:~#\n")),(0,o.yg)("p",null,"Here we can further run customization commands, like the ones in the ",(0,o.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function, or any other things that we want."),(0,o.yg)("p",null,"When we're done, we run the ",(0,o.yg)("inlineCode",{parentName:"p"},"halt")," command:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"root@ubuntu:~# halt\nroot@ubuntu:~#          Stopping Session 1 of User root...\n[  OK  ] Removed slice Slice /system/modprobe.\n[  OK  ] Stopped target Graphical Interface.\n...\n         Starting System Halt...\n[   86.431398] reboot: System halted\n")),(0,o.yg)("p",null,"When the ",(0,o.yg)("inlineCode",{parentName:"p"},"System halted")," message is printed, press ",(0,o.yg)("inlineCode",{parentName:"p"},"CTRL+A X")," to exit qemu (that is, press ",(0,o.yg)("inlineCode",{parentName:"p"},"CTRL+A"),", release ",(0,o.yg)("inlineCode",{parentName:"p"},"CTRL")," and ",(0,o.yg)("inlineCode",{parentName:"p"},"A"),", press ",(0,o.yg)("inlineCode",{parentName:"p"},"X"),")."),(0,o.yg)("h1",{id:"implement-vm_stop"},"Implement ",(0,o.yg)("inlineCode",{parentName:"h1"},"vm_stop")),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_stop")," command will stop a particular virtual machine, meaning it will stop the qemu process for that vm.\nThe implementation starts in ",(0,o.yg)("inlineCode",{parentName:"p"},"api_vm_stop")," in ",(0,o.yg)("inlineCode",{parentName:"p"},"app.py"),", which is the function that handles the ",(0,o.yg)("inlineCode",{parentName:"p"},"http")," request for the stop operation.\nHere you need to do the following:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"extract the virtual machine ",(0,o.yg)("inlineCode",{parentName:"p"},"id")," from the request")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"use the ",(0,o.yg)("inlineCode",{parentName:"p"},"vm.vm_get")," function to convert this ID into a ",(0,o.yg)("inlineCode",{parentName:"p"},"VM")," structure")),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"call ",(0,o.yg)("inlineCode",{parentName:"p"},"vm.vm_stop")," and pass the ",(0,o.yg)("inlineCode",{parentName:"p"},"VM")," object to it"))),(0,o.yg)("p",null,"In ",(0,o.yg)("inlineCode",{parentName:"p"},"vm.vm_stop"),":"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"call ",(0,o.yg)("inlineCode",{parentName:"p"},"stop_qemu_for_vm"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"change the vm pid in the database to ",(0,o.yg)("inlineCode",{parentName:"p"},"-1"))),(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"change the vm state in the database to ",(0,o.yg)("inlineCode",{parentName:"p"},"VM_STATE_STOPPED")))),(0,o.yg)("p",null,"After modifying the code, you should run ",(0,o.yg)("inlineCode",{parentName:"p"},"docker-compose up --build")," again.\nAlso, if your database became inconsistent, you can clean it up by re-running the ",(0,o.yg)("inlineCode",{parentName:"p"},"setup_db.sh")," script.\nThen delete all vm disks with ",(0,o.yg)("inlineCode",{parentName:"p"},"sudo rm -rf vm-disks/*"),"."),(0,o.yg)("p",null,"With ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_stop")," implemented, the system should work like this:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support$ curl -s localhost:5000/vm_list | jq .\n[\n  {\n    "id": 1,\n    "name": "my_vm"\n  }\n]\nstudent@os:~/.../support$ curl -H "Content-Type: application/json" -d \'{ "id": 1}\' localhost:5000/vm_scurl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "RUNNING"\n}\n')),(0,o.yg)("p",null,"The vm is in the ",(0,o.yg)("inlineCode",{parentName:"p"},"RUNNING")," state.\nNow let's stop it:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support$ curl -H "Content-Type: application/json" -d \'{ "id": 1}\' localhost:5000/vm_stop\n{"status":"ok"}\nstudent@os:~/.../support$ curl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "STOPPED"\n}\n')),(0,o.yg)("p",null,"Now the state is ",(0,o.yg)("inlineCode",{parentName:"p"},"STOPPED"),".\nInside the container, the qemu process should be gone as well:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ docker-compose exec os-cloud bash\nroot@b0600eff8903:/app# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 10:00 ?        00:00:00 /sbin/docker-init -- python3 -u app.py\nroot           7       1  0 10:00 ?        00:00:00 python3 -u app.py\nroot          33       0  0 10:00 pts/3    00:00:00 bash\nroot          41      33  0 10:00 pts/3    00:00:00 ps -ef\n")),(0,o.yg)("p",null,"Finally, the vm can be started again using ",(0,o.yg)("inlineCode",{parentName:"p"},"vm_start"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support$ curl -H "Content-Type: application/json" -d \'{ "id": 1}\' localhost:5000/vm_start\n{"status":"ok"}\n')))}m.isMDXComponent=!0}}]);