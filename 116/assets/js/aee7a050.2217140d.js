"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[782],{5680:(e,n,a)=>{a.d(n,{xA:()=>c,yg:()=>y});var t=a(6540);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function r(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),p=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):r(r({},n),e)),a},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(a),g=i,y=d["".concat(s,".").concat(g)]||d[g]||m[g]||o;return a?t.createElement(y,r(r({ref:n},c),{},{components:a})):t.createElement(y,r({ref:n},c))}));function y(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=a.length,r=new Array(o);r[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[d]="string"==typeof e?e:i,r[1]=l;for(var p=2;p<o;p++)r[p]=a[p];return t.createElement.apply(null,r)}return t.createElement.apply(null,a)}g.displayName="MDXCreateElement"},8175:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=a(8168),i=(a(6540),a(5680));const o={},r="Lab 3 - Memory",l={unversionedId:"Data/lab3",id:"Data/lab3",title:"Lab 3 - Memory",description:"Working with Memory",source:"@site/docs/Data/lab3.md",sourceDirName:"Data",slug:"/Data/lab3",permalink:"/operating-systems/116/Data/lab3",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Strcpy Buffer Overflow",permalink:"/operating-systems/116/Data/Questions/string-strcpy"},next:{title:"Lab 4 - Investigate Memory",permalink:"/operating-systems/116/Data/lab4"}},s={},p=[{value:"Working with Memory",id:"working-with-memory",level:2},{value:"Memory Access",id:"memory-access",level:3},{value:"Memory Protection",id:"memory-protection",level:3},{value:"Process Memory",id:"process-memory",level:2},{value:"Memory Regions",id:"memory-regions",level:3},{value:"Memory Layout of Statically-Linked and Dynamically-Linked Executables",id:"memory-layout-of-statically-linked-and-dynamically-linked-executables",level:3},{value:"Modifying Memory Region Size",id:"modifying-memory-region-size",level:3},{value:"Allocating and Deallocating Memory",id:"allocating-and-deallocating-memory",level:3},{value:"Memory Mapping",id:"memory-mapping",level:3},{value:"Memory Support",id:"memory-support",level:3},{value:"Reference Counting",id:"reference-counting",level:3},{value:"Guide: Memory Allocation Strategy",id:"guide-memory-allocation-strategy",level:2},{value:"C",id:"c",level:3},{value:"Python",id:"python",level:3},{value:"D",id:"d",level:3},{value:"Guide: Memory Vulnerabilities",id:"guide-memory-vulnerabilities",level:2},{value:"C",id:"c-1",level:3},{value:"Python",id:"python-1",level:3},{value:"D",id:"d-1",level:3},{value:"Task: Memory Access",id:"task-memory-access",level:2},{value:"Task: Memory Corruption",id:"task-memory-corruption",level:2},{value:"Task: Memory Protection",id:"task-memory-protection",level:2},{value:"Task: Access Counter",id:"task-access-counter",level:2}],c={toc:p},d="wrapper";function m(e){let{components:n,...a}=e;return(0,i.yg)(d,(0,t.A)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"lab-3---memory"},"Lab 3 - Memory"),(0,i.yg)("h2",{id:"working-with-memory"},"Working with Memory"),(0,i.yg)("p",null,"As previously stated, from a programmer's perspective, memory is abstracted into variables.\nThis hides most of the lower level abstractions.\nEach variable is characterized by an address (or location in memory), type and access rights.\nSome languages require that the developer spells out these attributes explicitly (",(0,i.yg)("strong",{parentName:"p"},"statically typed languages")," - notable examples: C\\C++, D, Java) whereas others deduce them by analyzing the context (",(0,i.yg)("strong",{parentName:"p"},"dynamically typed languages")," - notable examples: Python, JavaScript).\nNevertheless, the language compiler needs to handle this information and, based on it, generate code that manages memory correctly and efficiently."),(0,i.yg)("h3",{id:"memory-access"},"Memory Access"),(0,i.yg)("p",null,"Accessing memory is defined by reading or writing values to or from a variable.\nFrom a programmer's perspective, this looks pretty straightforward:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},'int main(void)\n{\n    int a;               // declare variable\n    a = 42;              // write 42 to variable a\n    printf("%d\\n", a);   // read variable a and print its contents\n\n    return 0;\n}\n')),(0,i.yg)("p",null,"However, from a lower level perspective, there are other attributes that need to be taken care of.\nFor instance, variable ",(0,i.yg)("inlineCode",{parentName:"p"},"a")," needs to have a correspondent area that is reserved in memory.\nThat specific chunk of memory is described by an address and a size.\nThe address for ",(0,i.yg)("inlineCode",{parentName:"p"},"a")," is automatically generated by going through multiple layers of abstractions, but the size is spelled out indirectly by the programmer by using the keyword ",(0,i.yg)("inlineCode",{parentName:"p"},"int"),".\nAnother aspect is represented by the access rights for a specific memory area.\nIn our example, ",(0,i.yg)("inlineCode",{parentName:"p"},"a")," is defined as being plain mutable, however, it is possible to declare constant variables which are stored in memory location with no writing rights."),(0,i.yg)("p",null,"Using the above information, the compiler and the operating system co-work to allocate memory that can represent the contents of the variable."),(0,i.yg)("p",null,"No matter what sort of language you are using, statically or dynamically typed, a variable is always described by the ",(0,i.yg)("strong",{parentName:"p"},"(address, size, access rights)")," triplet.\nBy using this triplet, the content of a variable is stored, retrieved or rewritten."),(0,i.yg)("h3",{id:"memory-protection"},"Memory Protection"),(0,i.yg)("p",null,"Memory contents (both code and data) are separated into sections or zones.\nThis makes it easier to manage.\nMore than that, it allows different zones to have different permissions.\nThis follows the ",(0,i.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Principle_of_least_privilege"},"principle of least privilege")," where only required permissions are part of a given section."),(0,i.yg)("p",null,"Code is usually placed in a section (",(0,i.yg)("inlineCode",{parentName:"p"},".text"),") with read and execute permissions;\nno write permissions.\nVariables are placed in different sections (",(0,i.yg)("inlineCode",{parentName:"p"},".data"),", ",(0,i.yg)("inlineCode",{parentName:"p"},".bss"),", stack, heap) with read and write permissions;\nno execute permissions."),(0,i.yg)("h2",{id:"process-memory"},"Process Memory"),(0,i.yg)("h3",{id:"memory-regions"},"Memory Regions"),(0,i.yg)("p",null,"To better manage a program's memory, the operating systems creates an address space for each process.\nThe address space is compartmentalized in multiple areas, each with its own role.\nMemory addresses use different permissions to decide what actions are allowed."),(0,i.yg)("p",null,"Let's investigate the memory areas of a given process.\nWe use ",(0,i.yg)("inlineCode",{parentName:"p"},"pmap")," to see the memory layout of a running process.\nThe command below shows the memory layout of the current shell process:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ pmap -p $$\n1127:   /bin/bash\n000055fb4d77d000   1040K r-x-- /bin/bash\n000055fb4da80000     16K r---- /bin/bash\n000055fb4da84000     36K rw--- /bin/bash\n000055fb4da8d000     40K rw---   [ anon ]\n000055fb4e9bb000   1604K rw---   [ anon ]\n00007f8fcf670000   4480K r---- /usr/lib/locale/locale-archive\n00007f8fcfad0000     44K r-x-- /lib/x86_64-linux-gnu/libnss_files-2.27.so\n00007f8fcfadb000   2044K ----- /lib/x86_64-linux-gnu/libnss_files-2.27.so\n00007f8fcfcda000      4K r---- /lib/x86_64-linux-gnu/libnss_files-2.27.so\n00007f8fcfcdb000      4K rw--- /lib/x86_64-linux-gnu/libnss_files-2.27.so\n00007f8fcfcdc000     24K rw---   [ anon ]\n00007f8fcfce2000     92K r-x-- /lib/x86_64-linux-gnu/libnsl-2.27.so\n00007f8fcfcf9000   2044K ----- /lib/x86_64-linux-gnu/libnsl-2.27.so\n00007f8fcfef8000      4K r---- /lib/x86_64-linux-gnu/libnsl-2.27.so\n00007f8fcfef9000      4K rw--- /lib/x86_64-linux-gnu/libnsl-2.27.so\n00007f8fcfefa000      8K rw---   [ anon ]\n00007f8fcfefc000     44K r-x-- /lib/x86_64-linux-gnu/libnss_nis-2.27.so\n00007f8fcff07000   2044K ----- /lib/x86_64-linux-gnu/libnss_nis-2.27.so\n00007f8fd0106000      4K r---- /lib/x86_64-linux-gnu/libnss_nis-2.27.so\n00007f8fd0107000      4K rw--- /lib/x86_64-linux-gnu/libnss_nis-2.27.so\n00007f8fd0108000     32K r-x-- /lib/x86_64-linux-gnu/libnss_compat-2.27.so\n00007f8fd0110000   2048K ----- /lib/x86_64-linux-gnu/libnss_compat-2.27.so\n00007f8fd0310000      4K r---- /lib/x86_64-linux-gnu/libnss_compat-2.27.so\n00007f8fd0311000      4K rw--- /lib/x86_64-linux-gnu/libnss_compat-2.27.so\n00007f8fd0312000   1948K r-x-- /lib/x86_64-linux-gnu/libc-2.27.so\n00007f8fd04f9000   2048K ----- /lib/x86_64-linux-gnu/libc-2.27.so\n00007f8fd06f9000     16K r---- /lib/x86_64-linux-gnu/libc-2.27.so\n00007f8fd06fd000      8K rw--- /lib/x86_64-linux-gnu/libc-2.27.so\n00007f8fd06ff000     16K rw---   [ anon ]\n00007f8fd0703000     12K r-x-- /lib/x86_64-linux-gnu/libdl-2.27.so\n00007f8fd0706000   2044K ----- /lib/x86_64-linux-gnu/libdl-2.27.so\n00007f8fd0905000      4K r---- /lib/x86_64-linux-gnu/libdl-2.27.so\n00007f8fd0906000      4K rw--- /lib/x86_64-linux-gnu/libdl-2.27.so\n00007f8fd0907000    148K r-x-- /lib/x86_64-linux-gnu/libtinfo.so.5.9\n00007f8fd092c000   2048K ----- /lib/x86_64-linux-gnu/libtinfo.so.5.9\n00007f8fd0b2c000     16K r---- /lib/x86_64-linux-gnu/libtinfo.so.5.9\n00007f8fd0b30000      4K rw--- /lib/x86_64-linux-gnu/libtinfo.so.5.9\n00007f8fd0b31000    164K r-x-- /lib/x86_64-linux-gnu/ld-2.27.so\n00007f8fd0d24000     20K rw---   [ anon ]\n00007f8fd0d53000     28K r--s- /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\n00007f8fd0d5a000      4K r---- /lib/x86_64-linux-gnu/ld-2.27.so\n00007f8fd0d5b000      4K rw--- /lib/x86_64-linux-gnu/ld-2.27.so\n00007f8fd0d5c000      4K rw---   [ anon ]\n00007ffff002f000    132K rw---   [ stack ]\n00007ffff00c5000     12K r----   [ anon ]\n00007ffff00c8000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total            24364K\n")),(0,i.yg)("p",null,"Information will differ among different systems."),(0,i.yg)("p",null,"See the different regions:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"the first region, with ",(0,i.yg)("inlineCode",{parentName:"li"},"r-x")," permissions is the ",(0,i.yg)("inlineCode",{parentName:"li"},".text")," (code) area"),(0,i.yg)("li",{parentName:"ul"},"the second region, with ",(0,i.yg)("inlineCode",{parentName:"li"},"r--")," permissions is the ",(0,i.yg)("inlineCode",{parentName:"li"},".rodata")," area"),(0,i.yg)("li",{parentName:"ul"},"the third region, with ",(0,i.yg)("inlineCode",{parentName:"li"},"rw-")," permissions is the ",(0,i.yg)("inlineCode",{parentName:"li"},".data")," area, for initialized global variables"),(0,i.yg)("li",{parentName:"ul"},"the fourth region, with ",(0,i.yg)("inlineCode",{parentName:"li"},"rw-")," permissions is the ",(0,i.yg)("inlineCode",{parentName:"li"},".bss")," area"),(0,i.yg)("li",{parentName:"ul"},"the fifth region, with the ",(0,i.yg)("inlineCode",{parentName:"li"},"rw-")," permissions is the dynamic data memory area, also known as heap"),(0,i.yg)("li",{parentName:"ul"},"there are multiple dynamic libraries mapped in the virtual address space of the process, each library with their own regions"),(0,i.yg)("li",{parentName:"ul"},"there is a ",(0,i.yg)("inlineCode",{parentName:"li"},"[stack]")," memory region, with ",(0,i.yg)("inlineCode",{parentName:"li"},"rw-")," permissions")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"pmap")," also shows the total amount of virtual memory available to the process (",(0,i.yg)("inlineCode",{parentName:"p"},"24364K"),"), as a total of the sizes of the regions.\nNote that this is virtual memory, not actual physical memory used by the process.\nFor the process investigated above (with the ",(0,i.yg)("inlineCode",{parentName:"p"},"1127")," pid) we could use the command below to show the total virtual size and physical size (also called ",(0,i.yg)("em",{parentName:"p"},"resident set size"),"):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ ps -o pid,rss,vsz -p $$\n  PID   RSS    VSZ\n 1127  1968  24364\n")),(0,i.yg)("p",null,"The resident size is ",(0,i.yg)("inlineCode",{parentName:"p"},"1968K"),", much smaller than the virtual size."),(0,i.yg)("p",null,"Note how each region has a size multiple of ",(0,i.yg)("inlineCode",{parentName:"p"},"4K"),", this has to do with the memory granularity.\nThe operating system allocates memory in chunks of a predefined size (in our case ",(0,i.yg)("inlineCode",{parentName:"p"},"4K"),") called pages."),(0,i.yg)("h3",{id:"memory-layout-of-statically-linked-and-dynamically-linked-executables"},"Memory Layout of Statically-Linked and Dynamically-Linked Executables"),(0,i.yg)("p",null,"We want to see the difference in memory layout between the statically-linked and dynamically-linked executables."),(0,i.yg)("p",null,"Enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/process-memory/drills/tasks/static-dynamic/support")," directory and build the statically-linked and dynamically-linked executables ",(0,i.yg)("inlineCode",{parentName:"p"},"hello-static")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"hello-dynamic"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/static-dynamic/support$ make\n")),(0,i.yg)("p",null,"Now, by running the two programs and inspecting them with ",(0,i.yg)("inlineCode",{parentName:"p"},"pmap")," on another terminal, we get the output:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/static-dynamic/support$ pmap $(pidof hello-static)\n9714:   ./hello-static\n0000000000400000    876K r-x-- hello-static\n00000000006db000     24K rw--- hello-static\n00000000006e1000      4K rw---   [ anon ]\n00000000017b5000    140K rw---   [ anon ]\n00007ffc6f1d6000    132K rw---   [ stack ]\n00007ffc6f1f9000     12K r----   [ anon ]\n00007ffc6f1fc000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total             1196K\n\nstudent@os:~/.../drills/tasks/static-dynamic/support$ pmap $(pidof hello-dynamic)\n9753:   ./hello-dynamic\n00005566e757f000      8K r-x-- hello-dynamic\n00005566e7780000      4K r---- hello-dynamic\n00005566e7781000      4K rw--- hello-dynamic\n00005566e8894000    132K rw---   [ anon ]\n00007fd434eb8000   1948K r-x-- libc-2.27.so\n00007fd43509f000   2048K ----- libc-2.27.so\n00007fd43529f000     16K r---- libc-2.27.so\n00007fd4352a3000      8K rw--- libc-2.27.so\n00007fd4352a5000     16K rw---   [ anon ]\n00007fd4352a9000    164K r-x-- ld-2.27.so\n00007fd43549f000      8K rw---   [ anon ]\n00007fd4354d2000      4K r---- ld-2.27.so\n00007fd4354d3000      4K rw--- ld-2.27.so\n00007fd4354d4000      4K rw---   [ anon ]\n00007ffe497ba000    132K rw---   [ stack ]\n00007ffe497e3000     12K r----   [ anon ]\n00007ffe497e6000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total             4520K\n")),(0,i.yg)("p",null,"For the static executable, we can see there are no areas for dynamic libraries.\nAnd the ",(0,i.yg)("inlineCode",{parentName:"p"},".rodata")," section has been coalesced in the ",(0,i.yg)("inlineCode",{parentName:"p"},".text")," area."),(0,i.yg)("p",null,"We can see the size of each section in the two executables by using the ",(0,i.yg)("inlineCode",{parentName:"p"},"size")," command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/static-dynamic/support$ size hello-static\ntext    data     bss     dec     hex filename\n893333   20996    7128  921457   e0f71 hello-static\n\nstudent@os:~/.../drills/tasks/static-dynamic/support$ size hello-dynamic\ntext    data     bss     dec     hex filename\n4598     736     824    6158    180e hello-dynamic\n")),(0,i.yg)("h3",{id:"modifying-memory-region-size"},"Modifying Memory Region Size"),(0,i.yg)("p",null,"We want to observe the update in size of memory regions for different instructions used in a program."),(0,i.yg)("p",null,"Enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/process-memory/drills/tasks/modify-areas/support")," directory.\nBrowse the contents of the ",(0,i.yg)("inlineCode",{parentName:"p"},"hello.c")," file;\nit is an update to the ",(0,i.yg)("inlineCode",{parentName:"p"},"hello.c")," file in the ",(0,i.yg)("inlineCode",{parentName:"p"},"memory-areas/")," directory.\nBuild the executable:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/modify-areas/support$ make\n")),(0,i.yg)("p",null,"Use ",(0,i.yg)("inlineCode",{parentName:"p"},"size")," to view the difference between the new executable and the one in the ",(0,i.yg)("inlineCode",{parentName:"p"},"memory-areas/")," directory:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/modify-areas/support$ size hello\n   text    data     bss     dec     hex filename\n  13131   17128   33592   63851    f96b hello\n\nstudent@os:~/.../drills/tasks/modify-areas/support$ size ../memory-areas/hello\n   text    data     bss     dec     hex filename\n   4598     736     824    6158    180e ../memory-areas/hello\n")),(0,i.yg)("p",null,"Explain the differences."),(0,i.yg)("p",null,"Then use the ",(0,i.yg)("inlineCode",{parentName:"p"},"pmap")," to watch the memory areas of the resulting processes from the two different executables.\nWe will see something like this for the new executable:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/modify-areas/support$ pmap $(pidof hello)\n18254:   ./hello\n000055beff4d0000     16K r-x-- hello\n000055beff6d3000      4K r---- hello\n000055beff6d4000     20K rw--- hello\n000055beff6d9000     32K rw---   [ anon ]\n000055beffb99000    324K rw---   [ anon ]\n00007f7b6c2e6000   1948K r-x-- libc-2.27.so\n00007f7b6c4cd000   2048K ----- libc-2.27.so\n00007f7b6c6cd000     16K r---- libc-2.27.so\n00007f7b6c6d1000      8K rw--- libc-2.27.so\n00007f7b6c6d3000     16K rw---   [ anon ]\n00007f7b6c6d7000    164K r-x-- ld-2.27.so\n00007f7b6c8cd000      8K rw---   [ anon ]\n00007f7b6c900000      4K r---- ld-2.27.so\n00007f7b6c901000      4K rw--- ld-2.27.so\n00007f7b6c902000      4K rw---   [ anon ]\n00007ffe2b196000    204K rw---   [ stack ]\n00007ffe2b1d8000     12K r----   [ anon ]\n00007ffe2b1db000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total             4840K\n")),(0,i.yg)("p",null,"We notice the size increase of text, data, bss, heap and stack sections."),(0,i.yg)("h3",{id:"allocating-and-deallocating-memory"},"Allocating and Deallocating Memory"),(0,i.yg)("p",null,"Memory areas in a process address space are static or dynamic.\nStatic memory areas are known at the beginning of process lifetime (i.e. at load-time), while dynamic memory areas are managed at runtime."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},".text"),", ",(0,i.yg)("inlineCode",{parentName:"p"},".rodata"),", ",(0,i.yg)("inlineCode",{parentName:"p"},".data"),", ",(0,i.yg)("inlineCode",{parentName:"p"},".bss")," are allocated at load-time and have a predefined size.\nThe stack and the heap and memory mappings are allocated at runtime and have a variable size.\nFor those, we say we use runtime allocation and deallocation."),(0,i.yg)("p",null,"Memory allocation is implicit for the stack and explicit for the heap.\nThat is, we don't make a particular call to allocate data on the stack;\nthe compiler generates the code that the operating system uses to increase the stack when required.\nFor the heap, we use the ",(0,i.yg)("inlineCode",{parentName:"p"},"malloc()")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"free()")," calls to explicitly allocate and deallocate memory."),(0,i.yg)("p",null,"Omitting to deallocate memory results in memory leaks that hurt the resource use in the system.\nBecause of this, some language runtimes employ a garbage collector that automatically frees unused memory areas.\nMore than that, some languages (think of Python) provide no explicit means to allocate memory: you just define and use data."),(0,i.yg)("p",null,"Let's enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/process-memory/drills/tasks/alloc_size/support")," directory.\nBrowse the ",(0,i.yg)("inlineCode",{parentName:"p"},"alloc_size.c")," file.\nBuild it:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/alloc_size/support$ make\n")),(0,i.yg)("p",null,"Now see the update in the process layout, by running the program in one console:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/alloc_size/support$ ./alloc_size\nPress key to allocate ...\n[...]\n")),(0,i.yg)("p",null,"And investigating it with ",(0,i.yg)("inlineCode",{parentName:"p"},"pmap")," on another console:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../drills/tasks/alloc_size/support$ pmap $(pidof alloc_size)\n21107:   ./alloc_size\n000055de9d173000      8K r-x-- alloc_size\n000055de9d374000      4K r---- alloc_size\n000055de9d375000      4K rw--- alloc_size\n000055de9deea000    132K rw---   [ anon ]\n00007f1ea4fd4000   1948K r-x-- libc-2.27.so\n00007f1ea51bb000   2048K ----- libc-2.27.so\n00007f1ea53bb000     16K r---- libc-2.27.so\n00007f1ea53bf000      8K rw--- libc-2.27.so\n00007f1ea53c1000     16K rw---   [ anon ]\n00007f1ea53c5000    164K r-x-- ld-2.27.so\n00007f1ea55bb000      8K rw---   [ anon ]\n00007f1ea55ee000      4K r---- ld-2.27.so\n00007f1ea55ef000      4K rw--- ld-2.27.so\n00007f1ea55f0000      4K rw---   [ anon ]\n00007ffcf28e9000    132K rw---   [ stack ]\n00007ffcf29be000     12K r----   [ anon ]\n00007ffcf29c1000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total             4520K\n\nstudent@os:~/.../drills/tasks/alloc_size/support$ pmap $(pidof alloc_size)\n21107:   ./alloc_size\n000055de9d173000      8K r-x-- alloc_size\n000055de9d374000      4K r---- alloc_size\n000055de9d375000      4K rw--- alloc_size\n000055de9deea000    452K rw---   [ anon ]\n00007f1ea4fd4000   1948K r-x-- libc-2.27.so\n00007f1ea51bb000   2048K ----- libc-2.27.so\n00007f1ea53bb000     16K r---- libc-2.27.so\n00007f1ea53bf000      8K rw--- libc-2.27.so\n00007f1ea53c1000     16K rw---   [ anon ]\n00007f1ea53c5000    164K r-x-- ld-2.27.so\n00007f1ea55bb000      8K rw---   [ anon ]\n00007f1ea55ee000      4K r---- ld-2.27.so\n00007f1ea55ef000      4K rw--- ld-2.27.so\n00007f1ea55f0000      4K rw---   [ anon ]\n00007ffcf28e9000    132K rw---   [ stack ]\n00007ffcf29be000     12K r----   [ anon ]\n00007ffcf29c1000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total             4840K\n\nstudent@os:~/.../drills/tasks/alloc_size/support$ pmap $(pidof alloc_size)\n21107:   ./alloc_size\n000055de9d173000      8K r-x-- alloc_size\n000055de9d374000      4K r---- alloc_size\n000055de9d375000      4K rw--- alloc_size\n000055de9deea000    420K rw---   [ anon ]\n00007f1ea4fd4000   1948K r-x-- libc-2.27.so\n00007f1ea51bb000   2048K ----- libc-2.27.so\n00007f1ea53bb000     16K r---- libc-2.27.so\n00007f1ea53bf000      8K rw--- libc-2.27.so\n00007f1ea53c1000     16K rw---   [ anon ]\n00007f1ea53c5000    164K r-x-- ld-2.27.so\n00007f1ea55bb000      8K rw---   [ anon ]\n00007f1ea55ee000      4K r---- ld-2.27.so\n00007f1ea55ef000      4K rw--- ld-2.27.so\n00007f1ea55f0000      4K rw---   [ anon ]\n00007ffcf28e9000    132K rw---   [ stack ]\n00007ffcf29be000     12K r----   [ anon ]\n00007ffcf29c1000      4K r-x--   [ anon ]\nffffffffff600000      4K --x--   [ anon ]\n total             4808K\n")),(0,i.yg)("p",null,"The three runs above of the ",(0,i.yg)("inlineCode",{parentName:"p"},"pmap")," command occur before the allocation, after allocation and before deallocation and after deallocation.\nNotice the update toe the 4th section, the heap."),(0,i.yg)("p",null,"Now, let's see what happens behind the scenes.\nRun the executable under ",(0,i.yg)("inlineCode",{parentName:"p"},"ltrace")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"strace"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../drills/tasks/alloc_size/support$ ltrace ./alloc_size\nmalloc(32768)                                                                                                    = 0x55e33f490b10\nprintf("New allocation at %p\\n", 0x55e33f490b10New allocation at 0x55e33f490b10\n)                                                                 = 33\n[...]\nfree(0x55e33f490b10)                                                                                             = <void>\n[...]\n\nstudent@os:~/.../drills/tasks/alloc_size/support$ strace ./alloc_size\n[...]\nwrite(1, "New allocation at 0x55ab98acfaf0"..., 33New allocation at 0x55ab98acfaf0\n) = 33\nwrite(1, "New allocation at 0x55ab98ad7b00"..., 33New allocation at 0x55ab98ad7b00\n) = 33\nbrk(0x55ab98b08000)                     = 0x55ab98b08000\nwrite(1, "New allocation at 0x55ab98adfb10"..., 33New allocation at 0x55ab98adfb10\n) = 33\nwrite(1, "Press key to deallocate ...", 27Press key to deallocate ...) = 27\nread(0,\n"\\n", 1024)                     = 1\nbrk(0x55ab98b00000)                     = 0x55ab98b00000\n[...]\n')),(0,i.yg)("p",null,"The resulting output above shows us the following:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"malloc()")," and ",(0,i.yg)("inlineCode",{parentName:"li"},"free()")," library calls both map to the ",(0,i.yg)("a",{parentName:"li",href:"https://man7.org/linux/man-pages/man2/sbrk.2.html"},(0,i.yg)("inlineCode",{parentName:"a"},"brk")," syscall"),", a syscall that updates the end of the heap (called ",(0,i.yg)("strong",{parentName:"li"},"program break"),")."),(0,i.yg)("li",{parentName:"ul"},"Multiple ",(0,i.yg)("inlineCode",{parentName:"li"},"malloc()")," calls map to a single ",(0,i.yg)("inlineCode",{parentName:"li"},"brk")," syscall for efficiency.\n",(0,i.yg)("inlineCode",{parentName:"li"},"brk")," is called to preallocate a larger chunk of memory that ",(0,i.yg)("inlineCode",{parentName:"li"},"malloc")," will then use.")),(0,i.yg)("p",null,"Update the ",(0,i.yg)("inlineCode",{parentName:"p"},"ALLOC_SIZE_KB")," macro in the ",(0,i.yg)("inlineCode",{parentName:"p"},"alloc_size.c")," file to ",(0,i.yg)("inlineCode",{parentName:"p"},"256"),".\nRebuild the program and rerun it under ",(0,i.yg)("inlineCode",{parentName:"p"},"ltrace")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"strace"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../drills/tasks/alloc_size/support$ ltrace ./alloc_size\n[...]\nmalloc(262144)                                                                                                   = 0x7f4c016a9010\n[...]\nfree(0x7f4c016a9010)                                                                                             = <void>\n[...]\n\nstudent@os:~/.../drills/tasks/alloc_size/support$ strace ./alloc_size\n[...]\nmmap(NULL, 266240, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7feee19f2000\nwrite(1, "New allocation at 0x7feee19f2010"..., 33New allocation at 0x7feee19f2010\n) = 33\nmmap(NULL, 266240, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7feee19b1000\nwrite(1, "New allocation at 0x7feee19b1010"..., 33New allocation at 0x7feee19b1010\n) = 33\nwrite(1, "Press key to deallocate ...", 27Press key to deallocate ...) = 27\nread(0,\n"\\n", 1024)                     = 1\nmunmap(0x7feee19b1000, 266240)          = 0\n[...]\n')),(0,i.yg)("p",null,"For the new allocation size, notice that the remarks above don't hold:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"malloc()")," now invokes the ",(0,i.yg)("inlineCode",{parentName:"li"},"mmap")," syscall, while ",(0,i.yg)("inlineCode",{parentName:"li"},"free()")," invokes the ",(0,i.yg)("inlineCode",{parentName:"li"},"munmap")," syscall."),(0,i.yg)("li",{parentName:"ul"},"Each ",(0,i.yg)("inlineCode",{parentName:"li"},"malloc()")," calls results in a separate ",(0,i.yg)("inlineCode",{parentName:"li"},"mmap")," syscall.")),(0,i.yg)("p",null,"This is a behavior of the ",(0,i.yg)("inlineCode",{parentName:"p"},"malloc()")," in libc, documented in the ",(0,i.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/malloc.3.html#NOTES"},"manual page"),".\nA variable ",(0,i.yg)("inlineCode",{parentName:"p"},"MALLOC_THRESHOLD")," holds the size after which ",(0,i.yg)("inlineCode",{parentName:"p"},"mmap")," is used, instead of ",(0,i.yg)("inlineCode",{parentName:"p"},"brk"),".\nThis is based on a heuristic of using the heap or some other area in the process address space."),(0,i.yg)("h3",{id:"memory-mapping"},"Memory Mapping"),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"mmap")," syscall is used to allocate memory as ",(0,i.yg)("em",{parentName:"p"},"anonymous mapping"),", that is reserving memory in the process address space.\nAn alternate use is for mapping files in the memory address space.\nMapping of files is done by the loader for executables and libraries.\nThat is why, in the output of ",(0,i.yg)("inlineCode",{parentName:"p"},"pmap"),", there is a column with a filename."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},"void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset)\n")),(0,i.yg)("p",null,"To better understand this prototype, let's break it down using an example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},"void *mapped_region = mmap(NULL, filesize, PROT_READ, MAP_PRIVATE, fd, 0);\n")),(0,i.yg)("p",null,"The arguments are as follows:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"addr"),": used to request an exact memory address for the mapping; since we are not constrained by anything, we set ",(0,i.yg)("inlineCode",{parentName:"li"},"addr")," to ",(0,i.yg)("inlineCode",{parentName:"li"},"NULL"),", which means the kernel chooses the address"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"length"),": the length of the mapping i.e. ",(0,i.yg)("inlineCode",{parentName:"li"},"filesize")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"prot"),": specifies the protection of the mapping, and can be a combination of ",(0,i.yg)("inlineCode",{parentName:"li"},"PROT_READ"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"PROT_WRITE"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"PROT_EXEC"),", and ",(0,i.yg)("inlineCode",{parentName:"li"},"PROT_NONE")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"flags"),": the type of the mapping, such as ",(0,i.yg)("inlineCode",{parentName:"li"},"MAP_SHARED")," (changes are shared between processes and written back to the file) or ",(0,i.yg)("inlineCode",{parentName:"li"},"MAP_PRIVATE")," (changes are private to the process and do not modify the file)"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"fd"),": the file descriptor of the file to be mapped"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"offset"),": the offset in the file where the mapping should start")),(0,i.yg)("p",null,"Mapping a file provides a pointer to its contents, allowing you to use this pointer to read or write data.\nThis method turns reading and writing to a file into a matter of pointer copying, rather than relying on ",(0,i.yg)("inlineCode",{parentName:"p"},"read")," / ",(0,i.yg)("inlineCode",{parentName:"p"},"write")," system calls."),(0,i.yg)("p",null,"Unlike ",(0,i.yg)("inlineCode",{parentName:"p"},"mmap"),", the ",(0,i.yg)("inlineCode",{parentName:"p"},"read")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"write")," system calls involve explicitly reading from or writing to a file through a buffer, transferring data between the user space and kernel space."),(0,i.yg)("p",null,"For example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},'int src_fd = open("in.dat", O_RDONLY);\nint dst_fd = open("out.dat", O_WRONLY | O_CREAT | O_TRUNC, 0644);\nchar buffer[8192];\nssize_t bytes;\n\nwhile ((bytes = read(src_fd, buffer, sizeof(buffer))) > 0) {\n    write(dst_fd, buffer, bytes);\n}\n')),(0,i.yg)("p",null,"In this code snippet, we open a source file for reading and a destination file for writing.\n",(0,i.yg)("inlineCode",{parentName:"p"},"read")," reads up to ",(0,i.yg)("inlineCode",{parentName:"p"},"sizeof(buffer)")," bytes from the file descriptor ",(0,i.yg)("inlineCode",{parentName:"p"},"src_fd")," into the buffer.\nNotice that the ",(0,i.yg)("inlineCode",{parentName:"p"},"read")," system call returns the number of bytes read.\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"write")," system call writes the bytes read from the buffer into the destination file and returns the number of bytes successfully written."),(0,i.yg)("p",null,"You should also note the ",(0,i.yg)("inlineCode",{parentName:"p"},"open()")," system call's prototype: ",(0,i.yg)("inlineCode",{parentName:"p"},"int open(const char *pathname, int flags)"),".\nThe argument ",(0,i.yg)("inlineCode",{parentName:"p"},"flags")," must include one of the following access modes: ",(0,i.yg)("inlineCode",{parentName:"p"},"O_RDONLY"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"O_WRONLY"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"O_RDWR")," - indicating that the file is opened in read-only, write-only, or read/write mode.\nYou can add an additional flag - ",(0,i.yg)("inlineCode",{parentName:"p"},"O_CREAT")," - that will create a new file with ",(0,i.yg)("inlineCode",{parentName:"p"},"pathname")," if the file does not already exist.\nThis is only the case when opening the file for writing (",(0,i.yg)("inlineCode",{parentName:"p"},"O_WRONLY")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"O_RDWR"),").\nIf ",(0,i.yg)("inlineCode",{parentName:"p"},"O_CREAT")," is set, a third argument ",(0,i.yg)("inlineCode",{parentName:"p"},"mode_t mode")," is required for the ",(0,i.yg)("inlineCode",{parentName:"p"},"open()")," syscall.\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"mode")," argument specifies the permissions of the newly created file.\nFor example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-c"},"// If DST_FILENAME exists it will be open in read/write mode and truncated to length 0\n// If DST_FILENAME does not exist, a file at the path DST_FILENAME will be create with 644 permissions\ndst_fd = open(DST_FILENAME, O_RDWR | O_CREAT | O_TRUNC, 0644);\n")),(0,i.yg)("p",null,"We will investigate the differences between mapping a file and using ",(0,i.yg)("inlineCode",{parentName:"p"},"read")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"write")," system calls more deeply in the task found at ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/process-memory/drills/tasks/copy/"),", by benchmarking the two methods via the ",(0,i.yg)("inlineCode",{parentName:"p"},"benchmark_cp.sh")," script.\nIf you inspect it, you will notice a weird-looking command ",(0,i.yg)("inlineCode",{parentName:"p"},'sh -c "sync; echo 3 > /proc/sys/vm/drop_caches"'),".\nThis is used to disable a memory optimization that the kernel does.\nIt's called \"buffer cache\" and it's a mechanism by which the kernel caches data blocks from recently accessed files in memory.\nYou will get more detailed information about this in the I/O chapter."),(0,i.yg)("h3",{id:"memory-support"},"Memory Support"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Manual memory management")," (MMM) is one of the most difficult tasks.\nEven experienced programmers make mistakes when tackling such a complicated endeavor.\nAs a consequence, the programming world has been migrating towards languages that offer automatic memory management (AMM).\nAMM programming languages typically offer a garbage collector that tracks down the usage of objects and frees memory once no references exist to a given object.\nAs a consequence, garbage collected programming languages are easier to use and safer.\nHowever, this comes with a cost: the garbage collector, in most cases, requires a significant amount of resources to run.\nTherefore, for performance-critical systems, MMM is still the preferred solution."),(0,i.yg)("p",null,"A middle-ground between programming languages that have AMM (Java, Python, Swift, D) and those that do not (C, C++) is represented by those languages that do not have built-in AMM but offer the possibility to implement it as a library solution (C++, D).\nConcretely, these languages offer lightweight library solutions to optimally track down the lifetime of an object.\nThis is done by using reference counted objects."),(0,i.yg)("h3",{id:"reference-counting"},"Reference Counting"),(0,i.yg)("p",null,"Reference counting is a technique of tracking the lifetime of an object by counting how many references to an object exist.\nAs long as at least one reference exists, the object cannot be destroyed.\nOnce no reference to a given object exists, it can be safely destroyed.\nReference counted is typically implemented by storing a count with the actual payload of the object.\nEvery time a new reference to the object is created, the reference count is incremented.\nEvery time a reference expires, the reference is decremented."),(0,i.yg)("p",null,"The operations that trigger a reference increment are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"initializing an object from another object."),(0,i.yg)("li",{parentName:"ul"},"assigning an object to another object.")),(0,i.yg)("p",null,"The operations that trigger a reference decrement are:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"the lifetime of an object expires")),(0,i.yg)("p",null,"Modern programming languages offer the possibility to specify what code should be run in each of these situations, therefore enabling the implementation of referenced counted data structures.\nAs such, copy constructors may be used to automatically initialize an object from another object, assignment operators may be used to assign an object to another object and destructors may be used to destroy objects."),(0,i.yg)("h2",{id:"guide-memory-allocation-strategy"},"Guide: Memory Allocation Strategy"),(0,i.yg)("p",null,"Navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"guides/memory-alloc/support/")," directory.\nIt contains 3 implementations of the same program in different languages: C, Python and D.\nThe program creates a list of entries, each entry storing a name and an id.\nThe purpose of this exercise is to present the different strategies that programming languages adopt to manage memory."),(0,i.yg)("h3",{id:"c"},"C"),(0,i.yg)("p",null,"The C implementation manages the memory manually.\nYou can observe that all allocations are performed via ",(0,i.yg)("inlineCode",{parentName:"p"},"malloc()")," and the memory is freed using ",(0,i.yg)("inlineCode",{parentName:"p"},"free()"),".\nArrays can be defined as static (on the stack) or dynamic (a pointer to some heap memory).\nStack memory doesn't need to be freed, hence static arrays are automatically deallocated.\nHeap memory, however, is managed by the user, therefore it is the burden of the programmer to find the optimal memory strategy.\nThis offers the advantage that you can fine tune the memory usage depending on your application, but this comes with a cost: more often than not, managing memory is a highly complex error-prone task."),(0,i.yg)("h3",{id:"python"},"Python"),(0,i.yg)("p",null,"The Python implementation of the program has no notion of memory allocation.\nIt simply defines variables and the garbage collector takes care of allocating and deallocating memory.\nNotice how the destructor is called automatically at some point when the garbage collector deems that the list is not used anymore.\nGarbage collection lifts the burden of memory management from the user, however, it may be unsuitable for certain scenarios.\nFor example, real-time applications that need to take action immediately once a certain event occurs cannot use a garbage collector (GC).\nThat is because the GC usually stops the application to free dead objects."),(0,i.yg)("h3",{id:"d"},"D"),(0,i.yg)("p",null,"The previous 2 examples have showcased extreme situations: fully manual vs fully automatic memory management.\nIn D, both worlds are combined: variables may be allocated manually on the stack/heap or via the garbage collector (for brevity, ",(0,i.yg)("inlineCode",{parentName:"p"},"malloc()"),"-based allocation is not presented in this example).\nArrays that are allocated on the stack behave the same as in C, whereas arrays allocated with the garbage collector mimic Python lists.\nClasses are also garbage collected."),(0,i.yg)("h2",{id:"guide-memory-vulnerabilities"},"Guide: Memory Vulnerabilities"),(0,i.yg)("p",null,"The purpose of this exercise is to provide examples on how memory corruption may occur and what are the safety guards implemented by different programming languages."),(0,i.yg)("p",null,"Navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"guides/memory-vuln/support/")," directory.\nIt features 3 files, each showcasing what happens in case of actions that may lead to memory corruption."),(0,i.yg)("h3",{id:"c-1"},"C"),(0,i.yg)("p",null,"The C implementation showcases some of the design flaws of the language can lead to memory corruption."),(0,i.yg)("p",null,"The first example demonstrates how a pointer to an expired stack frame may be leaked to an outer scope.\nThe C language does not implement any guards against such behavior, although data flow analysis could be used to detect such cases."),(0,i.yg)("p",null,"The second example highlights the fact that C does not check any bounds when performing array operations.\nThis leads to all sorts of undefined behavior.\nIn this scenario, some random memory is overwritten with ",(0,i.yg)("inlineCode",{parentName:"p"},"5"),".\nThe third example exhibits a manifestation of the previous design flaw, where the return address of the ",(0,i.yg)("inlineCode",{parentName:"p"},"main")," function is overwritten with ",(0,i.yg)("inlineCode",{parentName:"p"},"0"),", thus leading to a segmentation fault."),(0,i.yg)("p",null,"Although today it seems obvious that such behavior should not be accepted, we should take into account that the context in which the C language was created was entirely different from today.\nAt that time the resource constraints - DRAM memory was around a few KB, operating systems were in their infancy, branch predictors did not exist etc. - were overwhelming.\nMoreover, security was not a concern because the internet basically did not exist.\nAs a consequence, the language was not developed with memory safety in mind."),(0,i.yg)("h3",{id:"python-1"},"Python"),(0,i.yg)("p",null,"Technically, it is not possible to do any memory corruption in Python (that is, if you avoid calling C functions from it).\nPointers do not formally exist, and any kind of array access is checked to be within its bounds.\nThe example simply showcases what happens when an out-of-bounds access is performed - an ",(0,i.yg)("inlineCode",{parentName:"p"},"IndexError")," is thrown and execution halts."),(0,i.yg)("h3",{id:"d-1"},"D"),(0,i.yg)("p",null,"The D implementation uses almost the same code as the C implementation, but suffers from minor syntax modifications.\nIn essence, the two implement the same logic.\nWhen compiling this code, it can be observed that the D compiler notices at compile time that an out-of-bounds access is performed.\nThis makes sense, since a static array cannot modify its length and therefore the compiler has all the information to spot the mistake.\nThe only way to make the code compile is to comment the faulting lines or to replace the out-of-bounds index with a correct one.\nAfter doing so, the program compiles and we can see that memory corruption occurs.\nHowever, D also has safety checks, however, these are not performed by default.\nTo enable such checks, the user must annotate a function with the ",(0,i.yg)("inlineCode",{parentName:"p"},"@safe")," keyword:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-d"},"int* bad() @safe\n")),(0,i.yg)("p",null,"By doing so, the mechanical checks are enabled and a new set of criteria needs to be followed for the code to be accepted.\nTaking the address of a local, doing pointer arithmetic, reinterpret casts, calling non-",(0,i.yg)("inlineCode",{parentName:"p"},"@safe")," functions etc. are not allowed in ",(0,i.yg)("inlineCode",{parentName:"p"},"@safe")," code.\nIf any of these unsafe features are manually proven to be safe, the ",(0,i.yg)("inlineCode",{parentName:"p"},"@trusted")," keyword may be used to disable the checks but still consider the code ",(0,i.yg)("inlineCode",{parentName:"p"},"@safe"),".\nThis is to allow writing system code, which by its nature is unsafe."),(0,i.yg)("h2",{id:"task-memory-access"},"Task: Memory Access"),(0,i.yg)("p",null,"Navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/working-with-memory/drills/tasks/memory-access/")," directory, run ",(0,i.yg)("inlineCode",{parentName:"p"},"make skels"),", and enter ",(0,i.yg)("inlineCode",{parentName:"p"},"support/src/"),".\nInspect the ",(0,i.yg)("inlineCode",{parentName:"p"},"mem_access.c")," source file."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Describe each variable by completing its ",(0,i.yg)("strong",{parentName:"p"},"(address, size, access rights)")," tuple.")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Try to modify the ",(0,i.yg)("inlineCode",{parentName:"p"},"ca"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"cp")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"cp2")," variables by assigning some other value to them.\nCheck your changes by running the ",(0,i.yg)("inlineCode",{parentName:"p"},"checker.sh")," script in ",(0,i.yg)("inlineCode",{parentName:"p"},"support/tests/"),".\nExplain the behavior."))),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/116/Data/lab3#working-with-memory"},"this")," reading material."),(0,i.yg)("h2",{id:"task-memory-corruption"},"Task: Memory Corruption"),(0,i.yg)("p",null,"For this practice item, you will need to identify the programming mistake that makes it possible to corrupt memory."),(0,i.yg)("p",null,"Navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/working-with-memory/drills/tasks/memory-corruption/")," folder, run ",(0,i.yg)("inlineCode",{parentName:"p"},"make skels")," and enter ",(0,i.yg)("inlineCode",{parentName:"p"},"support/src/"),".\nInspect the source file ",(0,i.yg)("inlineCode",{parentName:"p"},"segfault.c"),"."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"What does the program do? (this could be a quiz in the final form)"),(0,i.yg)("li",{parentName:"ol"},"Compile and run it.\nWhat happens?"),(0,i.yg)("li",{parentName:"ol"},"Debug the program and find the line that causes the segfault.\n",(0,i.yg)("strong",{parentName:"li"},"Note"),": Although using ",(0,i.yg)("inlineCode",{parentName:"li"},"printf()")," calls is a viable option, we strongly suggest you use GDB."),(0,i.yg)("li",{parentName:"ol"},"Fix the program and check your changes by running the ",(0,i.yg)("inlineCode",{parentName:"li"},"checker.sh")," script in ",(0,i.yg)("inlineCode",{parentName:"li"},"support/tests/"),"."),(0,i.yg)("li",{parentName:"ol"},"Analyze the corresponding Python and D implementation.")),(0,i.yg)("p",null,"What is the expected result in each case?\nWhy?\nRun the programs and see what happens."),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/116/Data/lab3#working-with-memory"},"this")," reading material."),(0,i.yg)("h2",{id:"task-memory-protection"},"Task: Memory Protection"),(0,i.yg)("p",null,"Let's navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/working-with-memory/drills/tasks/memory-protection/"),", run ",(0,i.yg)("inlineCode",{parentName:"p"},"make skels")," and enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"support/src/")," directory."),(0,i.yg)("p",null,"Inspect the ",(0,i.yg)("inlineCode",{parentName:"p"},"mem_prot.c")," source file.\nThe file uses different access types for the ",(0,i.yg)("inlineCode",{parentName:"p"},"data")," variable and the ",(0,i.yg)("inlineCode",{parentName:"p"},"do_nothing")," function."),(0,i.yg)("p",null,"Build it:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../memory-protection/support/$ make\ngcc -g -Wall -Wextra -Werror -I../../../../../common/makefile/../utils -I../../../../../common/makefile/../utils/log  -c -o mem_prot.o mem_prot.c\ngcc mem_prot.o ../../../../../common/makefile/../utils/log/log.o  -o mem_prot\n\nstudent@os:~/.../memory-protection/support/$ ./mem_prot\nreading from .data section\nwriting to .data section\nreading from .text section\nexecuting .text section\n")),(0,i.yg)("p",null,"All current actions in the program are valid."),(0,i.yg)("p",null,"Let's uncomment each commented line in the program and try again:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../memory-protection/support/$ ./mem_prot\nreading from .data section\nwriting to .data section\nreading from .text section\nexecuting .text section\nexecuting .data section\nSegmentation fault (core dumped)\n")),(0,i.yg)("p",null,"We now receive the dreaded ",(0,i.yg)("em",{parentName:"p"},"Segmentation fault")," message when we try to access a memory section with wrong permissions."),(0,i.yg)("p",null,"Permissions come into play when we control the memory address via pointers.\nBut even for programming languages that don't offer pointers (such as Python) issues may still arise."),(0,i.yg)("p",null,"In the ",(0,i.yg)("inlineCode",{parentName:"p"},"str.py")," file, we look to modify ",(0,i.yg)("inlineCode",{parentName:"p"},"str[1]"),", but this fails:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../memory-protection/support/$ ./str.py\nn, 110, n\nTraceback (most recent call last):\n  File \"./str.py\", line 5, in <module>\n    str[1] = 'z'\nTypeError: 'str' object does not support item assignment\n")),(0,i.yg)("p",null,"This fails because strings are, in Python, immutable.\nOnce a string is being created, it can not be modified;\nyou have to create a new string."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"Add a variable named ",(0,i.yg)("inlineCode",{parentName:"p"},"ro")," that you define as ",(0,i.yg)("inlineCode",{parentName:"p"},"const"),".\nThe variable will be placed on a read-only section (",(0,i.yg)("inlineCode",{parentName:"p"},".rodata"),") such as that write and execution access would result in ",(0,i.yg)("em",{parentName:"p"},"Segmentation fault"),"."),(0,i.yg)("p",{parentName:"li"},"Access the ",(0,i.yg)("inlineCode",{parentName:"p"},"ro")," variable and show that, indeed, for write and execution access, ",(0,i.yg)("em",{parentName:"p"},"Segmentation fault")," is issued."),(0,i.yg)("p",{parentName:"li"},"Check your work by running the ",(0,i.yg)("inlineCode",{parentName:"p"},"checker.sh")," script in ",(0,i.yg)("inlineCode",{parentName:"p"},"support/tests/"),"."))),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/116/Data/lab3#working-with-memory"},"this")," reading material."),(0,i.yg)("h2",{id:"task-access-counter"},"Task: Access Counter"),(0,i.yg)("p",null,"Navigate to the ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/data/working-with-memory/drills/tasks/access-counter/support")," directory."),(0,i.yg)("p",null,"Your goal is to update the ",(0,i.yg)("inlineCode",{parentName:"p"},"src/access_counter.c")," source code file to capture memory access exceptions (i.e. the ",(0,i.yg)("inlineCode",{parentName:"p"},"SIGSEGV")," signal) and to update page permissions in order for the access to eventually succeed.\nUse ",(0,i.yg)("inlineCode",{parentName:"p"},"mprotect")," to update the protection of the pages in stages: read, write and then exec.\nEach time an update is made, the ",(0,i.yg)("inlineCode",{parentName:"p"},"counter")," variable is increased;\nthis is used for testing."),(0,i.yg)("p",null,"The signal handler is already in place as the ",(0,i.yg)("inlineCode",{parentName:"p"},"access_handler()")," function.\nIt is called any time a ",(0,i.yg)("inlineCode",{parentName:"p"},"SIGSEGV")," signal is being sent out to the current process.\nYou will update the handler by following the ",(0,i.yg)("inlineCode",{parentName:"p"},"TODO")," comments and instructions here."),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"pages")," array stores information about accessed pages.\nAssume the ",(0,i.yg)("inlineCode",{parentName:"p"},"MAX_PAGES")," size of the array is enough to store information.\nWhen an existing page is accessed and causes a memory exception, the permission is update, in the stages mentioned above: read, write, and then exec.\nWhen a new page is accessed, a new entry is filled in the ",(0,i.yg)("inlineCode",{parentName:"p"},"pages")," array, initialized with read protection.\nUse ",(0,i.yg)("inlineCode",{parentName:"p"},"mmap()")," to reserve virtual pages.\nUse anonymous mapping (i.e. the ",(0,i.yg)("inlineCode",{parentName:"p"},"MAP_ANONYMOUS"),") flag.\nUse any permissions required."),(0,i.yg)("p",null,"To test it, enter the ",(0,i.yg)("inlineCode",{parentName:"p"},"tests/")," directory and run:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"make check\n")),(0,i.yg)("p",null,"In case of a correct solution, you will get an output such as:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"./run_all_tests.sh\ntest_acess_read                  ........................ passed ...   9\ntest_acess_write                 ........................ passed ...   9\ntest_acess_exec                  ........................ passed ...  10\ntest_acess_read_write            ........................ passed ...  12\ntest_acess_read_exec             ........................ passed ...  12\ntest_acess_write_exec            ........................ passed ...  12\ntest_acess_exec_read             ........................ passed ...  12\ntest_acess_exec_write            ........................ passed ...  12\ntest_acess_write_read            ........................ passed ...  12\n\nTotal:                                                           100/100\n")),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/116/Data/lab3#working-with-memory"},"this")," reading material."))}m.isMDXComponent=!0}}]);