"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[2609],{3092:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/copy-on-write-final-2dfe1835636c0b38b11fed42b5b690d2.svg"},4352:(e,t,a)=>{a.d(t,{A:()=>s});const s=a.p+"assets/images/copy-on-write-initial-a3673d26b2087aaacf630bc556e0a6a8.svg"},5680:(e,t,a)=>{a.d(t,{xA:()=>d,yg:()=>u});var s=a(6540);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),a.push.apply(a,s)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach(function(t){n(e,t,a[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))})}return e}function r(e,t){if(null==e)return{};var a,s,n=function(e,t){if(null==e)return{};var a,s,n={},o=Object.keys(e);for(s=0;s<o.length;s++)a=o[s],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)a=o[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=s.createContext({}),c=function(e){var t=s.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef(function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(a),m=n,u=p["".concat(l,".").concat(m)]||p[m]||h[m]||o;return a?s.createElement(u,i(i({ref:t},d),{},{components:a})):s.createElement(u,i({ref:t},d))});function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:n,i[1]=r;for(var c=2;c<o;c++)i[c]=a[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9498:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var s=a(8168),n=(a(6540),a(5680));const o={},i="Lab 7 - Copy-on-Write",r={unversionedId:"Compute/lab7",id:"Compute/lab7",title:"Lab 7 - Copy-on-Write",description:"Task: Minor and Major Page Faults",source:"@site/docs/Compute/lab7.md",sourceDirName:"Compute",slug:"/Compute/lab7",permalink:"/operating-systems/Compute/lab7",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Lab 6 - Multiprocess and Multithread",permalink:"/operating-systems/Compute/lab6"},next:{title:"Lab 8 - Synchronization",permalink:"/operating-systems/Compute/lab8"}},l={},c=[{value:"Task: Minor and Major Page Faults",id:"task-minor-and-major-page-faults",level:2},{value:"Minor Page Faults",id:"minor-page-faults",level:3},{value:"Major Page Faults",id:"major-page-faults",level:3},{value:"Task: Mini-shell",id:"task-mini-shell",level:2},{value:"Task: Investigate <code>apache2</code> Using <code>strace</code>",id:"task-investigate-apache2-using-strace",level:2},{value:"Task: Shared Memory",id:"task-shared-memory",level:2},{value:"Usage of Processes and Threads in <code>apache2</code>",id:"usage-of-processes-and-threads-in-apache2",level:2},{value:"Conclusion",id:"conclusion",level:3},{value:"Copy-on-Write",id:"copy-on-write",level:2},{value:"Guide: <code>apache2</code> Live Action",id:"guide-apache2-live-action",level:2},{value:"Guide: Fork Faults",id:"guide-fork-faults",level:2}],d={toc:c},p="wrapper";function h({components:e,...t}){return(0,n.yg)(p,(0,s.A)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"lab-7---copy-on-write"},"Lab 7 - Copy-on-Write"),(0,n.yg)("h2",{id:"task-minor-and-major-page-faults"},"Task: Minor and Major Page Faults"),(0,n.yg)("p",null,"The code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/copy-on-write/drills/tasks/page-faults/support/page_faults.c")," generates some minor and major page faults.\nOpen 2 terminals: one in which you will run the program, and one which will monitor the page faults of the program.\nIn the monitoring terminal, run the following command:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"watch -n 1 'ps -eo min_flt,maj_flt,cmd | grep ./page_faults | head -n 1'\n")),(0,n.yg)("p",null,"Compile the program and run it in the other terminal.\nYou must press ",(0,n.yg)("inlineCode",{parentName:"p"},"enter")," one time, before the program will prompt you to press ",(0,n.yg)("inlineCode",{parentName:"p"},"enter")," more times.\nWatch the first number on the monitoring terminal;\nit increases.\nThose are the minor page faults."),(0,n.yg)("h3",{id:"minor-page-faults"},"Minor Page Faults"),(0,n.yg)("p",null,"A minor page fault is generated whenever a requested page is present in the physical memory, as a frame, but that frame isn't allocated to the process generating the request.\nThese types of page faults are the most common, and they happen when calling functions from dynamic libraries, allocating heap memory, loading programs, reading files that have been cached, and many more situations.\nNow back to the program."),(0,n.yg)("p",null,"The monitoring command already starts with some minor page faults, generated when loading the program."),(0,n.yg)("p",null,"After pressing ",(0,n.yg)("inlineCode",{parentName:"p"},"enter"),", the number increases, because a function from a dynamic library (libc) is fetched when the first ",(0,n.yg)("inlineCode",{parentName:"p"},"printf()")," is executed.\nSubsequent calls to functions that are in the same memory page as ",(0,n.yg)("inlineCode",{parentName:"p"},"printf()")," won't generate other page faults."),(0,n.yg)("p",null,'After allocating the 100 Bytes, you might not see the number of page faults increase.\nThis is because the "bookkeeping" data allocated by ',(0,n.yg)("inlineCode",{parentName:"p"},"malloc()")," was able to fit in an already mapped page.\nThe second allocation, the 1GB one, will always generate one minor page fault - for the bookkeeping data about the allocated memory zone.\nNotice that not all the pages for the 1GB are allocated.\nThey are allocated - and generate page faults - when modified.\nBy now you should know that this mechanism is called ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab7#copy-on-write"},"copy-on-write"),"."),(0,n.yg)("p",null,"Continue with pressing ",(0,n.yg)("inlineCode",{parentName:"p"},"enter")," and observing the effects util you reach opening ",(0,n.yg)("inlineCode",{parentName:"p"},"file.txt"),"."),(0,n.yg)("p",null,"Note that neither opening a file, getting information about it, nor mapping it in memory using ",(0,n.yg)("inlineCode",{parentName:"p"},"mmap()"),", generate page faults.\nAlso note the ",(0,n.yg)("inlineCode",{parentName:"p"},"posix_fadvise()")," call after the one to ",(0,n.yg)("inlineCode",{parentName:"p"},"fstat()"),".\nWith this call we force the OS to not cache the file, so we can generate a ",(0,n.yg)("strong",{parentName:"p"},"major page fault"),"."),(0,n.yg)("h3",{id:"major-page-faults"},"Major Page Faults"),(0,n.yg)("p",null,"Major page faults happen when a page is requested, but it isn't present in the physical memory.\nThese types of page faults happen in 2 situations:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"a page that was swapped out (to the disk), due to lack of memory, is now accessed - this case is harder to show"),(0,n.yg)("li",{parentName:"ul"},"the OS needs to read a file from the disk, because the file contents aren't present in the cache - the case we are showing now")),(0,n.yg)("p",null,"Press ",(0,n.yg)("inlineCode",{parentName:"p"},"enter")," to print the file contents.\nNote the second number go up in the monitoring terminal."),(0,n.yg)("p",null,"Comment the ",(0,n.yg)("inlineCode",{parentName:"p"},"posix_fadvise()")," call, recompile the program, and run it again.\nYou won't get any major page fault, because the file contents are cached by the OS, to avoid those page faults.\nAs a rule, the OS will avoid major page faults whenever possible, because they are very costly in terms of running time."),(0,n.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab7#guide-fork-faults"},"this")," reading material."),(0,n.yg)("h2",{id:"task-mini-shell"},"Task: Mini-shell"),(0,n.yg)("p",null,"As you might remember, to create a new process you need to use ",(0,n.yg)("inlineCode",{parentName:"p"},"fork")," (or ",(0,n.yg)("inlineCode",{parentName:"p"},"clone"),") and ",(0,n.yg)("inlineCode",{parentName:"p"},"exec")," system calls.\nIf you don't, take a look at ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab6#guide-system-dissected"},"what happens under the hood when you use ",(0,n.yg)("inlineCode",{parentName:"a"},"system")),"."),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes/drills/tasks/mini-shell")," directory, run ",(0,n.yg)("inlineCode",{parentName:"p"},"make skels"),", open the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/src")," folder and go through the practice items below."),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"tests/checker.sh")," script to check your solutions."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./checker.sh\nmini_shell: ls ................ passed ... 50\nmini_shell: pwd ................ passed ... 25\nmini_shell: echo hello ................ passed ... 25\n100 / 100\n")),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"With this knowledge in mind, let's implement our own mini-shell."),(0,n.yg)("p",{parentName:"li"},"Start from the skeleton code in ",(0,n.yg)("inlineCode",{parentName:"p"},"mini_shell.c"),".\nWe're already running our Bash interpreter from the command-line, so there's no need to ",(0,n.yg)("inlineCode",{parentName:"p"},"exec")," another Bash from it."),(0,n.yg)("p",{parentName:"li"},"Simply ",(0,n.yg)("inlineCode",{parentName:"p"},"exec")," the command."))),(0,n.yg)("iframe",{id:"67590e1d-fe55-483a-b73b-ed6872bcb7c1",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="69c07de2-74f3-4100-9f7d-468b5f713d39"> <p>Why does the <code>mini_shell</code> process stop after executing a single command?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="b3baaa5f-7d06-41d2-99ef-24229b6b3fed"> <label class="form-check-label" for="b3baaa5f-7d06-41d2-99ef-24229b6b3fed"> <p>Because <code>exec*()</code> syscalls also kill the caller process when the callee ends</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="758148ed-8c16-4991-87b8-05e03c2a8c48"> <label class="form-check-label" for="758148ed-8c16-4991-87b8-05e03c2a8c48"> <p>Because the <code>mini_shell</code> process doesn\'t exist anymore</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="68917bb5-c730-4712-aaca-45d6bea6979f"> <label class="form-check-label" for="68917bb5-c730-4712-aaca-45d6bea6979f"> <p>Because of an implementation error</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="15909a6f-7b11-45b7-b474-7f22be782e22"> <label class="form-check-label" for="15909a6f-7b11-45b7-b474-7f22be782e22"> <p>Because the OS sees that the command has ended and ends the <code>mini_shell</code> process as well</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'758148ed-8c16-4991-87b8-05e03c2a8c48\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>When you <code>exec*()</code> any binary, the VAS current process is <strong>replaced</strong> by that corresponding to that binary.\nSo when you <code>exec*("ls")</code>, for example, the <code>mini_shell</code> process <em>becomes</em> <code>ls</code>.\nThere is no more <code>mini_shell</code> past this point.\nSo when <code>ls</code> ends, there is no <code>mini_shell</code> process to continue its execution anymore.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("67590e1d-fe55-483a-b73b-ed6872bcb7c1");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},'So we need a way to "save" the `mini_shell` process before `exec()`-ing our command.\nFind a way to do this.\n\n> **Hint**:  You can see what `sleepy` does and draw inspiration from there.\n> Use `strace` to also list the calls to `clone()` performed by `sleepy` or its children.\n> [Remember](/operating-systems/Compute/lab6#guide-threads-and-processes-clone) what `clone()` is used for and use its parameters to deduce which of the two scenarios happens to `sleepy`.\n')),(0,n.yg)("h2",{id:"task-investigate-apache2-using-strace"},"Task: Investigate ",(0,n.yg)("inlineCode",{parentName:"h2"},"apache2")," Using ",(0,n.yg)("inlineCode",{parentName:"h2"},"strace")),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes-threads-apache2/drills/tasks/apache2/support/")," folder and go through the practice items below."),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Use ",(0,n.yg)("inlineCode",{parentName:"li"},"make run")," to start the container.\nUse ",(0,n.yg)("inlineCode",{parentName:"li"},"strace")," inside the container to discover the server document root.\nThe document root is the path in the filesystem from where ",(0,n.yg)("inlineCode",{parentName:"li"},"httpd")," serves all the files requested by the clients.")),(0,n.yg)("p",null,"First, you will have to stop the running container using ",(0,n.yg)("inlineCode",{parentName:"p"},"make stop"),", then restart it with ",(0,n.yg)("inlineCode",{parentName:"p"},"make run-privileged"),"."),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Use ",(0,n.yg)("inlineCode",{parentName:"p"},"strace")," inside the container to attach to the worker processes (use the ",(0,n.yg)("inlineCode",{parentName:"p"},"-p")," option for this).\nYou will also have to use the ",(0,n.yg)("inlineCode",{parentName:"p"},"-f")," flag with ",(0,n.yg)("inlineCode",{parentName:"p"},"strace"),", so that it will follow all the threads inside the processes.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"After you have attached successfully to all worker processes, use the ",(0,n.yg)("inlineCode",{parentName:"p"},"curl")," command to send a request.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Then check the ",(0,n.yg)("inlineCode",{parentName:"p"},"strace")," output to see what files were opened by the server."))),(0,n.yg)("iframe",{id:"2fc9b756-25ca-4350-8717-c68653727607",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="1ccd2319-7e3e-4d9d-87b6-5597fa8cd20a"> <p>What is the document root of the <code>apache2</code> server?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="dfa1589f-92c0-4dab-bcde-b9651932c493"> <label class="form-check-label" for="dfa1589f-92c0-4dab-bcde-b9651932c493"> <p><code>/var/www/apache2/htdocs</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="7d1e687b-9587-4eab-a2c1-308fb13883ac"> <label class="form-check-label" for="7d1e687b-9587-4eab-a2c1-308fb13883ac"> <p><code>/etc/apache2</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="b9d17f65-e680-41c0-8913-f019236f425b"> <label class="form-check-label" for="b9d17f65-e680-41c0-8913-f019236f425b"> <p><code>/usr/local/apache2/htdocs/</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="8cbfa8da-ae15-4741-9bca-92abcf663b7b"> <label class="form-check-label" for="8cbfa8da-ae15-4741-9bca-92abcf663b7b"> <p><code>/var/www/html</code></p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'b9d17f65-e680-41c0-8913-f019236f425b\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>In <code>strace</code> we see that the server opens the file <code>/usr/local/apache2/htdocs/index.html</code>.\nThis means that the document root is <code>/usr/local/apache2/htdocs/</code>.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("2fc9b756-25ca-4350-8717-c68653727607");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab7#guide-apache2-live-action"},"this")," reading material."),(0,n.yg)("h2",{id:"task-shared-memory"},"Task: Shared Memory"),(0,n.yg)("p",null,"Navigate to the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/copy-on-write/drills/tasks/shared-memory/")," directory, run ",(0,n.yg)("inlineCode",{parentName:"p"},"make skels")," to generate the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/")," folder, enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/src/")," folder, open ",(0,n.yg)("inlineCode",{parentName:"p"},"shared_memory.c")," and go through the practice items below."),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/tests/checker.sh")," script to check your solution."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./checker.sh\nmmap ............................ passed ... 25\nsem_wait ........................ passed ... 25\nsem_post ........................ passed ... 25\nmatch value ..................... passed ... 25\nTotal: 100 / 100\n")),(0,n.yg)("p",null,"As you remember from the ",(0,n.yg)("a",{parentName:"p",href:"lab3.md#process-memory"},"Data chapter"),", one way to allocate a given number of pages is to use the ",(0,n.yg)("inlineCode",{parentName:"p"},"mmap()")," syscall."),(0,n.yg)("p",null,"Let's look at its ",(0,n.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/mmap.2.html"},"man page"),", specifically at the ",(0,n.yg)("inlineCode",{parentName:"p"},"flags")," argument.\nIts main purpose is to determine the way in which child processes interact with the mapped pages."),(0,n.yg)("iframe",{id:"607294d0-4ba9-4659-83d4-a8940076e3e2",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="7e821148-8ffa-43fd-9a63-03ba2496f02e"> <p>From the description in its <a href="https://man7.org/linux/man-pages/man2/mmap.2.html">man page</a>, what flag should we pass to <code>mmap()</code> in order to mark the mapped pages as copy-on-write?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="53608d49-dd4d-4076-a982-8cf1a5fd95fa"> <label class="form-check-label" for="53608d49-dd4d-4076-a982-8cf1a5fd95fa"> <p><code>MAP_POPULATE</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="66e0ea1b-4d4e-4b00-8356-d2dbd49112ae"> <label class="form-check-label" for="66e0ea1b-4d4e-4b00-8356-d2dbd49112ae"> <p><code>MAP_ANONYMOUS</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="17e83376-1d32-4501-8323-30d61c4adb2c"> <label class="form-check-label" for="17e83376-1d32-4501-8323-30d61c4adb2c"> <p><code>MAP_PRIVATE</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="31cdef65-77d7-46e6-81d1-24feb4b6bf4d"> <label class="form-check-label" for="31cdef65-77d7-46e6-81d1-24feb4b6bf4d"> <p><code>MAP_SHARED</code></p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'17e83376-1d32-4501-8323-30d61c4adb2c\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>Quoting the <a href="https://man7.org/linux/man-pages/man2/mmap.2.html">man page</a>:</p><pre><code class="language-text">MAP_PRIVATE Create a private copy-on-write mapping.</code></pre> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("607294d0-4ba9-4659-83d4-a8940076e3e2");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"Now let's test this flag, as well as its opposite: ",(0,n.yg)("inlineCode",{parentName:"p"},"MAP_SHARED"),".\nCompile and run the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"shared-memory/support/src/shared_memory.c"),"."),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"See the value read by the parent is different from that written by the child.\nModify the ",(0,n.yg)("inlineCode",{parentName:"p"},"flags")," parameter of ",(0,n.yg)("inlineCode",{parentName:"p"},"mmap()")," so they are the same.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Create a semaphore in the shared page and use it to make the parent signal the child before it can exit.\nUse the API defined in ",(0,n.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man0/semaphore.h.0p.html"},(0,n.yg)("inlineCode",{parentName:"a"},"semaphore.h")),"."),(0,n.yg)("p",{parentName:"li"}," ",(0,n.yg)("strong",{parentName:"p"},"Be careful!"),"\nThe value written and read previously by the child and the parent, respectively, must not change."),(0,n.yg)("p",{parentName:"li"},' One way of creating a shared semaphore is to place it within a shared memory area, as we\'ve just done.\nThis only works between "related" processes.\nIf you want to share a semaphore or other types of memory between any two processes, you need filesystem support.\nFor this, you should use ',(0,n.yg)("strong",{parentName:"p"},"named semaphores"),", created using ",(0,n.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/sem_open.3.html"},(0,n.yg)("inlineCode",{parentName:"a"},"sem_open()")),".\nYou'll get more accustomed to such functions in the ","[Application Interaction chapter]","."))),(0,n.yg)("h2",{id:"usage-of-processes-and-threads-in-apache2"},"Usage of Processes and Threads in ",(0,n.yg)("inlineCode",{parentName:"h2"},"apache2")),(0,n.yg)("p",null,"We'll take a look at how a real-world application - the ",(0,n.yg)("inlineCode",{parentName:"p"},"apache2")," HTTP server - makes use of processes and threads.\nSince the server must be able to handle multiple clients at the same time, it must therefore use some form of concurrency.\nWhen a new client arrives, the server offloads the work of interacting with that client to another process or thread."),(0,n.yg)("p",null,"The choice of whether to use multiple processes or threads is not baked into the code.\nInstead, ",(0,n.yg)("inlineCode",{parentName:"p"},"apache2")," provides a couple of modules called MPMs (Multi-Processing Modules).\nEach module implements a different concurrency model, and the users can pick whatever module best fits their needs by editing the server configuration files."),(0,n.yg)("p",null,"The most common MPMs are"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"prefork"),": there are multiple worker processes, each process is single-threaded and handles one client request at a time"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"worker"),": there are multiple worker processes, each process is multi-threaded, and each thread handles one client request at a time"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"event"),": same as ",(0,n.yg)("inlineCode",{parentName:"li"},"worker")," but designed to better handle some particular use cases")),(0,n.yg)("p",null,"In principle, ",(0,n.yg)("inlineCode",{parentName:"p"},"prefork")," provides more stability and backwards compatibility, but it has a bigger overhead.\nOn the other hand, ",(0,n.yg)("inlineCode",{parentName:"p"},"worker")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"event")," are more scalable, and thus able to handle more simultaneous connections, due to the usage of threads.\nOn modern systems, ",(0,n.yg)("inlineCode",{parentName:"p"},"event")," is almost always the default."),(0,n.yg)("h3",{id:"conclusion"},"Conclusion"),(0,n.yg)("p",null,'So far, you\'ve probably seen that spawning a process can "use" a different program (hence the path in the args of ',(0,n.yg)("inlineCode",{parentName:"p"},"system")," or ",(0,n.yg)("inlineCode",{parentName:"p"},"Popen"),"), but some languages such as Python allow you to spawn a process that executes a function from the same script.\nA thread, however, can only start from a certain entry point ",(0,n.yg)("strong",{parentName:"p"},"within the current address space"),", as it is bound to the same process.\nConcretely, a process is but a group of threads.\nFor this reason, when we talk about scheduling or synchronization, we talk about threads.\nA thread is, thus, an abstraction of a task running on a CPU core.\nA process is a logical group of such tasks."),(0,n.yg)("p",null,"We can sum up what we've learned so far by saying that processes are better used for separate, independent work, such as the different connections handled by a server.\nConversely, threads are better suited for replicated work: when the same task has to be performed on multiple cores.\nHowever, replicated work can also be suited for processes.\nDistributed applications, however, leverage different processes as this allows them to run on multiple physical machines at once.\nThis is required by the very large workloads such applications are commonly required to process."),(0,n.yg)("p",null,"These rules are not set in stone, though.\nLike we saw in the ",(0,n.yg)("inlineCode",{parentName:"p"},"apache2")," example, the server uses multiple threads as well as multiple processes.\nThis provides a degree of stability - if one worker thread crashes, it will only crash the other threads belonging to the same process - while still taking advantage of the light resource usage inherent to threads."),(0,n.yg)("p",null,"These kinds of trade-offs are a normal part of the development of real-world applications."),(0,n.yg)("h2",{id:"copy-on-write"},"Copy-on-Write"),(0,n.yg)("p",null,'So far, you know that the parent and child process have separate virtual address spaces.\nBut how are they created, namely how are they "separated"?\nAnd what about the ',(0,n.yg)("strong",{parentName:"p"},"PAS (physical address space)"),"?\nOf course, we would like the stack of the parent, for example, to be physically distinct from that of the child, so they can execute different functions and use different local variables."),(0,n.yg)("p",null,"But should ",(0,n.yg)("strong",{parentName:"p"},"all")," memory sections from the PAS of the parent be distinct from that of the child?\nWhat about some read-only memory sections, such as ",(0,n.yg)("inlineCode",{parentName:"p"},".text")," and ",(0,n.yg)("inlineCode",{parentName:"p"},".rodata"),"?\nAnd what about the heap, where the child ",(0,n.yg)("em",{parentName:"p"},"may")," use some data previously written by the parent and then override it with its own data."),(0,n.yg)("p",null,"The answer to all of these questions is a core mechanism of multiprocess operating systems called ",(0,n.yg)("strong",{parentName:"p"},"Copy-on-Write"),".\nIt works according to one very simple principle:"),(0,n.yg)("blockquote",null,(0,n.yg)("p",{parentName:"blockquote"},"The VAS of the child process initially points to the same PAS as that of the parent.\nA (physical) frame is only duplicated by the child when it attempts to ",(0,n.yg)("strong",{parentName:"p"},"write")," data to it.")),(0,n.yg)("p",null,"This ensures that read-only sections remain shared, while writable sections are shared as long as their contents remain unchanged.\nWhen changes happen, the process making the change receives a unique frame as a modified copy of the original frame ",(0,n.yg)("em",{parentName:"p"},"on demand"),"."),(0,n.yg)("p",null,"In the image below, we have the state of the child and parent processes right after ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," returns in both of them.\nSee how each has its own VAS, both of them being mapped to (mostly) the same PAS."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Copy-on-Write",src:a(4352).A})),(0,n.yg)("p",null,"When one process writes data to a writeable page (in our case, the child writes to a heap page), the frame to which it corresponds is first duplicated.\nThen the process' page table points the page to the newly copied frame, as you can see in the image below."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Copy-on-Write",src:a(3092).A})),(0,n.yg)("p",null,"For a real-world example of ",(0,n.yg)("strong",{parentName:"p"},"Copy-on-Write")," in action, take a look at ",(0,n.yg)("a",{parentName:"p",href:"https://redis.io/docs/latest/develop/get-started/faq/#background-saving-fails-with-a-fork-error-on-linux"},"this brief paragraph")," explaining how ",(0,n.yg)("a",{parentName:"p",href:"https://redis.io/"},"Redis")," uses this technique to snapshot its data without blocking the server."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Be careful!"),"\nDo not confuse ",(0,n.yg)("strong",{parentName:"p"},"copy-on-write")," with ",(0,n.yg)("strong",{parentName:"p"},"demand paging"),".\nRemember from the ",(0,n.yg)("a",{parentName:"p",href:"lab3.md#working-with-memory"},"Data chapter")," that ",(0,n.yg)("strong",{parentName:"p"},"demand paging")," means that when you allocate memory, the OS allocates virtual memory that remains unmapped to physical memory until it's used.\nOn the other hand, ",(0,n.yg)("strong",{parentName:"p"},"copy-on-write")," posits that the virtual memory is already mapped to some frames.\nThese frames are only duplicated when one of the processes attempts to write data to them."),(0,n.yg)("h2",{id:"guide-apache2-live-action"},"Guide: ",(0,n.yg)("inlineCode",{parentName:"h2"},"apache2")," Live Action"),(0,n.yg)("p",null,"Let's run an actual instance of ",(0,n.yg)("inlineCode",{parentName:"p"},"apache2")," and see how everything works.\nGo to ",(0,n.yg)("inlineCode",{parentName:"p"},"apache2/support")," and run ",(0,n.yg)("inlineCode",{parentName:"p"},"make run"),".\nThis will start a container with ",(0,n.yg)("inlineCode",{parentName:"p"},"apache2")," running inside."),(0,n.yg)("p",null,"Check that the server runs as expected:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ curl localhost:8080\n<html><body><h1>It works!</h1></body></html>\n")),(0,n.yg)("p",null,"Now go inside the container and take a look at running processes:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../apache2/support$ docker exec -it apache2-test bash\n\nroot@56b9a761d598:/usr/local/apache2# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 20:38 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1  0 20:38 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      10       1  0 20:38 pts/0    00:00:00 httpd -DFOREGROUND\nroot          25       0  0 20:40 pts/1    00:00:00 bash\nroot          31      25  0 20:40 pts/1    00:00:00 ps -ef\n")),(0,n.yg)("p",null,"We see 3 ",(0,n.yg)("inlineCode",{parentName:"p"},"httpd")," processes.\nThe first one, running as root, is the main process, while the other 2 are the workers."),(0,n.yg)("p",null,"Let's confirm that we are using the ",(0,n.yg)("inlineCode",{parentName:"p"},"event")," mpm:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"root@56b9a761d598:/usr/local/apache2# grep mod_mpm conf/httpd.conf\nLoadModule mpm_event_module modules/mod_mpm_event.so\nLoadModule mpm_prefork_module modules/mod_mpm_prefork.so\nLoadModule mpm_worker_module modules/mod_mpm_worker.so\n")),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"event")," mpm is enabled, so we expect each worker to be multithreaded.\nLet's check:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"root@56b9a761d598:/usr/local/apache2# ps -efL\nUID          PID    PPID     LWP  C NLWP STIME TTY          TIME CMD\nroot           1       0       1  0    1 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1       8  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      11  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      12  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      16  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      17  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      18  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       8       1      19  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1       9  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      14  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      15  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      20  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      21  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      22  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data       9       1      23  0    7 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nroot          24       0      24  1    1 20:56 pts/1    00:00:00 bash\nroot          30      24      30  0    1 20:56 pts/1    00:00:00 ps -efL\n")),(0,n.yg)("p",null,"Indeed, each worker has 7 threads.\nIn fact, the number of threads per worker is configurable, as well as the number of initial workers."),(0,n.yg)("p",null,"When a new connection is created, it will be handled by whatever thread is available from any worker.\nIf all the threads are busy, then the server will spawn more worker processes (and therefore more threads), as long as the total number of threads is below some threshold, which is also configurable."),(0,n.yg)("p",null,"Let's see this dynamic scaling in action.\nWe need to create a number of simultaneous connections that is larger than the current number of threads.\nThere is a simple script in ",(0,n.yg)("inlineCode",{parentName:"p"},"/apache2/supportmake_conn.py")," to do this:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../apache2/support$ python3 make_conn.py localhost 8080\nPress ENTER to exit\n")),(0,n.yg)("p",null,"The script has created 100 connections and will keep them open until we press Enter."),(0,n.yg)("p",null,"Now, in another terminal, let's check the situation inside the container:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../apache2/support$ docker exec -it apache2-test bash\n\nroot@56b9a761d598:/usr/local/apache2# ps -efL\nUID          PID    PPID     LWP  C NLWP STIME TTY          TIME CMD\nroot           1       0       1  0    1 20:56 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      40  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      45  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      46  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      51  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      52  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      53  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      40       1      54  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      55  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      58  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      60  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      62  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      63  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      65  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data      55       1      66  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\n[...]\nwww-data     109       1     109  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     115  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     116  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     121  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     122  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     123  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nwww-data     109       1     124  0    7 21:07 pts/0    00:00:00 httpd -DFOREGROUND\nroot         146       0     146  0    1 21:10 pts/1    00:00:00 bash\nroot         152     146     152  0    1 21:10 pts/1    00:00:00 ps -efL\n")),(0,n.yg)("p",null,"We see a much larger number of threads, as expected."),(0,n.yg)("h2",{id:"guide-fork-faults"},"Guide: Fork Faults"),(0,n.yg)("p",null,"Now let's see the copy-on-write mechanism in practice.\nKeep in mind that ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," is a function used to create a process."),(0,n.yg)("p",null,"Open two terminals (or better: use ",(0,n.yg)("a",{parentName:"p",href:"https://github.com/tmux/tmux/wiki"},(0,n.yg)("inlineCode",{parentName:"a"},"tmux")),").\nIn one of them, compile and run the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"fork-faults/support/fork_faults.c"),".\nAfter each time you press ",(0,n.yg)("inlineCode",{parentName:"p"},"Enter")," in the first terminal window, run the following command in the second window:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../fork-faults/support$ ps -o min_flt,maj_flt -p $(pidof fork_faults)\n")),(0,n.yg)("p",null,"It will show you the number of minor and major page faults performed by the ",(0,n.yg)("inlineCode",{parentName:"p"},"fork_faults")," process and its child."),(0,n.yg)("iframe",{id:"9c3145a1-2f87-455f-83e9-d4329ef439dc",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="bfde57a3-3cde-4009-8fb0-8c13766964e7"> <p>What causes the page faults that occur between the first and second steps?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="63ec5b76-ff83-4579-abe7-2b01795f1098"> <label class="form-check-label" for="63ec5b76-ff83-4579-abe7-2b01795f1098"> <p>The OS duplicates the parent\'s pages in preparation for <code>fork()</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f0b8f12b-c0bf-47d8-a9ce-80efd250e7f1"> <label class="form-check-label" for="f0b8f12b-c0bf-47d8-a9ce-80efd250e7f1"> <p>Demand paging makes the pages in the <code>p</code> array to be mapped to frames only when written</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="ba02690f-cdb5-474e-8de4-7dc5fd0d40cf"> <label class="form-check-label" for="ba02690f-cdb5-474e-8de4-7dc5fd0d40cf"> <p>Calling <code>fork()</code> duplicates the pages previously allocated by the parent</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="13e2cca5-b6f3-44b4-ba94-8f69cfe9a48e"> <label class="form-check-label" for="13e2cca5-b6f3-44b4-ba94-8f69cfe9a48e"> <p><code>mmap()</code> sets the pages to be mapped at a later time, decided by the OS</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'f0b8f12b-c0bf-47d8-a9ce-80efd250e7f1\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> None </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("9c3145a1-2f87-455f-83e9-d4329ef439dc");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"Note that after ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()"),"-ing, there is a second row in the output of ",(0,n.yg)("inlineCode",{parentName:"p"},"ps"),".\nThat corresponds to the child process.\nThe first one still corresponds to the parent."),(0,n.yg)("iframe",{id:"29fb04f0-7625-4009-8709-e15ceab365e2",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="79baa110-bd21-41cf-a686-5897d87cc969"> <p>What causes the page faults registered by the child after the fifth step?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="0388fc04-eb80-42a0-abd2-2d049098752e"> <label class="form-check-label" for="0388fc04-eb80-42a0-abd2-2d049098752e"> <p>Creating the child process inherently duplicates some frames</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="d7c254b8-528f-407e-a560-38989fa25143"> <label class="form-check-label" for="d7c254b8-528f-407e-a560-38989fa25143"> <p>Demand paging propagates the lazy allocation of pages from the parent to the child</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="81085aa8-ac39-461f-b04c-64933ab6af98"> <label class="form-check-label" for="81085aa8-ac39-461f-b04c-64933ab6af98"> <p>They are caused by the loader forking itself when creating the child process</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="96e280d4-7db1-4673-942a-6678c7c17e0b"> <label class="form-check-label" for="96e280d4-7db1-4673-942a-6678c7c17e0b"> <p>The child writes data to the frames it previously shared with its parent and the copy-on-write mechanism copies and remaps them before writing said data</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f1f2052a-c52b-4356-a0b2-2c3090cf53d5"> <label class="form-check-label" for="f1f2052a-c52b-4356-a0b2-2c3090cf53d5"> <p>They are caused by the <code>bash</code> process forking itself when creating the child process</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'96e280d4-7db1-4673-942a-6678c7c17e0b\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> None </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("29fb04f0-7625-4009-8709-e15ceab365e2");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"Now it should be clear how demand paging differs from copy-on-write.\nShared memory is a similar concept.\nIt's a way of marking certain allocated pages so that copy-on-write is disabled.\nAs you may imagine, changes made by the parent to this memory are visible to the child and vice-versa."))}h.isMDXComponent=!0}}]);