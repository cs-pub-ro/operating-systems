"use strict";(globalThis.webpackChunkso=globalThis.webpackChunkso||[]).push([[9577],{4921:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var s=t(8168),n=(t(6540),t(5680));const r={},i="Lab 6 - Multiprocess and Multithread",o={unversionedId:"Compute/lab6",id:"Compute/lab6",title:"Lab 6 - Multiprocess and Multithread",description:"Task: Creating a process",source:"@site/docs/Compute/lab6.md",sourceDirName:"Compute",slug:"/Compute/lab6",permalink:"/operating-systems/Compute/lab6",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Not Race Condition",permalink:"/operating-systems/Compute/Questions/not-race-condition"},next:{title:"Lab 7 - Copy-on-Write",permalink:"/operating-systems/Compute/lab7"}},l={},c=[{value:"Task: Creating a process",id:"task-creating-a-process",level:2},{value:"Higher level - Python",id:"higher-level---python",level:3},{value:"Lower level - C",id:"lower-level---c",level:3},{value:"Task: Wait for Me",id:"task-wait-for-me",level:2},{value:"Task: Create Process",id:"task-create-process",level:2},{value:"Task: Multithreaded",id:"task-multithreaded",level:2},{value:"Task: Libraries for Parallel Processing",id:"task-libraries-for-parallel-processing",level:2},{value:"Array Sum in Python",id:"array-sum-in-python",level:3},{value:"Task: Wait for It",id:"task-wait-for-it",level:2},{value:"Memory Corruption",id:"memory-corruption",level:3},{value:"Hardware Perspective",id:"hardware-perspective",level:2},{value:"The Role of the Operating System",id:"the-role-of-the-operating-system",level:3},{value:"Processes",id:"processes",level:2},{value:"Fork",id:"fork",level:3},{value:"Threads",id:"threads",level:2},{value:"Threads vs Processes",id:"threads-vs-processes",level:3},{value:"Safety",id:"safety",level:4},{value:"Memory Layout of Multithreaded Programs",id:"memory-layout-of-multithreaded-programs",level:3},{value:"Guide: Baby steps - Python",id:"guide-baby-steps---python",level:2},{value:"Guide: Sum Array Processes",id:"guide-sum-array-processes",level:2},{value:"Sum of the Elements in an Array",id:"sum-of-the-elements-in-an-array",level:3},{value:"Spreading the Work Among Other Processes",id:"spreading-the-work-among-other-processes",level:3},{value:"Guide: <code>system</code> Dissected",id:"guide-system-dissected",level:2},{value:"Guide: Sum array Threads",id:"guide-sum-array-threads",level:2},{value:"Spreading the Work Among Other Threads",id:"spreading-the-work-among-other-threads",level:3},{value:"<code>std.parallelism</code> in D",id:"stdparallelism-in-d",level:3},{value:"OpenMP for C",id:"openmp-for-c",level:3},{value:"Guide: Threads and Processes: <code>clone</code>",id:"guide-threads-and-processes-clone",level:2}],d={toc:c},p="wrapper";function h({components:e,...a}){return(0,n.yg)(p,(0,s.A)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,n.yg)("h1",{id:"lab-6---multiprocess-and-multithread"},"Lab 6 - Multiprocess and Multithread"),(0,n.yg)("h2",{id:"task-creating-a-process"},"Task: Creating a process"),(0,n.yg)("h3",{id:"higher-level---python"},"Higher level - Python"),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes/drills/tasks/sleepy")," directory, run ",(0,n.yg)("inlineCode",{parentName:"p"},"make skels"),", open the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/src")," folder and go through the practice items below."),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"tests/checker.sh")," script to check your solutions."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./checker.sh\nsleepy_creator ...................... passed ... 30\nsleepy_creator_wait ................. passed ... 30\nsleepy_creator_c .................... passed ... 40\n100 / 100\n")),(0,n.yg)("p",null,"Head over to ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator.py"),"."),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Solve the ",(0,n.yg)("inlineCode",{parentName:"p"},"TODO"),": use ",(0,n.yg)("inlineCode",{parentName:"p"},"subprocess.Popen()")," to spawn 10 ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep 1000")," processes."),(0,n.yg)("p",{parentName:"li"},"Start the script:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../tasks/sleepy/support$ python3 sleepy_creator.py\n")),(0,n.yg)("p",{parentName:"li"},"Look for the parent process:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ ps -e -H -o pid,ppid,cmd | (head -1; grep "python3 sleepy_creator.py")\n')),(0,n.yg)("p",{parentName:"li"},"It is a ",(0,n.yg)("inlineCode",{parentName:"p"},"python3")," process, as this is the interpreter that runs the script, but we call it the ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator.py")," process for simplicity.\nNo output will be provided by the above command, as the parent process (",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator.py"),") dies before its child processes (the 10 ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep 1000")," subprocesses) finish their execution.\nThe parent process of the newly created child processes is an ",(0,n.yg)("inlineCode",{parentName:"p"},"init"),"-like process: either ",(0,n.yg)("inlineCode",{parentName:"p"},"systemd"),"/",(0,n.yg)("inlineCode",{parentName:"p"},"init")," or another system process that adopts orphan processes.\nLook for the ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep")," child processes using:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ ps -e -H -o pid,ppid,cmd | (head -1; grep sleep)\n PID    PPID         CMD\n4164    1680     sleep 1000\n4165    1680     sleep 1000\n4166    1680     sleep 1000\n4167    1680     sleep 1000\n4168    1680     sleep 1000\n4169    1680     sleep 1000\n4170    1680     sleep 1000\n4171    1680     sleep 1000\n4172    1680     sleep 1000\n4173    1680     sleep 1000\n")),(0,n.yg)("p",{parentName:"li"},"Notice that the child processes do not have ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator.py")," as a parent.\nWhat's more, as you saw above, ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator.py")," doesn't even exist anymore.\nThe child processes have been adopted by an ",(0,n.yg)("inlineCode",{parentName:"p"},"init"),"-like process (in the output above, that process has PID ",(0,n.yg)("inlineCode",{parentName:"p"},"1680")," - ",(0,n.yg)("inlineCode",{parentName:"p"},"PPID")," stands for ",(0,n.yg)("em",{parentName:"p"},"parent process ID"),")."))),(0,n.yg)("iframe",{id:"06f93558-a34f-41d5-9373-ae57d47080cd",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="2a9e640d-b4b3-43ab-b1b1-b59c3da7e001"> <p>Who is the parent of the <code>sleep</code> processes?\nWhy?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="044265eb-9fc6-4333-bfcf-715e4606f54a"> <label class="form-check-label" for="044265eb-9fc6-4333-bfcf-715e4606f54a"> <p><code>bash</code> because it is <code>sleepy_creator.py</code>\'s parent and when a process dies, its parent adopts its orphan children</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="c8fe144b-28ee-4c34-932e-d60f10cae4f5"> <label class="form-check-label" for="c8fe144b-28ee-4c34-932e-d60f10cae4f5"> <p><code>systemd</code> because it is <code>sleepy_creator.py</code>\'s parent and when a process dies, its parent adopts its orphan children</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="898640e9-1d51-411e-8eff-7d62fee7d8c8"> <label class="form-check-label" for="898640e9-1d51-411e-8eff-7d62fee7d8c8"> <p><code>sleepy_creator.py</code> because it is the one who created them</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="ffc6e614-4992-4a62-b978-303fbf00eb7b"> <label class="form-check-label" for="ffc6e614-4992-4a62-b978-303fbf00eb7b"> <p><code>systemd</code> because this is the default process that adopts orphans</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'ffc6e614-4992-4a62-b978-303fbf00eb7b\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>When a process dies without waiting for the termination of all its children, those processes are now orphans.\nThen the <code>systemd</code> process adopts those orphan processes by default.\nOn older Linux systems, it was the <code>init</code> process who adopted orphans.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("06f93558-a34f-41d5-9373-ae57d47080cd");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Solve the ",(0,n.yg)("inlineCode",{parentName:"p"},"TODO"),": change the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator_wait.py")," so that the ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep 1000")," processes remain the children of ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator_wait.py"),".\nThis means that the parent / creator process must ",(0,n.yg)("strong",{parentName:"p"},"not")," exit until its children have finished their execution.\nIn other words, the parent / creator process must ",(0,n.yg)("strong",{parentName:"p"},"wait")," for the termination of its children.\nCheck out ",(0,n.yg)("a",{parentName:"p",href:"https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait"},(0,n.yg)("inlineCode",{parentName:"a"},"Popen.wait()"))," and add the code that makes the parent / creator process wait for its children.\nBefore anything, terminate the ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep")," processes created above:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ pkill sleep\n")),(0,n.yg)("p",{parentName:"li"},"Start the program, again, as you did before:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../tasks/sleepy/support$ python3 sleepy_creator.py\n")),(0,n.yg)("p",{parentName:"li"},"On another terminal, verify that ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator_wait.py")," remains the parent of the ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep")," processes it creates:"),(0,n.yg)("pre",{parentName:"li"},(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ ps -e -H -o pid,ppid,cmd | (head -1; grep sleep)\n PID    PPID                CMD\n16107   9855         python3 sleepy_creator.py\n16108   16107           sleep 1000\n16109   16107           sleep 1000\n16110   16107           sleep 1000\n16111   16107           sleep 1000\n16112   16107           sleep 1000\n16113   16107           sleep 1000\n16114   16107           sleep 1000\n16115   16107           sleep 1000\n16116   16107           sleep 1000\n16117   16107           sleep 1000\n")),(0,n.yg)("p",{parentName:"li"},"Note that the parent process ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator_wait.py")," (",(0,n.yg)("inlineCode",{parentName:"p"},"PID 16107"),") is still alive, and its child processes (the 10 ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep 1000"),") have its ID as their ",(0,n.yg)("inlineCode",{parentName:"p"},"PPID"),".\nYou've successfully waited for the child processes to finish their execution."),(0,n.yg)("p",{parentName:"li"},"If you're having difficulties solving this exercise, go through ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab6#guide-baby-steps---python"},"this")," reading material."))),(0,n.yg)("h3",{id:"lower-level---c"},"Lower level - C"),(0,n.yg)("p",null,"Now let's see how to create a child process in C.\nThere are multiple ways of doing this.\nFor now, we'll start with a higher-level approach."),(0,n.yg)("p",null,"Go to ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator.c")," and use ",(0,n.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/system.3.html"},(0,n.yg)("inlineCode",{parentName:"a"},"system"))," to create a ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep 1000")," process."),(0,n.yg)("iframe",{id:"e4dfadc4-b86b-4266-8354-df1cb8a8f8b2",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="44d97f17-d857-4dc8-9a5a-d1cf10509b83"> <p>Why does the <code>create_sleepy</code> process wait a very long time before ending?\nUse <a href="https://man7.org/linux/man-pages/man3/system.3.html"><code>system</code>\'s man page</a> to find the answer.</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="9853d7b3-df25-4cf6-9ab8-fff4a98d1820"> <label class="form-check-label" for="9853d7b3-df25-4cf6-9ab8-fff4a98d1820"> <p>Because <code>system</code> returns when the command given to it (<code>sleep 1000</code>) ends</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f6560f24-31c2-4181-8768-89b5502e43a6"> <label class="form-check-label" for="f6560f24-31c2-4181-8768-89b5502e43a6"> <p>Because the code is unoptimized (the default optimisation level is <code>-O0</code>)</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="451a23dd-5cff-4fcf-bd06-fc8d8fab84b4"> <label class="form-check-label" for="451a23dd-5cff-4fcf-bd06-fc8d8fab84b4"> <p>Because the operating system takes very long to finish the process</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f0eac347-5011-430d-9532-9c4d24cca9bf"> <label class="form-check-label" for="f0eac347-5011-430d-9532-9c4d24cca9bf"> <p>Because the CPU is very slow</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'9853d7b3-df25-4cf6-9ab8-fff4a98d1820\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>The <a href="https://man7.org/linux/man-pages/man3/system.3.html">man page</a> says it clearly:</p><pre><code class="language-text">system() returns after the command has been completed.</code></pre><p>Therefore, in our case, it returns after <code>sleep 1000</code> ends.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("e4dfadc4-b86b-4266-8354-df1cb8a8f8b2");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"man")," page also mentions that ",(0,n.yg)("inlineCode",{parentName:"p"},"system")," calls ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"exec()")," to run the command it's given.\nIf you want to find out more about them, head over to the ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab7#task-mini-shell"},"Arena and create your own mini-shell"),"."),(0,n.yg)("h2",{id:"task-wait-for-me"},"Task: Wait for Me"),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes/drills/tasks/wait-for-me-processes/")," directory, run ",(0,n.yg)("inlineCode",{parentName:"p"},"make skels"),", open the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/src")," folder and go through the practice items below."),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"tests/checker.sh")," script to check your solutions."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"wait_for_me_processes ...................... passed ... 100\n100 / 100\n")),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Run the code in ",(0,n.yg)("inlineCode",{parentName:"li"},"wait_for_me_processes.py")," (e.g: ",(0,n.yg)("inlineCode",{parentName:"li"},"python3 wait_for_me_processes.py"),").\nThe parent process creates one child that writes and message to the given file.\nThen the parent reads that message.\nSimple enough, right?\nBut running the code raises a ",(0,n.yg)("inlineCode",{parentName:"li"},"FileNotFoundError"),".\nIf you inspect the file you gave the script as an argument, it does contain a string.\nWhat's going on?")),(0,n.yg)("iframe",{id:"e0f35f0f-20ef-4aaa-a94f-a1ad5f437121",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="cbfd8b9b-8fe5-4b12-92ca-e970899f700e"> <p>What causes the <code>FileNotFoundError</code> when running <code>support/wait-for-me/wait_for_me_processes.py</code>?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="7b6a6c18-b31f-4d4f-aaef-fdeded78f1c6"> <label class="form-check-label" for="7b6a6c18-b31f-4d4f-aaef-fdeded78f1c6"> <p>The parent process attempts to open the file before the child process has had the time to create it</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="87f712b8-faaa-46aa-b4a5-c3e5b0dd9132"> <label class="form-check-label" for="87f712b8-faaa-46aa-b4a5-c3e5b0dd9132"> <p>The mode with which to open the file is not specified in the parent process</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="23ff5544-41f8-4095-aeda-c1723f3f568a"> <label class="form-check-label" for="23ff5544-41f8-4095-aeda-c1723f3f568a"> <p>The child process doesn\'t close the file</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="b97e75b1-2c24-4ebd-9917-e10692ac6c23"> <label class="form-check-label" for="b97e75b1-2c24-4ebd-9917-e10692ac6c23"> <p>There is a syntax error in the Python code</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'7b6a6c18-b31f-4d4f-aaef-fdeded78f1c6\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>What you\'ve just experienced is a <strong>race condition</strong>.\nRace conditions are situations in which one thread uses data that may or may not have been previously modified by another thread.\nBecause scheduling is generally nondeterministic, this means that on some runs, the first thread may access unmodified data and modified on others.\nIt\'s impossible to say what kind of data will be used by the first thread.\nIn our case, the data is the file you give to the script as an argument.\nIf scheduling the parent process or its running time takes long enough, the file may have been created by the time the parent needs it, but we can never be sure.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("e0f35f0f-20ef-4aaa-a94f-a1ad5f437121");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre"},"In order to solve race conditions, we need **synchronization**.\nThis is a mechanism similar to a set of traffic lights in a crossroads.\nJust like traffic lights allow some cars to pass only after others have already passed, synchronization is a means for threads to communicate with each other and tell each other to access a resource or not.\n\nThe most basic form of synchronization is **waiting**.\nConcretely, if the parent process **waits** for the child to end, we are sure the file is created and its contents are written.\n")),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},"Use ",(0,n.yg)("inlineCode",{parentName:"li"},"join()")," to make the parent wait for its child before reading the file.")),(0,n.yg)("h2",{id:"task-create-process"},"Task: Create Process"),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes/drills/tasks/create-process/")," directory, run ",(0,n.yg)("inlineCode",{parentName:"p"},"make skels"),", open the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/src")," folder and go through the practice items below."),(0,n.yg)("p",null,"Use the ",(0,n.yg)("inlineCode",{parentName:"p"},"tests/checker.sh")," script to check your solutions."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-bash"},"./checker.sh\nexit_code22 ...................... passed ... 50\nsecond_fork ...................... passed ... 50\n100 / 100\n")),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Change the return value of the child process to 22 so that the value displayed by the parent is changed.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Create a child process of the newly created child."))),(0,n.yg)("p",null,'Use a similar logic and a similar set of prints to those in the support code.\nTake a look at the printed PIDs.\nMake sure the PPID of the "grandchild" is the PID of the child, whose PPID is, in turn, the PID of the parent.'),(0,n.yg)("h2",{id:"task-multithreaded"},"Task: Multithreaded"),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/drills/tasks/multithreaded/")," folder, run ",(0,n.yg)("inlineCode",{parentName:"p"},"make skels"),", and go through the practice items below in the ",(0,n.yg)("inlineCode",{parentName:"p"},"support/")," directory."),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Use the Makefile to compile ",(0,n.yg)("inlineCode",{parentName:"p"},"multithread.c"),", run it and follow the instructions."),(0,n.yg)("p",{parentName:"li"},"The aim of this task is to familiarize you with the ",(0,n.yg)("inlineCode",{parentName:"p"},"pthreads")," library.\nIn order to use it, you have to add ",(0,n.yg)("inlineCode",{parentName:"p"},"#include <pthread.h>")," in ",(0,n.yg)("inlineCode",{parentName:"p"},"multithreaded.c")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"-lpthread")," in the compiler options."),(0,n.yg)("p",{parentName:"li"},"The executable creates 5 threads besides the main thread, puts each of them to sleep for ",(0,n.yg)("strong",{parentName:"p"},"5 seconds"),", then waits for all of them to finish.\nGive it a run and notice that the total waiting time is around ",(0,n.yg)("strong",{parentName:"p"},"5 seconds")," since you started the last thread.\nThat is the whole point - they each run in parallel.")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"Make each thread print its ID once it is done sleeping."),(0,n.yg)("p",{parentName:"li"},"Create a new function ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper2()")," identical to ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper()")," to organize your work.\nSo far, the ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," argument is unused (mind the ",(0,n.yg)("inlineCode",{parentName:"p"},"__unused")," attribute), so that is your starting point.\nYou cannot change ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper2()")," definition, since ",(0,n.yg)("inlineCode",{parentName:"p"},"pthreads_create()")," expects a pointer to a function that receives a ",(0,n.yg)("inlineCode",{parentName:"p"},"void *")," argument.\nWhat you can and should do is to pass a pointer to a ",(0,n.yg)("inlineCode",{parentName:"p"},"int")," as argument, and then cast ",(0,n.yg)("inlineCode",{parentName:"p"},"data")," to ",(0,n.yg)("inlineCode",{parentName:"p"},"int *")," inside ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper2()"),"."),(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Note:")," Do not simply pass ",(0,n.yg)("inlineCode",{parentName:"p"},"&i")," as argument to the function.\nThis will make all threads to use the ",(0,n.yg)("strong",{parentName:"p"},"same integer")," as their ID."),(0,n.yg)("p",{parentName:"li"},(0,n.yg)("strong",{parentName:"p"},"Note:")," Do not use global variables."),(0,n.yg)("p",{parentName:"li"},"If you get stuck you can google ",(0,n.yg)("inlineCode",{parentName:"p"},"pthread example")," and you will probably stumble upon ",(0,n.yg)("a",{parentName:"p",href:"https://gist.github.com/ankurs/179778"},"this"),".")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},"On top of printing its ID upon completion, make each thread sleep for a different amount of time."),(0,n.yg)("p",{parentName:"li"},"Create a new function ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper3()")," identical to ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper()")," to organize your work.\nThe idea is to repeat what you did on the previous exercise and use the right argument for ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep_wrapper3()"),".\nKeep in mind that you cannot change its definition.\nBonus points if you do not use the thread's ID as the sleeping amount."))),(0,n.yg)("h2",{id:"task-libraries-for-parallel-processing"},"Task: Libraries for Parallel Processing"),(0,n.yg)("p",null,"In ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/drills/tasks/sum-array/support/c/sum_array_threads.c"),' we spawned threads "manually" by using the ',(0,n.yg)("inlineCode",{parentName:"p"},"pthread_create()")," function.\nThis is ",(0,n.yg)("strong",{parentName:"p"},"not")," a syscall, but a wrapper over the common syscall used by both ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," (which is also not a syscall) and ",(0,n.yg)("inlineCode",{parentName:"p"},"pthread_create()"),"."),(0,n.yg)("p",null,"Still, ",(0,n.yg)("inlineCode",{parentName:"p"},"pthread_create()")," is not yet a syscall.\nIn order to see what syscall ",(0,n.yg)("inlineCode",{parentName:"p"},"pthread_create()")," uses, check out ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab6#guide-threads-and-processes-clone"},"this section"),"."),(0,n.yg)("p",null,"Most programming languages provide a more advanced API for handling parallel computation."),(0,n.yg)("h3",{id:"array-sum-in-python"},"Array Sum in Python"),(0,n.yg)("p",null,"Let's first probe this by implementing two parallel versions of the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"sum-array/support/python/sum_array_sequential.py"),".\nOne version should use threads and the other should use processes.\nRun each of them using 1, 2, 4, and 8 threads / processes respectively and compare the running times.\nNotice that the running times of the multithreaded implementation do not decrease.\nThis is because the GIL makes it so that those threads that you create essentially run sequentially."),(0,n.yg)("p",null,"The GIL also makes it so that individual Python instructions are atomic.\nRun the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/synchronization/drills/tasks/race-condition/support/python/race_condition.py"),".\nEvery time, ",(0,n.yg)("inlineCode",{parentName:"p"},"var")," will be 0 because the GIL doesn't allow the two threads to run in parallel and reach the critical section at the same time.\nThis means that the instructions ",(0,n.yg)("inlineCode",{parentName:"p"},"var += 1")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"var -= 1")," become atomic."),(0,n.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab6#guide-sum-array-threads"},"this")," reading material."),(0,n.yg)("h2",{id:"task-wait-for-it"},"Task: Wait for It"),(0,n.yg)("p",null,"The process that spawns all the others and subsequently calls ",(0,n.yg)("inlineCode",{parentName:"p"},"waitpid")," to wait for them to finish can also get their return codes.\nUpdate the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/drills/tasks/sum-array-bugs/support/seg-fault/sum_array_processes.c")," and modify the call to ",(0,n.yg)("inlineCode",{parentName:"p"},"waitpid")," to obtain and investigate this return code.\nDisplay an appropriate message if one of the child processes returns an error."),(0,n.yg)("p",null,"Remember to use the appropriate ",(0,n.yg)("a",{parentName:"p",href:"https://linux.die.net/man/2/waitpid"},"macros")," for handling the ",(0,n.yg)("inlineCode",{parentName:"p"},"status")," variable that is modified by ",(0,n.yg)("inlineCode",{parentName:"p"},"waitpid()"),", as it is a bit-field.\nWhen a process runs into a system error, it receives a signal.\nA signal is a means to interrupt the normal execution of a program from the outside.\nIt is associated with a number.\nUse ",(0,n.yg)("inlineCode",{parentName:"p"},"kill -l")," to find the full list of signals."),(0,n.yg)("iframe",{id:"7e1b6401-0beb-4e67-9705-dd26e334b78d",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="00b43206-c19e-47da-a603-d1a504080134"> <p>What is the exit code of the faulty child process spawned by <code>support/sum-array-bugs/seg-fault/sum_array_processes.d</code> with more than 2 processes?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="0168ac6c-076a-4c9f-a47d-84f80f8d3a66"> <label class="form-check-label" for="0168ac6c-076a-4c9f-a47d-84f80f8d3a66"> <p>11 because this is the code of the <code>SIGSEGV</code> signal</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="a37f95ad-f1e9-4c18-a7a7-20c0e2300aa7"> <label class="form-check-label" for="a37f95ad-f1e9-4c18-a7a7-20c0e2300aa7"> <p>6 because the child process was aborted</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="db0d74c8-c2bd-4460-ac94-e1673b6b7290"> <label class="form-check-label" for="db0d74c8-c2bd-4460-ac94-e1673b6b7290"> <p>11 because this is the value of the least significant 4 bytes of the partial array sum calculated by the process</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="858afcaa-1682-4352-b996-d8cd2018cd4f"> <label class="form-check-label" for="858afcaa-1682-4352-b996-d8cd2018cd4f"> <p>11 because this code is always returned when a process ends with an error</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'0168ac6c-076a-4c9f-a47d-84f80f8d3a66\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>We can obtain the number of the signal that killed a child process via the second argument of the <code>waitpid</code> syscall.\nWe can use the <code>WIFSIGNALED()</code> and <code>WTERMSIG()</code> macros.\nBy doing so, we see the exit code of the faulty child process is 11.\nWe can then use the <code>kill -l</code> command to view the code of each signal and <code>SIGSEGV</code> has the code 11.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("7e1b6401-0beb-4e67-9705-dd26e334b78d");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"So up to this point we've seen that one advantage of processes is that they offer better safety than threads.\nBecause they use separate virtual address spaces, sibling processes are better isolated than threads.\nThus, an application that uses processes can be more robust to errors than if it were using threads."),(0,n.yg)("h3",{id:"memory-corruption"},"Memory Corruption"),(0,n.yg)("p",null,"Because they share the same address space, threads run the risk of corrupting each other's data.\nTake a look at the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"sum-array-bugs/support/memory-corruption/python/"),".\nThe two programs only differ in how they spread their workload.\nOne uses threads while the other uses processes."),(0,n.yg)("p",null,"Run both programs with and without memory corruption.\nPass any value as a third argument to trigger the corruption."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../sum-array-bugs/support/memory-corruption/python$ python3 memory_corruption_processes.py <number_of_processes>  # no memory corruption\n[...]\n\nstudent@os:~/.../sum-array-bugs/support/memory-corruption/python$ python3 memory_corruption_processes.py <number_of_processes> 1  # do memory corruption\n[...]\n")),(0,n.yg)("p",null,"The one using threads will most likely print a negative sum, while the other displays the correct sum.\nThis happens because all threads refer to the same memory for the array ",(0,n.yg)("inlineCode",{parentName:"p"},"arr"),".\nWhat happens to the processes is a bit more complicated."),(0,n.yg)("p",null,(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab7#copy-on-write"},"Later in this lab"),", we will see that initially, the page tables of all processes point to the same physical frames or ",(0,n.yg)("inlineCode",{parentName:"p"},"arr"),".\nWhen the malicious process tries to corrupt this array by ",(0,n.yg)("strong",{parentName:"p"},"writing data to it"),", the OS duplicates the original frames of ",(0,n.yg)("inlineCode",{parentName:"p"},"arr")," so that the malicious process writes the corrupted values to these new frames, while leaving the original ones untouched.\nThis mechanism is called ",(0,n.yg)("strong",{parentName:"p"},"Copy-on-Write")," and is an OS optimisation so that memory is shared between the parent and the child process, until one of them attempts to write to it.\nAt this point, this process receives its own separate copies of the previously shared frames."),(0,n.yg)("p",null,"Note that in order for the processes to share the ",(0,n.yg)("inlineCode",{parentName:"p"},"sums")," dictionary, it is not created as a regular dictionary, but using the ",(0,n.yg)("inlineCode",{parentName:"p"},"Manager")," module.\nThis module provides some special data structures that are allocated in ",(0,n.yg)("strong",{parentName:"p"},"shared memory")," so that all processes can access them.\nYou can learn more about shared memory and its various implementations ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab7#task-shared-memory"},"in this section"),"."),(0,n.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab6#guide-sum-array-processes"},"this")," reading material."),(0,n.yg)("h2",{id:"hardware-perspective"},"Hardware Perspective"),(0,n.yg)("p",null,"The main criterion we use to rank CPUs is their ",(0,n.yg)("em",{parentName:"p"},"computation power"),", i.e. their ability to crunch numbers and do math.\nNumerous benchmarks exist out there, and they are publicly displayed on sites such as ",(0,n.yg)("a",{parentName:"p",href:"https://www.cpubenchmark.net/"},"CPUBenchmark"),"."),(0,n.yg)("p",null,"For example, a benchmark can measure the performance of the computer's CPU in a variety of scenarios:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"its ability to perform integer operations"),(0,n.yg)("li",{parentName:"ul"},"its speed in floating point arithmetic"),(0,n.yg)("li",{parentName:"ul"},"data encryption and compression"),(0,n.yg)("li",{parentName:"ul"},"sorting algorithms and others")),(0,n.yg)("p",null,"You can take a look at what exactly is measured using ",(0,n.yg)("a",{parentName:"p",href:"https://www.cpubenchmark.net/cpu.php?cpu=AMD+Ryzen+Threadripper+PRO+5995WX"},"this link"),".\nIt displays the scores obtained by a high-end CPU.\nApart from the tests above, other benchmarks might focus on different performance metrics, such as branch prediction or prefetching."),(0,n.yg)("p",null,"Other approaches are less artificial, measuring performance on real-world applications such as compile times and performance in the latest (and most resource-demanding) video games.\nThe latter metric revolves around how many average FPS (frames per second) a given CPU is able to crank out in a specific video game.\nYou can find a lot of articles online on how CPU benchmarking is done."),(0,n.yg)("p",null,"Most benchmarks, unfortunately, are not open source, especially the more popular ones, such as ",(0,n.yg)("a",{parentName:"p",href:"https://browser.geekbench.com/processor-benchmarks"},"Geekbench 5"),".\nDespite this shortcoming, benchmarks are widely used to compare the performance of various computer ",(0,n.yg)("strong",{parentName:"p"},"hardware"),", CPUs included."),(0,n.yg)("h3",{id:"the-role-of-the-operating-system"},"The Role of the Operating System"),(0,n.yg)("p",null,'As you\'ve seen so far, the CPU provides the "muscle" required for fast computation, i.e. the highly optimised hardware and multiple ALUs, FPUs\nand cores necessary to perform those computations.\nHowever, it is the ',(0,n.yg)("strong",{parentName:"p"},"operating system"),' that provides the "brains" for this computation.\nSpecifically, modern CPUs have the capacity to run multiple tasks in parallel.\nBut they do not provide a means to decide which task to run at each moment.\nThe OS comes as an ',(0,n.yg)("em",{parentName:"p"},"orchestrator")," to ",(0,n.yg)("strong",{parentName:"p"},"schedule")," the way these tasks (that we will later call threads) are allowed to run and use the CPU's resources.\nThis way, the OS tells the CPU what code to run on each CPU core so that it reaches a good balance between high throughput (running many instructions) and fair access to CPU cores."),(0,n.yg)("p",null,"It is cumbersome for a user-level application to interact directly with the CPU.\nThe developer would have to write hardware-specific code, which is not scalable and is difficult to maintain.\nIn addition, doing so would leave it up to the developer to isolate their application from the others that are present on the system.\nThis leaves applications vulnerable to countless bugs and exploits."),(0,n.yg)("p",null,"To guard apps from these pitfalls, the OS comes and mediates interactions between regular programs and the CPU by providing a set of ",(0,n.yg)("strong",{parentName:"p"},"abstractions"),".\nThese abstractions offer a safe, uniform and also isolated way to leverage the CPU's resources, i.e. its cores.\nThere are 2 main abstractions: ",(0,n.yg)("strong",{parentName:"p"},"processes")," and ",(0,n.yg)("strong",{parentName:"p"},"threads"),"."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Interaction between applications, OS and CPU",src:t(7032).A})),(0,n.yg)("p",null,"As we can see from the image above, an application can spawn one or more processes.\nEach of these is handled and maintained by the OS.\nSimilarly, each process can spawn however many threads, which are also managed by the OS.\nThe OS decides when and on what CPU core to make each thread run.\nThis is in line with the general interaction between an application and the hardware: it is always mediated by the OS."),(0,n.yg)("h2",{id:"processes"},"Processes"),(0,n.yg)("p",null,"A process is simply a running program.\nLet's take the ",(0,n.yg)("inlineCode",{parentName:"p"},"ls")," command as a trivial example.\n",(0,n.yg)("inlineCode",{parentName:"p"},"ls")," is a ",(0,n.yg)("strong",{parentName:"p"},"program")," on your system.\nIt has a binary file which you can find and inspect with the help of the ",(0,n.yg)("inlineCode",{parentName:"p"},"which")," command:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ which ls\n/usr/bin/ls\n\nstudent@os:~$ file /usr/bin/ls\n/usr/bin/ls: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=6e3da6f0bc36b6398b8651bbc2e08831a21a90da, for GNU/Linux 3.2.0, stripped\n")),(0,n.yg)("p",null,"When you run it, the ",(0,n.yg)("inlineCode",{parentName:"p"},"ls")," binary stored ",(0,n.yg)("strong",{parentName:"p"},"on the disk")," at ",(0,n.yg)("inlineCode",{parentName:"p"},"/usr/bin/ls")," is read by another application called the ",(0,n.yg)("strong",{parentName:"p"},"loader"),".\nThe loader spawns a ",(0,n.yg)("strong",{parentName:"p"},"process")," by copying some of the contents ",(0,n.yg)("inlineCode",{parentName:"p"},"/usr/bin/ls")," in memory (such as the ",(0,n.yg)("inlineCode",{parentName:"p"},".text"),", ",(0,n.yg)("inlineCode",{parentName:"p"},".rodata")," and ",(0,n.yg)("inlineCode",{parentName:"p"},".data")," sections).\nUsing ",(0,n.yg)("inlineCode",{parentName:"p"},"strace"),", we can see the ",(0,n.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/execve.2.html"},(0,n.yg)("inlineCode",{parentName:"a"},"execve"))," system call:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ strace -s 100 ls -a  # -s 100 limits strings to 100 bytes instead of the default 32\nexecve("/usr/bin/ls", ["ls", "-a"], 0x7fffa7e0d008 /* 61 vars */) = 0\n[...]\nwrite(1, ".  ..  content\\tCONTRIBUTING.md  COPYING.md  .git  .gitignore  README.md  REVIEWING.md\\n", 86.  ..  content CONTRIBUTING.md  COPYING.md  .git  .gitignore  README.md  REVIEWING.md\n) = 86\nclose(1)                                = 0\nclose(2)                                = 0\nexit_group(0)                           = ?\n+++ exited with 0 +++\n')),(0,n.yg)("p",null,"Look at its parameters:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"the path to the ",(0,n.yg)("strong",{parentName:"li"},"program"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"/usr/bin/ls")),(0,n.yg)("li",{parentName:"ul"},"the list of arguments: ",(0,n.yg)("inlineCode",{parentName:"li"},'"ls", "-a"')),(0,n.yg)("li",{parentName:"ul"},"the environment variables: the rest of the syscall's arguments")),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"execve")," invokes the loader to load the VAS of the ",(0,n.yg)("inlineCode",{parentName:"p"},"ls")," process ",(0,n.yg)("strong",{parentName:"p"},"by replacing that of the existing process"),".\nAll subsequent syscalls are performed by the newly spawned ",(0,n.yg)("inlineCode",{parentName:"p"},"ls")," process.\nWe will get into more details regarding ",(0,n.yg)("inlineCode",{parentName:"p"},"execve")," ",(0,n.yg)("a",{parentName:"p",href:"/operating-systems/Compute/lab6#guide-system-dissected"},"towards the end of this lab"),"."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"Loading of `ls` Process",src:t(8905).A})),(0,n.yg)("h3",{id:"fork"},"Fork"),(0,n.yg)("p",null,"Up to now we've been creating processes using various high-level APIs, such as ",(0,n.yg)("inlineCode",{parentName:"p"},"Popen()"),", ",(0,n.yg)("inlineCode",{parentName:"p"},"Process()")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"system()"),".\nYes, despite being a C function, as you've seen from its man page, ",(0,n.yg)("inlineCode",{parentName:"p"},"system()")," itself calls 2 other functions: ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," to create a process and ",(0,n.yg)("inlineCode",{parentName:"p"},"execve()")," to execute the given command.\nAs you already know from the ",(0,n.yg)("a",{parentName:"p",href:"lab2.md#libraries-and-libc"},"Software Stack")," chapter, library functions may call one or more underlying system calls or other functions.\nNow we will move one step lower on the call stack and call ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," ourselves."),(0,n.yg)("p",null,(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," creates one child process that is ",(0,n.yg)("em",{parentName:"p"},"almost")," identical to its parent.\nWe say that ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," returns ",(0,n.yg)("strong",{parentName:"p"},"twice"),": once in the parent process and once more in the child process.\nThis means that after ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," returns, assuming no error has occurred, both the child and the parent resume execution from the same place: the instruction following the call to ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()"),".\nWhat's different between the two processes is the value returned by ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"child process"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"fork()")," returns 0"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"parent process"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"fork()")," returns the PID of the child process (> 0)"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("strong",{parentName:"li"},"on error"),": ",(0,n.yg)("inlineCode",{parentName:"li"},"fork()")," returns -1, only once, in the initial process")),(0,n.yg)("p",null,"Therefore, the typical code for handling a ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," is available in ",(0,n.yg)("inlineCode",{parentName:"p"},"create-process/support/fork.c"),".\nTake a look at it and then run it.\nNotice what each of the two processes prints:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"the PID of the child is also known by the parent"),(0,n.yg)("li",{parentName:"ul"},"the PPID of the child is the PID of the parent")),(0,n.yg)("p",null,"Unlike ",(0,n.yg)("inlineCode",{parentName:"p"},"system()"),", who also waits for its child, when using ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," we must do the waiting ourselves.\nIn order to wait for a process to end, we use the ",(0,n.yg)("a",{parentName:"p",href:"https://linux.die.net/man/2/waitpid"},(0,n.yg)("inlineCode",{parentName:"a"},"waitpid()"))," syscall.\nIt places the exit code of the child process in the ",(0,n.yg)("inlineCode",{parentName:"p"},"status")," parameter.\nThis argument is actually a bit-field containing more information than merely the exit code.\nTo retrieve the exit code, we use the ",(0,n.yg)("inlineCode",{parentName:"p"},"WEXITSTATUS")," macro.\nKeep in mind that ",(0,n.yg)("inlineCode",{parentName:"p"},"WEXITSTATUS")," only makes sense if ",(0,n.yg)("inlineCode",{parentName:"p"},"WIFEXITED")," is true, i.e. if the child process finished on its own and wasn't killed by another one or by an illegal action (such as a segfault or illegal instruction) for example.\nOtherwise, ",(0,n.yg)("inlineCode",{parentName:"p"},"WEXITSTATUS")," will return something meaningless.\nYou can view the rest of the information stored in the ",(0,n.yg)("inlineCode",{parentName:"p"},"status")," bit-field ",(0,n.yg)("a",{parentName:"p",href:"https://linux.die.net/man/2/waitpid"},"in the man page"),"."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Moral of the story"),": Usually the execution flow is:"),(0,n.yg)("ol",null,(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"fork()"),", followed by")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"wait()")," (called by the parent)")),(0,n.yg)("li",{parentName:"ol"},(0,n.yg)("p",{parentName:"li"},(0,n.yg)("inlineCode",{parentName:"p"},"exit()"),", called by the child."))),(0,n.yg)("p",null,"The order of last 2 steps may be swapped."),(0,n.yg)("h2",{id:"threads"},"Threads"),(0,n.yg)("h3",{id:"threads-vs-processes"},"Threads vs Processes"),(0,n.yg)("p",null,"So why use the implementation that spawns more processes if it's slower than the one using threads?\nThe table below lists the differences between threads and processes.\nGenerally, if we only want to do some computing, we use threads.\nIf we need to drastically change the behaviour of the program, we need a new program altogether, or we need more than computing (e.g. communication on the network to create a computing cluster), we use processes."),(0,n.yg)("table",null,(0,n.yg)("thead",{parentName:"table"},(0,n.yg)("tr",{parentName:"thead"},(0,n.yg)("th",{parentName:"tr",align:"left"},"PROCESS"),(0,n.yg)("th",{parentName:"tr",align:"left"},"THREAD"))),(0,n.yg)("tbody",{parentName:"table"},(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"independent"),(0,n.yg)("td",{parentName:"tr",align:"left"},"part of a process")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"collection of threads"),(0,n.yg)("td",{parentName:"tr",align:"left"},"shares VAS with other threads")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"slower creation (new page table must be created)"),(0,n.yg)("td",{parentName:"tr",align:"left"},"faster creation")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"longer context switch duration (TLB must be flushed)"),(0,n.yg)("td",{parentName:"tr",align:"left"},"shorter context switch duration (part of the same process, so same TLB)")),(0,n.yg)("tr",{parentName:"tbody"},(0,n.yg)("td",{parentName:"tr",align:"left"},"ending means ending all threads"),(0,n.yg)("td",{parentName:"tr",align:"left"},"other threads continue when finished")))),(0,n.yg)("h4",{id:"safety"},"Safety"),(0,n.yg)("p",null,"Compile and run the two programs in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/drills/tasks/sum-array-bugs/support/seg-fault/"),", first with 2 processes and threads and then with 4.\nThey do the same thing as before: compute the sum of the elements in an array, but with a twist: each of them contains a bug causing a segfault.\nNotice that ",(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_threads"),' doesn\'t print anything with 4 threads, but merely a "Segmentation fault" message.\nOn the other hand, ',(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_processes")," prints a sum and a running time, albeit different from the sums we've seen so far."),(0,n.yg)("p",null,"The reason is that signals such as ",(0,n.yg)("inlineCode",{parentName:"p"},"SIGSEGV"),", which is used when a segmentation fault happens affect the entire process that handles them.\nTherefore, when we split our workload between several threads and one of them causes an error such as a segfault, that error is going to terminate the entire process.\nThe same thing happens when we use processes instead of threads: one process causes an error, which gets it killed, but the other processes continue their work unhindered.\nThis is why we end up with a lower sum in the end: because one process died too early and didn't manage to write the partial sum it had computed to the ",(0,n.yg)("inlineCode",{parentName:"p"},"results")," array."),(0,n.yg)("h3",{id:"memory-layout-of-multithreaded-programs"},"Memory Layout of Multithreaded Programs"),(0,n.yg)("p",null,"When a new thread is created, a new stack is allocated for a thread.\nThe default stack size if ",(0,n.yg)("inlineCode",{parentName:"p"},"8 MB")," / ",(0,n.yg)("inlineCode",{parentName:"p"},"8192 KB"),":"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ ulimit -s\n8192\n")),(0,n.yg)("p",null,"Enter the ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/drills/tasks/multithreaded/support/")," directory to observe the update of the memory layout when creating new threads."),(0,n.yg)("p",null,"Build the ",(0,n.yg)("inlineCode",{parentName:"p"},"multithreaded")," executable:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../multithreaded/support$ make\n")),(0,n.yg)("p",null,"Start the program:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../multithreaded/support$ ./multithreaded\nPress key to start creating threads ...\n[...]\n")),(0,n.yg)("p",null,"And investigate it with ",(0,n.yg)("inlineCode",{parentName:"p"},"pmap")," on another console, while pressing a key to create new threads."),(0,n.yg)("p",null,"As you can see, there is a new ",(0,n.yg)("inlineCode",{parentName:"p"},"8192 KB")," area created for every thread, also increasing the total virtual size."),(0,n.yg)("iframe",{id:"d5ed068d-6dba-4458-b9ee-4b366e701430",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="c4496728-b2a9-4b46-b25d-778ed0b68f6b"> <p>Is data used by a thread inaccessible from other threads?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="fe7612d5-a285-4d0e-8be5-6b06bc4d63f0"> <label class="form-check-label" for="fe7612d5-a285-4d0e-8be5-6b06bc4d63f0"> <p>Only the heap and the read-only zones are shared</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f180a8ee-f7ee-4322-a855-d1d93c8dc164"> <label class="form-check-label" for="f180a8ee-f7ee-4322-a855-d1d93c8dc164"> <p>Only the heap is shared</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="b28f701d-22fc-4fcf-a057-b26716288d13"> <label class="form-check-label" for="b28f701d-22fc-4fcf-a057-b26716288d13"> <p>Yes, each thread has its own stack</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="95e0858f-b198-45c4-abb5-52e416e3fe6f"> <label class="form-check-label" for="95e0858f-b198-45c4-abb5-52e416e3fe6f"> <p>No, each thread can access every address from the virtual address space</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'95e0858f-b198-45c4-abb5-52e416e3fe6f\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>Each thread has the same perspective on the system memory - it thinks it owns it all.\nTherefore, it can perform pointer arithmetic to access every memory address.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("d5ed068d-6dba-4458-b9ee-4b366e701430");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("h2",{id:"guide-baby-steps---python"},"Guide: Baby steps - Python"),(0,n.yg)("p",null,"Run the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes/guides/create-process/support/popen.py"),".\nIt simply spawns a new process running the ",(0,n.yg)("inlineCode",{parentName:"p"},"ls")," command using ",(0,n.yg)("a",{parentName:"p",href:"https://docs.python.org/3/library/subprocess.html#subprocess.Popen"},(0,n.yg)("inlineCode",{parentName:"a"},"subprocess.Popen()")),".\nDo not worry about the huge list of arguments that ",(0,n.yg)("inlineCode",{parentName:"p"},"Popen()")," takes.\nThey are used for ",(0,n.yg)("strong",{parentName:"p"},"inter-process-communication"),".\nYou'll learn more about this in the ","[Application Interaction chapter]","."),(0,n.yg)("p",null,"Note that this usage of ",(0,n.yg)("inlineCode",{parentName:"p"},"Popen()")," is not entirely correct.\nYou'll discover why later, but for now focus on simply understanding how to use ",(0,n.yg)("inlineCode",{parentName:"p"},"Popen()")," on its own."),(0,n.yg)("p",null,"Now change the command to anything you want.\nAlso give it some arguments.\nFrom the outside, it's as if you were running these commands from the terminal."),(0,n.yg)("h2",{id:"guide-sum-array-processes"},"Guide: Sum Array Processes"),(0,n.yg)("h3",{id:"sum-of-the-elements-in-an-array"},"Sum of the Elements in an Array"),(0,n.yg)("p",null,"Let's assume we only have one process on our system, and that process knows how to add the numbers in an array.\nIt can use however many resources it wants, since there is no other process to contest it.\nIt would probably look like the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/processes/guides/sum-array-processes/support/c/sum_array_sequential.c"),".\nThe program also measures the time spent computing the sum.\nLet's compile and run it:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../sum-array/support/c$ ./sum_array_sequential\nArray sum is: 49945994146\nTime spent: 127 ms\n")),(0,n.yg)("p",null,"You will most likely get a different sum (because the array is made up of random numbers) and a different time than the ones shown above.\nThis is perfectly fine.\nUse these examples qualitatively, not quantitatively."),(0,n.yg)("h3",{id:"spreading-the-work-among-other-processes"},"Spreading the Work Among Other Processes"),(0,n.yg)("p",null,"Due to how it's implemented so far, our program only uses one of our CPU's cores.\nWe never tell it to distribute its workload to other cores.\nThis is wasteful as the rest of our cores remain unused:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ lscpu | grep ^CPU\\(s\\):\nCPU(s):                          8\n")),(0,n.yg)("p",null,"We have 7 more cores waiting to add numbers in our array."),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"What if we used 100% of the CPU?",src:t(7846).A,width:"541",height:"500"})),(0,n.yg)("p",null,"What if we use 7 more processes and spread the task of adding the numbers in this array between them?\nIf we split the array into several equal parts and designate a separate process to calculate the sum of each part, we should get a speedup because now the work performed by each individual process is reduced."),(0,n.yg)("p",null,"Let's take it methodically.\nCompile and run ",(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_processes.c")," using 1, 2, 4 and 8 processes respectively.\nIf your system only has 4 cores (",(0,n.yg)("a",{parentName:"p",href:"https://www.intel.com/content/www/us/en/gaming/resources/hyper-threading.html"},"hyperthreading")," included), limit your runs to 4 processes.\nNote the running times for each number of processes.\nWe expect the speedups compared to our reference run to be 1, 2, 4 and 8 respectively, right?"),(0,n.yg)("iframe",{id:"e05f5884-bb2a-406f-a993-ccbee19df307",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="e454b2a2-855b-4ed9-8883-d262983ff9f1"> <p>Why is the speedup from running the program in <code>support/sum-array/d/sum_array_processes.d</code> with 1, 2, 4 and 8 processes less than expected?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f13c9868-fd6a-4066-b386-5747d92a64ef"> <label class="form-check-label" for="f13c9868-fd6a-4066-b386-5747d92a64ef"> <p>Because the algorithm is incorrect</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="8f4b6d1e-7a5c-40e4-859b-6ceda41e551d"> <label class="form-check-label" for="8f4b6d1e-7a5c-40e4-859b-6ceda41e551d"> <p>Because the array is split into unequal parts</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="5a693ad8-b5ee-4836-959a-3dabc811f6a5"> <label class="form-check-label" for="5a693ad8-b5ee-4836-959a-3dabc811f6a5"> <p>Because the operating systems runs all processes sequentially on the same core</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="c912977f-d491-4438-8b6e-f5b87667065c"> <label class="form-check-label" for="c912977f-d491-4438-8b6e-f5b87667065c"> <p>Because of the overhead introduced by the creation of the additional processes</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'c912977f-d491-4438-8b6e-f5b87667065c\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>Creating a new process involves an inherent overhead.\nThe OS calls the loader, launches the new process, then the parent process waits for it to finish, extracts its return value etc.\nAll this work together with creating the initial process has to be done by a single thread.\nIn addition, in real-world apps, other actions such as receiving data from the network or reading a file are inherently <strong>sequential</strong>.\nTherefore there will always be parts of any given program that cannot be run in parallel.\nAs a result, the speedup can never be equal to the number of processes between which we spread the workload.</p><p>It is possible to compute the speedup obtained from parallelising a portion of a given program.\nThe formula is rather simple and is called <a href="https://en.wikipedia.org/wiki/Amdahl%27s_law">Amdahl\'s law</a></p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("e05f5884-bb2a-406f-a993-ccbee19df307");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"You most likely did get some speedup, especially when using 8 processes.\nNow we will try to improve this speedup by using ",(0,n.yg)("strong",{parentName:"p"},"threads")," instead."),(0,n.yg)("p",null,"Also notice that we're not using hundreds or thousands of processes.\nAssuming our system has 8 cores, only 8 ",(0,n.yg)("em",{parentName:"p"},"threads")," can run at the same time.\nIn general, ",(0,n.yg)("strong",{parentName:"p"},"the maximum number of threads that can run at the same time is equal to the number of cores"),".\nIn our example, each process only has one thread: its main thread.\nSo by consequence and by forcing the terminology (because it's the main thread of these processes that is running, not the processes themselves), we can only run in parallel a number of processes equal to at most the number of cores."),(0,n.yg)("h2",{id:"guide-system-dissected"},"Guide: ",(0,n.yg)("inlineCode",{parentName:"h2"},"system")," Dissected"),(0,n.yg)("p",null,"You already know that ",(0,n.yg)("inlineCode",{parentName:"p"},"system")," calls ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"execve()")," to create the new process.\nLet's see how and why.\nFirst, we run the following command to trace the ",(0,n.yg)("inlineCode",{parentName:"p"},"execve()")," syscalls used by ",(0,n.yg)("inlineCode",{parentName:"p"},"sleepy_creator"),".\nWe'll leave ",(0,n.yg)("inlineCode",{parentName:"p"},"fork()")," for later."),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../sleepy/support$ strace -e execve -ff -o syscalls ./sleepy_creator\n")),(0,n.yg)("p",null,"At this point, you will get two files whose names start with ",(0,n.yg)("inlineCode",{parentName:"p"},"syscalls"),", followed by some numbers.\nThose numbers are the PIDs of the parent and the child process.\nTherefore, the file with the higher number contains logs of the ",(0,n.yg)("inlineCode",{parentName:"p"},"execve")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"clone")," syscalls issued by the parent process, while\nthe other logs those two syscalls when made by the child process.\nLet's take a look at them.\nThe numbers below will differ from those on your system:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../sleepy/support:$ cat syscalls.2523393  # syscalls from parent process\nexecve("sleepy_creator", ["sleepy_creator"], 0x7ffd2c157758 /* 39 vars */) = 0\n--- SIGCHLD {si_signo=SIGCHLD, si_code=CLD_EXITED, si_pid=2523394, si_uid=1052093, si_status=0, si_utime=0, si_stime=0} ---\n+++ exited with 0 +++\n\nstudent@os:~/.../sleepy/support:$ cat syscalls.2523394  # syscalls from child process\nexecve("/bin/sh", ["sh", "-c", "sleep 10"], 0x7ffd36253be8 /* 39 vars */) = 0\nexecve("/usr/bin/sleep", ["sleep", "10"], 0x560f41659d40 /* 38 vars */) = 0\n+++ exited with 0 +++\n')),(0,n.yg)("iframe",{id:"7fd4f1cc-8b99-4d5b-a986-bcf8e9d32986",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="48a49e48-9ec2-4146-9417-526d63e9a83d"> <p>Which process calls <code>execve("sleepy_creator", ["sleepy_creator"], ...)</code>, that you found in the log of the parent process?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="5ef78a5d-93f6-4d4e-acd9-c23790f176d8"> <label class="form-check-label" for="5ef78a5d-93f6-4d4e-acd9-c23790f176d8"> <p>The kernel because that\'s where the loader is located</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="e0335d81-4ca3-4e11-a789-f51ca9049b29"> <label class="form-check-label" for="e0335d81-4ca3-4e11-a789-f51ca9049b29"> <p>The loader because it is the loader who creates new processes</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="1b558a73-8a9e-41ba-bdf1-337e828d2acb"> <label class="form-check-label" for="1b558a73-8a9e-41ba-bdf1-337e828d2acb"> <p><code>bash</code> because we run <code>sleepy_creator</code> from terminal, i.e. from <code>bash</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="abcbe3c1-ba7b-4a1a-9082-a7291a065843"> <label class="form-check-label" for="abcbe3c1-ba7b-4a1a-9082-a7291a065843"> <p>The C runtime because this is the C interpreter</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'1b558a73-8a9e-41ba-bdf1-337e828d2acb\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>All processes spawned from the command-line are children of the current <code>bash</code> process.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("7fd4f1cc-8b99-4d5b-a986-bcf8e9d32986");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,n.yg)("p",null,"Now notice that the child process doesn't simply call ",(0,n.yg)("inlineCode",{parentName:"p"},'execve("/usr/bin/sleep" ...)'),".\nIt first changes its virtual address space (VAS) to that of a ",(0,n.yg)("inlineCode",{parentName:"p"},"bash")," process (",(0,n.yg)("inlineCode",{parentName:"p"},'execve("/bin/sh" ...)'),") and then that ",(0,n.yg)("inlineCode",{parentName:"p"},"bash")," process switches its VAS to ",(0,n.yg)("inlineCode",{parentName:"p"},"sleep"),".\nTherefore, calling ",(0,n.yg)("inlineCode",{parentName:"p"},"system(<some_command>)")," is equivalent to running ",(0,n.yg)("inlineCode",{parentName:"p"},"<some_command>")," in the command-line."),(0,n.yg)("p",null,(0,n.yg)("strong",{parentName:"p"},"Moral of the story"),": When spawning a new command, the call order is:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"parent: ",(0,n.yg)("inlineCode",{parentName:"li"},"fork()"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"exec()"),", ",(0,n.yg)("inlineCode",{parentName:"li"},"wait()")),(0,n.yg)("li",{parentName:"ul"},"child: ",(0,n.yg)("inlineCode",{parentName:"li"},"exit()"))),(0,n.yg)("h2",{id:"guide-sum-array-threads"},"Guide: Sum array Threads"),(0,n.yg)("h3",{id:"spreading-the-work-among-other-threads"},"Spreading the Work Among Other Threads"),(0,n.yg)("p",null,"Compile the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/guides/sum-array-threads/support/c/sum_array_threads.c")," and run it using 1, 2, 4 and 8 threads as you did before.\nEach thread runs the ",(0,n.yg)("inlineCode",{parentName:"p"},"calculate_array_part_sum()")," function and then finishes.\nRunning times should be ",(0,n.yg)("em",{parentName:"p"},"slightly")," smaller than the implementation using processes.\nThis slight time difference is caused by process creation actions, which are costlier than thread creation actions.\nBecause a process needs a separate virtual address space (VAS) and needs to duplicate some internal structures such as the file descriptor table and page table, it takes the operating system more time to create it than to create a thread.\nOn the other hand, threads belonging to the same process share the same VAS and, implicitly, the same OS-internal structures.\nTherefore, they are more lightweight than processes."),(0,n.yg)("h3",{id:"stdparallelism-in-d"},(0,n.yg)("inlineCode",{parentName:"h3"},"std.parallelism")," in D"),(0,n.yg)("p",null,"D language's standard library exposes the ",(0,n.yg)("a",{parentName:"p",href:"https://dlang.org/phobos/std_parallelism.html"},(0,n.yg)("inlineCode",{parentName:"a"},"std.parallelism")),", which provides a series of parallel processing functions.\nOne such function is ",(0,n.yg)("inlineCode",{parentName:"p"},"reduce()"),", which splits an array between a given number of threads and applies a given operation to these chunks.\nIn our case, the operation simply adds the elements to an accumulator: ",(0,n.yg)("inlineCode",{parentName:"p"},"a + b"),".\nFollow and run the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/guides/sum-array-threads/support/d/sum_array_threads_reduce.d"),"."),(0,n.yg)("p",null,"The number of threads is used within a ",(0,n.yg)("a",{parentName:"p",href:"https://dlang.org/phobos/std_parallelism.html#.TaskPool"},(0,n.yg)("inlineCode",{parentName:"a"},"TaskPool")),".\nThis structure is a thread manager (not scheduler).\nIt silently creates the number of threads we request and then ",(0,n.yg)("inlineCode",{parentName:"p"},"reduce()")," spreads its workload between these threads."),(0,n.yg)("p",null,"Now that you've seen how parallelism works in D, go in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/guides/sum-array-threads/support/java/SumArrayThreads.java")," and follow the TODOs.\nThe code is similar to the one written in D, and it uses ",(0,n.yg)("inlineCode",{parentName:"p"},"ThreadPoolExecutor"),".\nMore about that ",(0,n.yg)("a",{parentName:"p",href:"https://www.baeldung.com/thread-pool-java-and-guava"},"here"),".\nTo run the code use:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-java"},"javac SumArrayThreads.java\njava SumArrayThreads 4\n")),(0,n.yg)("p",null,"4 is the number of threads used, but you can replace the value with a number less or equal than your available cores."),(0,n.yg)("h3",{id:"openmp-for-c"},"OpenMP for C"),(0,n.yg)("p",null,"Unlike D, C does not support parallel computation by design.\nIt needs a library to do advanced things, like ",(0,n.yg)("inlineCode",{parentName:"p"},"reduce()")," from D.\nWe have chosen to use the OpenMP library for this.\nFollow the code in ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/guides/sum-array-threads/support/c/sum_array_threads_openmp.c"),"."),(0,n.yg)("p",null,"The ",(0,n.yg)("inlineCode",{parentName:"p"},"#pragma")," used in the code instructs the compiler to enable the ",(0,n.yg)("inlineCode",{parentName:"p"},"omp")," module, and to parallelise the code.\nIn this case, we instruct the compiler to perform a reduce of the array, using the ",(0,n.yg)("inlineCode",{parentName:"p"},"+")," operator, and to store the results in the ",(0,n.yg)("inlineCode",{parentName:"p"},"result")," variable.\nThis reduction uses threads to calculate the sum, similar to ",(0,n.yg)("inlineCode",{parentName:"p"},"summ_array_threads.c"),", but in a much more optimised form."),(0,n.yg)("p",null,"One of the advantages of OpenMP is that is relatively easy to use.\nThe syntax requires only a few additional lines of code and compiler options, thus converting sequential code into parallel code quickly.\nFor example, using ",(0,n.yg)("inlineCode",{parentName:"p"},"#pragma omp parallel for"),", a developer can parallelize a ",(0,n.yg)("inlineCode",{parentName:"p"},"for loop"),", enabling iterations to run across multiple threads."),(0,n.yg)("p",null,"OpenMP uses a ",(0,n.yg)("inlineCode",{parentName:"p"},"shared-memory model"),", meaning all threads can access a common memory space.\nThis model is particularly useful for tasks that require frequent access to shared data, as it avoids the overhead of transferring data between threads.\nHowever, shared memory can also introduce challenges, such as race conditions or synchronization issues, which can occur when multiple threads attempt to modify the same data simultaneously, but we'll talk about that later.\nOpenMP offers constructs such as critical sections, atomic operations, and reductions to help manage these issues and ensure that parallel code executes safely and correctly."),(0,n.yg)("p",null,"Now compile and run the ",(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_threads_openmp")," binary using 1, 2, 4, and 8 threads as before.\nYou'll see lower running times than ",(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_threads")," due to the highly-optimised code emitted by the compiler.\nFor this reason and because library functions are usually much better tested than your own code, it is always preferred to use a library function for a given task."),(0,n.yg)("p",null,"For a challenge, enter ",(0,n.yg)("inlineCode",{parentName:"p"},"chapters/compute/threads/guides/sum-array-threads/support/c/add_array_threads_openmp.c"),".\nUse what you've learned from the previous exercise and add the value 100 to an array using OpenMP."),(0,n.yg)("h2",{id:"guide-threads-and-processes-clone"},"Guide: Threads and Processes: ",(0,n.yg)("inlineCode",{parentName:"h2"},"clone")),(0,n.yg)("p",null,"Let's go back to our initial demos that used threads and processes.\nWe'll see that in order to create both threads and processes, the underlying Linux syscall is ",(0,n.yg)("inlineCode",{parentName:"p"},"clone"),".\nFor this, we'll run both ",(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_threads")," and ",(0,n.yg)("inlineCode",{parentName:"p"},"sum_array_processes")," under ",(0,n.yg)("inlineCode",{parentName:"p"},"strace"),".\nAs we've already established, we're only interested in the ",(0,n.yg)("inlineCode",{parentName:"p"},"clone")," syscall:"),(0,n.yg)("pre",null,(0,n.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../sum-array/support/c$ strace -e clone,clone3 ./sum_array_threads 2\nclone(child_stack=0x7f60b56482b0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[1819693], tls=0x7f60b5649640, child_tidptr=0x7f60b5649910) = 1819693\nclone(child_stack=0x7f60b4e472b0, flags=CLONE_VM|CLONE_FS|CLONE_FILES|CLONE_SIGHAND|CLONE_THREAD|CLONE_SYSVSEM|CLONE_SETTLS|CLONE_PARENT_SETTID|CLONE_CHILD_CLEARTID, parent_tid=[1819694], tls=0x7f60b4e48640, child_tidptr=0x7f60b4e48910) = 1819694\n\nstudent@os:~/.../sum-array/support/c$ strace -e clone,clone3 ./sum_array_processes 2\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f7a4e346650) = 1820599\nclone(child_stack=NULL, flags=CLONE_CHILD_CLEARTID|CLONE_CHILD_SETTID|SIGCHLD, child_tidptr=0x7f7a4e346650) = 1820600\n")),(0,n.yg)("p",null,"We ran each program with an argument of 2, so we have 2 calls to ",(0,n.yg)("inlineCode",{parentName:"p"},"clone"),".\nNotice that in the case of threads, the ",(0,n.yg)("inlineCode",{parentName:"p"},"clone3")," syscall receives more arguments.\nThe relevant flags passed as arguments when creating threads are documented in ",(0,n.yg)("a",{parentName:"p",href:"https://man.archlinux.org/man/clone3.2.en"},(0,n.yg)("inlineCode",{parentName:"a"},"clone"),"'s man page"),":"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"CLONE_VM"),": the child and the parent process share the same VAS"),(0,n.yg)("li",{parentName:"ul"},(0,n.yg)("inlineCode",{parentName:"li"},"CLONE_{FS,FILES,SIGHAND}"),": the new thread shares the filesystem information, file and signal handlers with the one that created it.\nThe syscall also receives valid pointers to the new thread's stack and TLS, i.e. the only parts of the VAS that are distinct between threads (although they are technically accessible from all threads).")),(0,n.yg)("p",null,"By contrast, when creating a new process, the arguments of the ",(0,n.yg)("inlineCode",{parentName:"p"},"clone")," syscall are simpler (i.e. fewer flags are present).\nRemember that in both cases ",(0,n.yg)("inlineCode",{parentName:"p"},"clone")," creates a new ",(0,n.yg)("strong",{parentName:"p"},"thread"),".\nWhen creating a process, ",(0,n.yg)("inlineCode",{parentName:"p"},"clone")," creates this new thread within a new separate address space."))}h.isMDXComponent=!0},5680:(e,a,t)=>{t.d(a,{xA:()=>d,yg:()=>u});var s=t(6540);function n(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),t.push.apply(t,s)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach(function(a){n(e,a,t[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})}return e}function o(e,a){if(null==e)return{};var t,s,n=function(e,a){if(null==e)return{};var t,s,n={},r=Object.keys(e);for(s=0;s<r.length;s++)t=r[s],a.indexOf(t)>=0||(n[t]=e[t]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)t=r[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=s.createContext({}),c=function(e){var a=s.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=c(e.components);return s.createElement(l.Provider,{value:a},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},m=s.forwardRef(function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(t),m=n,u=p["".concat(l,".").concat(m)]||p[m]||h[m]||r;return t?s.createElement(u,i(i({ref:a},d),{},{components:t})):s.createElement(u,i({ref:a},d))});function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,i=new Array(r);i[0]=m;var o={};for(var l in a)hasOwnProperty.call(a,l)&&(o[l]=a[l]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<r;c++)i[c]=t[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}m.displayName="MDXCreateElement"},7032:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/app-os-cpu-interaction-ca7fbdbb7da380e0992c95467ef267ce.svg"},7846:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/100-percent-cpu-1138186529f154d864f643179e25cea1.jpeg"},8905:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/loading-of-ls-process-0dec67c0d0a826710e06f980224d5eb4.svg"}}]);