"use strict";(globalThis.webpackChunkso=globalThis.webpackChunkso||[]).push([[895],{278:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>r,toc:()=>c});var s=t(8168),l=(t(6540),t(5680));const n={},i="Lab 1 - Operating System Perspective",r={unversionedId:"Software Stack/lab1",id:"Software Stack/lab1",title:"Lab 1 - Operating System Perspective",description:"The contents of the lab are located in the lab archive and in the GitHub repository.",source:"@site/docs/Software Stack/lab1.md",sourceDirName:"Software Stack",slug:"/Software Stack/lab1",permalink:"/operating-systems/Software Stack/lab1",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"strcpy() System Call",permalink:"/operating-systems/Software Stack/Questions/strcpy-syscall"},next:{title:"Lab 2 - Library Perspective",permalink:"/operating-systems/Software Stack/lab2"}},o={},c=[{value:"Task: System Calls",id:"task-system-calls",level:2},{value:"Task: System Call Wrappers",id:"task-system-call-wrappers",level:2},{value:"Task: Library Calls vs System Calls",id:"task-library-calls-vs-system-calls",level:2},{value:"Modern Software Stacks",id:"modern-software-stacks",level:2},{value:"Analyzing the Software Stack",id:"analyzing-the-software-stack",level:2},{value:"System Calls Explained",id:"system-calls-explained",level:3},{value:"Basic System Calls",id:"basic-system-calls",level:3},{value:"System Call Wrappers",id:"system-call-wrappers",level:2},{value:"Library calls vs System Calls",id:"library-calls-vs-system-calls",level:2}],d={toc:c},p="wrapper";function m({components:e,...a}){return(0,l.yg)(p,(0,s.A)({},d,a,{components:e,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"lab-1---operating-system-perspective"},"Lab 1 - Operating System Perspective"),(0,l.yg)("p",null,"The contents of the lab are located in the ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/cs-pub-ro/operating-systems/raw/refs/heads/lab-archives/Lab_1_Operating_System_Perspective.zip"},"lab archive")," and in the ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/cs-pub-ro/operating-systems"},"GitHub repository"),"."),(0,l.yg)("h2",{id:"task-system-calls"},"Task: System Calls"),(0,l.yg)("p",null,"Enter the ",(0,l.yg)("inlineCode",{parentName:"p"},"basic-syscall/")," directory of the extracted archive (or ",(0,l.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/basic-syscall/")," if you are working directly in the repository).\nRun ",(0,l.yg)("inlineCode",{parentName:"p"},"make")," and then enter ",(0,l.yg)("inlineCode",{parentName:"p"},"support/")," folder and go through the practice items below."),(0,l.yg)("p",null,"For debugging, use ",(0,l.yg)("inlineCode",{parentName:"p"},"strace")," to trace the system calls from your program and make sure the arguments are set right."),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"Update the ",(0,l.yg)("inlineCode",{parentName:"li"},"hello.asm")," and / or ",(0,l.yg)("inlineCode",{parentName:"li"},"hello.s")," files to print both ",(0,l.yg)("inlineCode",{parentName:"li"},"Hello, world!")," and ",(0,l.yg)("inlineCode",{parentName:"li"},"Bye, world!"),".\nThis means adding another ",(0,l.yg)("inlineCode",{parentName:"li"},"write()")," system call.")),(0,l.yg)("iframe",{id:"567e0961-5ad5-401f-9b70-a7aa85d9fe42",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="0c02badb-3ed8-4e85-818f-0e149bcf5e96"> <p>What register stores the system call ID on x86_64?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="2a45e0ae-cace-4fd1-a171-0ef71046180e"> <label class="form-check-label" for="2a45e0ae-cace-4fd1-a171-0ef71046180e"> <p><code>RSP</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="8f04f404-53e0-4166-9cb4-0f253bced50b"> <label class="form-check-label" for="8f04f404-53e0-4166-9cb4-0f253bced50b"> <p><code>RIP</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="e3a820dc-a328-418c-8993-93f8321beeb4"> <label class="form-check-label" for="e3a820dc-a328-418c-8993-93f8321beeb4"> <p><code>RDX</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="991839fd-2210-4713-8db1-efaabd7367ed"> <label class="form-check-label" for="991839fd-2210-4713-8db1-efaabd7367ed"> <p><code>RAX</code></p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'991839fd-2210-4713-8db1-efaabd7367ed\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p><code>RAX</code> is the register used for passing the syscall ID and the result code.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("567e0961-5ad5-401f-9b70-a7aa85d9fe42");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,l.yg)("iframe",{id:"eab6a1de-e6c1-4267-9a2f-8f7492ed6152",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="bfb891ba-b9c2-445c-8daa-89e002a328ea"> <p>What tool do we use to capture system calls?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="223ca150-a3de-4056-92ac-d0ef19603890"> <label class="form-check-label" for="223ca150-a3de-4056-92ac-d0ef19603890"> <p><code>gcc</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="73bee8df-9d12-4511-8db4-92b7a438bffa"> <label class="form-check-label" for="73bee8df-9d12-4511-8db4-92b7a438bffa"> <p><code>strace</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="308ad590-7a9a-42bf-9b6a-b1013cc2ce8c"> <label class="form-check-label" for="308ad590-7a9a-42bf-9b6a-b1013cc2ce8c"> <p><code>./exec</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="912cfef0-f86e-4edb-8e79-631cbde9371d"> <label class="form-check-label" for="912cfef0-f86e-4edb-8e79-631cbde9371d"> <p><code>make</code></p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'73bee8df-9d12-4511-8db4-92b7a438bffa\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p><code>strace</code> is used to trace system calls invoked by a running program.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("eab6a1de-e6c1-4267-9a2f-8f7492ed6152");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,l.yg)("iframe",{id:"6eff3508-328d-4e39-bae0-a8fa415a01c1",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="352a21e3-7ab2-4c4e-83e9-7a7a699df680"> <p>What is the approximate number of system call numbers in Linux?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="5d73b4eb-9dd8-41ec-9016-b084db1b6f56"> <label class="form-check-label" for="5d73b4eb-9dd8-41ec-9016-b084db1b6f56"> <p>3000</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="a53a16ad-f994-4779-b41b-1e58cfe3746e"> <label class="form-check-label" for="a53a16ad-f994-4779-b41b-1e58cfe3746e"> <p>3</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="723ddf4d-8e78-4ec8-a11d-61337385a501"> <label class="form-check-label" for="723ddf4d-8e78-4ec8-a11d-61337385a501"> <p>300</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="155a8e05-6fa2-4be1-bbeb-69eb7573c877"> <label class="form-check-label" for="155a8e05-6fa2-4be1-bbeb-69eb7573c877"> <p>30</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'723ddf4d-8e78-4ec8-a11d-61337385a501\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>As show <a href="https://x64.syscall.sh/">here</a>, they\'re about 300 system calls in Linux.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("6eff3508-328d-4e39-bae0-a8fa415a01c1");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Update the ",(0,l.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,l.yg)("inlineCode",{parentName:"p"},"hello.s")," files to sleep before the ",(0,l.yg)("inlineCode",{parentName:"p"},"exit")," system call."),(0,l.yg)("p",{parentName:"li"},"You need to make the ",(0,l.yg)("inlineCode",{parentName:"p"},"sys_nanosleep()")," system call, with the ",(0,l.yg)("inlineCode",{parentName:"p"},"timespec")," structure.\nFind its ID ",(0,l.yg)("a",{parentName:"p",href:"https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/"},"here"),".")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Update the ",(0,l.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,l.yg)("inlineCode",{parentName:"p"},"hello.s")," files to read a message from standard input and print it to standard output."),(0,l.yg)("p",{parentName:"li"},"You'll need to define a buffer in the ",(0,l.yg)("inlineCode",{parentName:"p"},"data")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"bss")," section.\nUse the ",(0,l.yg)("inlineCode",{parentName:"p"},"read")," system call to read data in the buffer.\nThe return value of ",(0,l.yg)("inlineCode",{parentName:"p"},"read")," (placed in the ",(0,l.yg)("inlineCode",{parentName:"p"},"rax")," register) is the number of bytes read.\nUse that value as the 3rd argument or ",(0,l.yg)("inlineCode",{parentName:"p"},"write"),", i.e. the number of bytes printed."),(0,l.yg)("p",{parentName:"li"},"Find the ID of the ",(0,l.yg)("inlineCode",{parentName:"p"},"read")," system call ",(0,l.yg)("a",{parentName:"p",href:"https://x64.syscall.sh/"},"here"),".\nTo find out more about its arguments, see ",(0,l.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/read.2.html"},"its man page"),".\nStandard input descriptor is ",(0,l.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("strong",{parentName:"p"},"Difficult"),": Port the initial program to ARM on 64 bits (also called ",(0,l.yg)("strong",{parentName:"p"},"aarch64"),")."),(0,l.yg)("p",{parentName:"li"},"Use the skeleton files in the ",(0,l.yg)("inlineCode",{parentName:"p"},"arm/")," folder.\nFind information about the ",(0,l.yg)("inlineCode",{parentName:"p"},"aarch64")," system calls ",(0,l.yg)("a",{parentName:"p",href:"https://arm64.syscall.sh/"},"here"),".")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Create your own program, written in assembly, doing some system calls you want to learn more about.\nSome system calls you could try: ",(0,l.yg)("inlineCode",{parentName:"p"},"open()"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"rename()"),", ",(0,l.yg)("inlineCode",{parentName:"p"},"mkdir()"),".\nCreate a Makefile for that program.\nRun the resulting program with ",(0,l.yg)("inlineCode",{parentName:"p"},"strace")," to see the actual system calls being made (and their arguments)."))),(0,l.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,l.yg)("a",{parentName:"p",href:"/operating-systems/Software%20Stack/lab1#analyzing-the-software-stack"},"this")," reading material."),(0,l.yg)("h2",{id:"task-system-call-wrappers"},"Task: System Call Wrappers"),(0,l.yg)("p",null,"Enter the ",(0,l.yg)("inlineCode",{parentName:"p"},"syscall-wrapper/")," directory from the extracted archive (or ",(0,l.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/syscall-wrapper/drills/tasks/support/")," if you are working directly in the repository) and run ",(0,l.yg)("inlineCode",{parentName:"p"},"make"),", then go through the practice items below."),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Update the files in the ",(0,l.yg)("inlineCode",{parentName:"p"},"support/")," folder to make ",(0,l.yg)("inlineCode",{parentName:"p"},"read")," system call available as a wrapper.\nMake a call to the ",(0,l.yg)("inlineCode",{parentName:"p"},"read")," system call to read data from standard input in a buffer.\nThen call ",(0,l.yg)("inlineCode",{parentName:"p"},"write()")," to print data from that buffer."),(0,l.yg)("p",{parentName:"li"},"Note that the ",(0,l.yg)("inlineCode",{parentName:"p"},"read")," system call returns the number of bytes ",(0,l.yg)("inlineCode",{parentName:"p"},"read"),".\nUse that as the argument to the subsequent ",(0,l.yg)("inlineCode",{parentName:"p"},"write")," call that prints read data."),(0,l.yg)("p",{parentName:"li"},"We can see that it's easier to have wrapper calls and write most of the code in C than in assembly language."))),(0,l.yg)("iframe",{id:"5f2a70d9-494f-40c9-b740-35bfb6a03090",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="c9b5ae1e-a697-4bf5-b041-e7ac096e92dc"> <p>What language do we use to invoke system calls?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="42246f24-70c5-4913-8f95-bac555b912c0"> <label class="form-check-label" for="42246f24-70c5-4913-8f95-bac555b912c0"> <p>C++</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="a674fbc2-7f6d-4211-bb7d-a31fe1ddcfa7"> <label class="form-check-label" for="a674fbc2-7f6d-4211-bb7d-a31fe1ddcfa7"> <p>assembly</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="71362558-e760-4847-bb69-f37440be24c2"> <label class="form-check-label" for="71362558-e760-4847-bb69-f37440be24c2"> <p>C</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="a02a68b3-a4b1-45c6-8695-66f193a91861"> <label class="form-check-label" for="a02a68b3-a4b1-45c6-8695-66f193a91861"> <p>Go</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'a674fbc2-7f6d-4211-bb7d-a31fe1ddcfa7\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>System calls require setting of registers that can only be done in assembly language.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("5f2a70d9-494f-40c9-b740-35bfb6a03090");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Update the files in the ",(0,l.yg)("inlineCode",{parentName:"p"},"support/")," folder to make the ",(0,l.yg)("inlineCode",{parentName:"p"},"getpid")," system call available as a wrapper.\nCreate a function with the signature ",(0,l.yg)("inlineCode",{parentName:"p"},"unsigned int itoa(int n, char *a)")," that converts an integer to a string.\nIt returns the number of digits in the string.\nFor example, it will convert the number ",(0,l.yg)("inlineCode",{parentName:"p"},"1234")," to the string ",(0,l.yg)("inlineCode",{parentName:"p"},'"1234"')," string (",(0,l.yg)("inlineCode",{parentName:"p"},"NULL"),"-terminated, 5 bytes long);\nthe return value is ",(0,l.yg)("inlineCode",{parentName:"p"},"4")," (the number of digits of the ",(0,l.yg)("inlineCode",{parentName:"p"},'"1234"')," string)."),(0,l.yg)("p",{parentName:"li"},"Then make the call to ",(0,l.yg)("inlineCode",{parentName:"p"},"getpid"),";\nit gets no arguments and returns an integer (the PID - *process ID- of the current process)."))),(0,l.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,l.yg)("a",{parentName:"p",href:"/operating-systems/Software%20Stack/lab1#system-call-wrappers"},"this")," reading material."),(0,l.yg)("h2",{id:"task-library-calls-vs-system-calls"},"Task: Library Calls vs System Calls"),(0,l.yg)("p",null,"Enter the ",(0,l.yg)("inlineCode",{parentName:"p"},"libcall-syscall/support/")," directory from the extracted archive (or ",(0,l.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/libcall-syscall/support/")," if you are working directly in the repository) and go through the practice items below."),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},"Check library calls and system calls for the ",(0,l.yg)("inlineCode",{parentName:"p"},"call2.c")," file.\nUse ",(0,l.yg)("inlineCode",{parentName:"p"},"ltrace")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"strace"),"."),(0,l.yg)("p",{parentName:"li"},"Find explanations for the calls being made and the library call to system call mapping."))),(0,l.yg)("iframe",{id:"003588e9-e290-4657-aaca-15316c1a246a",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="f26a11fd-aeef-48aa-90cf-7192a3fa1692"> <p>Which of the following library calls will for sure invoke a system call?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="4b9645aa-7573-496e-9083-77842a49a955"> <label class="form-check-label" for="4b9645aa-7573-496e-9083-77842a49a955"> <p><code>fwrite()</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="bbda5315-3438-46f5-86a8-a975380b2e9b"> <label class="form-check-label" for="bbda5315-3438-46f5-86a8-a975380b2e9b"> <p><code>strcpy()</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="d93e46d1-b5fa-49aa-b8d7-0d8941f7e4f6"> <label class="form-check-label" for="d93e46d1-b5fa-49aa-b8d7-0d8941f7e4f6"> <p><code>printf()</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="0d8b8232-002a-4c95-8f19-e5255307074a"> <label class="form-check-label" for="0d8b8232-002a-4c95-8f19-e5255307074a"> <p><code>fopen()</code></p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'0d8b8232-002a-4c95-8f19-e5255307074a\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p><code>fopen()</code> requires opening a file and access to the operating system (for filesystem access).\nThe others may not require a system call (<code>strcpy()</code>) or may use buffering to delay the invocation of a system call (<code>fwrite()</code>, <code>printf()</code>).</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("003588e9-e290-4657-aaca-15316c1a246a");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,l.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,l.yg)("a",{parentName:"p",href:"/operating-systems/Software%20Stack/lab1#library-calls-vs-system-calls"},"this")," reading material."),(0,l.yg)("h2",{id:"modern-software-stacks"},"Modern Software Stacks"),(0,l.yg)("p",null,"Most modern computing systems use a software stack such as the one in the figure below:"),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"Modern Software Stack",src:t(6119).A})),(0,l.yg)("p",null,"This modern software stack allows fast development and provides a rich set of applications to the user."),(0,l.yg)("p",null,"The basic software component is the ",(0,l.yg)("strong",{parentName:"p"},"operating system*- (OS) (technically the operating system "),"kernel",(0,l.yg)("strong",{parentName:"p"},").\nThe OS provides the fundamental primitives to interact with hardware (read and write data) and to manage the running of applications (such as memory allocation, thread creation, scheduling).\nThese primitives form the "),"system call API*- or ",(0,l.yg)("strong",{parentName:"p"},"system API"),".\nAn item in the system call API, i.e. the equivalent of a function call that triggers the execution of a functionality in the operating system, is a ",(0,l.yg)("strong",{parentName:"p"},"system call"),"."),(0,l.yg)("p",null,"The system call API is well-defined, stable and complete: it exposes the entire functionality of the operating system and hardware.\nHowever, it is also minimalistic with respect to features, and it provides a low-level (close to hardware) specification, making it cumbersome to use and ",(0,l.yg)("strong",{parentName:"p"},"not portable"),"."),(0,l.yg)("p",null,"Due to the downsides of the system call API, a basic library, the ",(0,l.yg)("strong",{parentName:"p"},"standard C library*- (also called "),"libc",(0,l.yg)("strong",{parentName:"p"},"), is built on top of it.\nBecause the system call API uses an OS-specific calling convention, the standard C library typically wraps each system call into an equivalent function call, following a portable calling convention.\nMore than these wrappers, the standard C library provides its own API that is typically portable.\nPart of the API exposed by the standard C library is the "),"standard C API",(0,l.yg)("strong",{parentName:"p"},", also called "),"ANSI C*- or ",(0,l.yg)("strong",{parentName:"p"},"ISO C"),";\nthis API is typically portable across all platforms (operating systems and hardware).\nThis API, going beyond system call wrappers, has several advantages:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"portability: irrespective of the underlying operating system (and system call API), the API is the same"),(0,l.yg)("li",{parentName:"ul"},"extensive features: string management, I/O formatting"),(0,l.yg)("li",{parentName:"ul"},"possibility of increased efficiency with techniques such as buffering, as we show later")),(0,l.yg)("h2",{id:"analyzing-the-software-stack"},"Analyzing the Software Stack"),(0,l.yg)("p",null,"To get a better grasp on how the software stack works, let's do a bottom-up approach:\nwe build and run different programs, that start off by using the system call API (the lowest layer in the software stack) and progressively use higher layers."),(0,l.yg)("h3",{id:"system-calls-explained"},"System Calls Explained"),(0,l.yg)("p",null,"A system call, or syscall for short, is a method used by applications to communicate with the operating system's kernel."),(0,l.yg)("p",null,"The need for syscalls is tied to the modern operating systems model of conceptually separating into kernel space and user space."),(0,l.yg)("p",null,"The kernel space manages the hardware resources such as CPU, I/O devices, disk or memory.\nMoreover, the kernel also provides an interface for the user space applications to interact with the hardware."),(0,l.yg)("p",null,"The user space is where you are running your applications and processes.\nFrom the user space, we cannot directly access the hardware or perform privileged operations.\nYou need to use syscalls to perform privileged operations such as accessing the hardware."),(0,l.yg)("p",null,"Below, you can see some examples of system calls and what resource they request from the kernel:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"brk()")," is used to allocate memory"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"open()")," is used to access the file system and open a specific file"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"write()")," is used to access the file system and modify the contents of a specific file")),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"System Call API Explained",src:t(5310).A})),(0,l.yg)("h3",{id:"basic-system-calls"},"Basic System Calls"),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"basic-syscall/support/")," folder stores the implementation of a simple program in assembly language for the x86_64 (64 bit) architecture.\nThe program invokes two system calls: ",(0,l.yg)("inlineCode",{parentName:"p"},"write")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"exit"),".\nThe program is duplicated in two files using the two x86 assembly language syntaxes: the Intel / NASM syntax (",(0,l.yg)("inlineCode",{parentName:"p"},"hello.asm"),") and the AT&T / GAS syntax (",(0,l.yg)("inlineCode",{parentName:"p"},"hello.s"),")."),(0,l.yg)("p",null,"The implementation follows the ",(0,l.yg)("a",{parentName:"p",href:"https://x64.syscall.sh/"},"x86_64 Linux calling convention"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"system call ID is passed in the ",(0,l.yg)("inlineCode",{parentName:"li"},"rax")," register"),(0,l.yg)("li",{parentName:"ul"},"system call arguments are passed, in order, in the ",(0,l.yg)("inlineCode",{parentName:"li"},"rdi"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"rsi"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"rdx"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"r10"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"r8"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"r9")," registers")),(0,l.yg)("p",null,"Let's build and run the two programs:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../basic-syscall/support$ ls\nhello.asm  hello.s  Makefile\n\nstudent@os:~/.../basic-syscall/support$ make\nnasm -f elf64 -o hello-nasm.o hello.asm\ncc -nostdlib -no-pie -Wl,--entry=main -Wl,--build-id=none  hello-nasm.o   -o hello-nasm\ngcc -c -o hello-gas.o hello.s\ncc -nostdlib -no-pie -Wl,--entry=main -Wl,--build-id=none  hello-gas.o   -o hello-gas\n\nstudent@os:~/.../basic-syscall/support$ ls\nhello.asm  hello-gas  hello-gas.o  hello-nasm  hello-nasm.o  hello.s  Makefile\n\nstudent@os:~/.../basic-syscall/support$ ./hello-nasm\nHello, world!\nstudent@os:~/.../basic-syscall/support$ ./hello-gas\nHello, world!\n")),(0,l.yg)("p",null,"The two programs end up printing the ",(0,l.yg)("inlineCode",{parentName:"p"},"Hello, world!")," message at standard output by issuing the ",(0,l.yg)("inlineCode",{parentName:"p"},"write")," system call.\nThen they complete their work by issuing the ",(0,l.yg)("inlineCode",{parentName:"p"},"exit")," system call."),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"write")," system call writes a buffer to the file referred by the first argument, which is the file descriptor.\nFile descriptors are going to be studied in-depth in future chapters.\nFor now, it is enough for you to know that they are integers that behave like file handlers.\nThe 3 most common file descriptors are:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"0")," references the standard input (",(0,l.yg)("inlineCode",{parentName:"p"},"stdin"),")")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"1")," references the standard output (",(0,l.yg)("inlineCode",{parentName:"p"},"stdout"),")")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("inlineCode",{parentName:"p"},"2")," references the standard error (",(0,l.yg)("inlineCode",{parentName:"p"},"stderr"),")"))),(0,l.yg)("p",null,"Use ",(0,l.yg)("inlineCode",{parentName:"p"},"man 2 write")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"man 3 exit")," to get a detailed understanding of the syntax and use of the two system calls.\nYou can also check the online man pages: ",(0,l.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/write.2.html"},(0,l.yg)("inlineCode",{parentName:"a"},"write")),", ",(0,l.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/exit.3.html"},(0,l.yg)("inlineCode",{parentName:"a"},"exit"))),(0,l.yg)("p",null,"We use ",(0,l.yg)("inlineCode",{parentName:"p"},"strace")," to inspect system calls issued by a program:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../basic-syscall/support$ strace ./hello-nasm\nexecve("./hello-nasm", ["./hello-nasm"], 0x7ffc4e175f00 /- 63 vars */) = 0\nwrite(1, "Hello, world!\\n", 14Hello, world!\n)         = 14\nexit(0)                                 = ?\n+++ exited with 0 +++\n')),(0,l.yg)("p",null,"There are three system calls captured by ",(0,l.yg)("inlineCode",{parentName:"p"},"strace"),":"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"execve()"),": this is issued by the shell to create the new process;\nyou'll find out more about ",(0,l.yg)("inlineCode",{parentName:"li"},"execve"),' in the "Compute" chapter'),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"write()"),": called by the program to print ",(0,l.yg)("inlineCode",{parentName:"li"},"Hello, world!")," to standard output"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"exit()"),": to exit the program")),(0,l.yg)("p",null,"This is the most basic program for doing system calls.\nGiven that system calls require a specific calling convention, their invocation can only be done in assembly language.\nObviously, this is not portable (specific to a given CPU architecture, x86_64 in our case) and too verbose and difficult to maintain.\nFor portability and maintainability, we require a higher level language, such as C.\nIn order to use C, we need function wrappers around system calls."),(0,l.yg)("h2",{id:"system-call-wrappers"},"System Call Wrappers"),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"syscall-wrapper/support/")," folder stores the implementation of a simple program written in C (",(0,l.yg)("inlineCode",{parentName:"p"},"main.c"),") that calls the ",(0,l.yg)("inlineCode",{parentName:"p"},"write()")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"exit()")," functions.\nThe functions are defined in ",(0,l.yg)("inlineCode",{parentName:"p"},"syscall.asm")," as wrappers around corresponding system calls.\nEach function invokes the corresponding system call using the specific system call ID and the arguments provided for the function call."),(0,l.yg)("p",null,"The implementation of the two wrapper functions in ",(0,l.yg)("inlineCode",{parentName:"p"},"syscall.asm")," is very simple, as the function arguments are passed in the same registers required by the system call.\nThis is because of the overlap of the first three registers for the ",(0,l.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/X86_calling_conventions#System_V_AMD64_ABI"},"x86_64 Linux function calling convention")," and the ",(0,l.yg)("a",{parentName:"p",href:"https://x64.syscall.sh/"},"x86_64 Linux system call convention"),"."),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"syscall.h")," contains the declaration of the two functions and is included in ",(0,l.yg)("inlineCode",{parentName:"p"},"main.c"),".\nThis way, C programs can be written that make function calls that end up making system calls."),(0,l.yg)("p",null,"Let's build, run and trace system calls for the program:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../syscall-wrapper/support$ ls\nmain.c  Makefile  syscall.h  syscall.s\n\nstudent@os:~/.../syscall-wrapper/support$ make\ngcc -c -o main.o main.c\nnasm -f elf64 -o syscall.o syscall.s\ncc -nostdlib -no-pie -Wl,--entry=main -Wl,--build-id=none  main.o syscall.o   -o main\n\nstudent@os:~/.../syscall-wrapper/support$ ls\nmain  main.c  main.o  Makefile  syscall.h  syscall.o  syscall.s\n\nstudent@os:~/.../software-stack/lab/syscall-wrapper$ ./main\nHello, world!\n\nstudent@os:~/.../syscall-wrapper/support$ strace ./main\nexecve("./main", ["./main"], 0x7ffee60fb590 /- 63 vars */) = 0\nwrite(1, "Hello, world!\\n", 14Hello, world!\n)         = 14\nexit(0)                                 = ?\n+++ exited with 0 +++\n')),(0,l.yg)("p",null,"The trace is similar to the previous example, showing the ",(0,l.yg)("inlineCode",{parentName:"p"},"write()")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"exit()")," system calls."),(0,l.yg)("p",null,"By creating system call wrappers as C functions, we are now relieved of the burden of writing assembly language code.\nOf course, there has to be an initial implementation of wrapper functions written in assembly language;\nbut, after that, we can use C only."),(0,l.yg)("h2",{id:"library-calls-vs-system-calls"},"Library calls vs System Calls"),(0,l.yg)("p",null,"The standard C library has primarily two uses:"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},"wrapping system calls into easier to use C-style library calls, such as ",(0,l.yg)("inlineCode",{parentName:"li"},"open()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"write()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"read()")),(0,l.yg)("li",{parentName:"ol"},"adding common functionality required for our program, such as string management (",(0,l.yg)("inlineCode",{parentName:"li"},"strcpy"),"), memory management (",(0,l.yg)("inlineCode",{parentName:"li"},"malloc()"),") or formatted I/O (",(0,l.yg)("inlineCode",{parentName:"li"},"printf()"),")")),(0,l.yg)("p",null,"The first use means a 1-to-1 mapping between library calls and system calls: one library call means one system call.\nThe second group doesn't have a standard mapping.\nA library call could be mapped to no system calls, one system call, two or more system calls, or it may depend (a system call may or may not happen)."),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"libcall-syscall/support")," folder stores the implementation of a simple program that makes different library calls.\nLet's build the program and then trace the library calls (with ",(0,l.yg)("inlineCode",{parentName:"p"},"ltrace"),") and the system calls (with ",(0,l.yg)("inlineCode",{parentName:"p"},"strace"),"):"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../libcall-syscall/support$ make\ncc -Wall   -c -o call.o call.c\ncc   call.o   -o call\ncc -Wall   -c -o call2.o call2.c\ncc   call2.o   -o call2\n\nstudent@os:~/.../libcall-syscall/support$ ltrace ./call\nfopen("a.txt", "wt")                                                                                             = 0x556d57679260\nstrlen("Hello, world!\\n")                                                                                        = 14\nfwrite("Hello, world!\\n", 1, 14, 0x556d57679260)                                                                 = 14\nstrlen("Bye, world!\\n")                                                                                          = 12\nfwrite("Bye, world!\\n", 1, 12, 0x556d57679260)                                                                   = 12\nfflush(0x556d57679260)                                                                                           = 0\n+++ exited (status 0) +++\n\nstudent@os:~/.../libcall-syscall/support$ strace ./call\n[...]\nopenat(AT_FDCWD, "a.txt", O_WRONLY|O_CREAT|O_TRUNC, 0666) = 3\nfstat(3, {st_mode=S_IFREG|0664, st_size=0, ...}) = 0\nwrite(3, "Hello, world!\\nBye, world!\\n", 26) = 26\nexit_group(0)                           = ?\n+++ exited with 0 +++\n')),(0,l.yg)("p",null,"We have the following mappings:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"The ",(0,l.yg)("inlineCode",{parentName:"li"},"fopen()")," library call invokes the ",(0,l.yg)("inlineCode",{parentName:"li"},"openat")," and the ",(0,l.yg)("inlineCode",{parentName:"li"},"fstat")," system calls."),(0,l.yg)("li",{parentName:"ul"},"The ",(0,l.yg)("inlineCode",{parentName:"li"},"fwrite()")," library call invokes no system calls."),(0,l.yg)("li",{parentName:"ul"},"The ",(0,l.yg)("inlineCode",{parentName:"li"},"strlen()")," library call invokes no system calls."),(0,l.yg)("li",{parentName:"ul"},"The ",(0,l.yg)("inlineCode",{parentName:"li"},"fflush()")," library call invokes the ",(0,l.yg)("inlineCode",{parentName:"li"},"write")," system call.")),(0,l.yg)("p",null,"This all seems to make sense.\nThe main reason for ",(0,l.yg)("inlineCode",{parentName:"p"},"fwrite()")," not making any system calls is the use of a standard C library buffer.\nCalls the ",(0,l.yg)("inlineCode",{parentName:"p"},"fwrite()")," end up writing to that buffer to reduce the number of system calls.\nActual system calls are made either when the standard C library buffer is full or when an ",(0,l.yg)("inlineCode",{parentName:"p"},"fflush()")," library call is made."),(0,l.yg)("p",null,"Note that on some systems, ",(0,l.yg)("inlineCode",{parentName:"p"},"ltrace")," ",(0,l.yg)("strong",{parentName:"p"},"does not work*- as expected, due to "),"now binding",(0,l.yg)("strong",{parentName:"p"},".\nTo avoid this behaviour, you can force the "),"lazy binding",(0,l.yg)("em",{parentName:"p"},"- (based on which ",(0,l.yg)("inlineCode",{parentName:"em"},"ltrace")," is constructed to work).\nAn example can be found in ",(0,l.yg)("inlineCode",{parentName:"em"},"libcall-syscall/support/Makefile"),", however for system binaries, such as ",(0,l.yg)("inlineCode",{parentName:"em"},"ls")," or ",(0,l.yg)("inlineCode",{parentName:"em"},"pwd"),', the only alternative is to add the `-x "'),'"` argument to force the command to trace all symbols in the symbol table:'),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ ltrace -x "*" ls\n')),(0,l.yg)("p",null,"You can always choose what library functions ",(0,l.yg)("inlineCode",{parentName:"p"},"ltrace")," is investigating, by replacing the wildcard with their name:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ ltrace -x "malloc" -x "free" ls\nmalloc@libc.so.6(5)                                                    = 0x55c42b2b8910\nfree@libc.so.6(0x55c42b2b8910)                                         = <void>\nmalloc@libc.so.6(120)                                                  = 0x55c42b2b8480\nmalloc@libc.so.6(12)                                                   = 0x55c42b2b8910\nmalloc@libc.so.6(776)                                                  = 0x55c42b2b8930\nmalloc@libc.so.6(112)                                                  = 0x55c42b2b8c40\nmalloc@libc.so.6(1336)                                                 = 0x55c42b2b8cc0\nmalloc@libc.so.6(216)                                                  = 0x55c42b2b9200\nmalloc@libc.so.6(432)                                                  = 0x55c42b2b92e0\nmalloc@libc.so.6(104)                                                  = 0x55c42b2b94a0\nmalloc@libc.so.6(88)                                                   = 0x55c42b2b9510\nmalloc@libc.so.6(120)                                                  = 0x55c42b2b9570\n[...]\n')),(0,l.yg)("p",null,"If you would like to know more about ",(0,l.yg)("strong",{parentName:"p"},"lazy binding"),", ",(0,l.yg)("strong",{parentName:"p"},"now binding*- or "),"PLT*- entries, check out ",(0,l.yg)("a",{parentName:"p",href:"https://maskray.me/blog/2021-09-19-all-about-procedure-linkage-table"},"this blog post"),"."))}m.isMDXComponent=!0},5310:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/syscall-explained-ff8f5182d632fa4fcf77ffd5f5fe958c.svg"},5680:(e,a,t)=>{t.d(a,{xA:()=>d,yg:()=>y});var s=t(6540);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function n(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);a&&(s=s.filter(function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable})),t.push.apply(t,s)}return t}function i(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?n(Object(t),!0).forEach(function(a){l(e,a,t[a])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach(function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))})}return e}function r(e,a){if(null==e)return{};var t,s,l=function(e,a){if(null==e)return{};var t,s,l={},n=Object.keys(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)t=n[s],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=s.createContext({}),c=function(e){var a=s.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):i(i({},a),e)),t},d=function(e){var a=c(e.components);return s.createElement(o.Provider,{value:a},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var a=e.children;return s.createElement(s.Fragment,{},a)}},h=s.forwardRef(function(e,a){var t=e.components,l=e.mdxType,n=e.originalType,o=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),p=c(t),h=l,y=p["".concat(o,".").concat(h)]||p[h]||m[h]||n;return t?s.createElement(y,i(i({ref:a},d),{},{components:t})):s.createElement(y,i({ref:a},d))});function y(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var n=t.length,i=new Array(n);i[0]=h;var r={};for(var o in a)hasOwnProperty.call(a,o)&&(r[o]=a[o]);r.originalType=e,r[p]="string"==typeof e?e:l,i[1]=r;for(var c=2;c<n;c++)i[c]=t[c];return s.createElement.apply(null,i)}return s.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6119:(e,a,t)=>{t.d(a,{A:()=>s});const s=t.p+"assets/images/modern-sw-stack-4a2427d07a59c3a6599305b8eedc43dd.svg"}}]);