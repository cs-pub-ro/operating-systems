"use strict";(globalThis.webpackChunkso=globalThis.webpackChunkso||[]).push([[6612],{1696:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dfeet_execute-0e80376026099d72795e2e52e08d754b.png"},2960:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/strace_xeyes-f055c379e7028e39de13f0d039171718.gif"},3311:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/nested_virt_vbox-4c9c494a233277658f851662ca2dc082.png"},4354:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/os_cloud_networking-c27fac0c5e0a3100a184bf283728b467.svg"},4671:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dfeet_execute-e3d7472f8f70d73deabbaa7d217c10bb.gif"},5602:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dfeet_session_bus-1772a989fbb5f4e3c0f5d0569771e54b.png"},5680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>h});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var r=a.createContext({}),c=function(e){var t=a.useContext(r),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(r.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef(function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,r=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,h=d["".concat(r,".").concat(u)]||d[u]||m[u]||s;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))});function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,o=new Array(s);o[0]=u;var l={};for(var r in t)hasOwnProperty.call(t,r)&&(l[r]=t[r]);l.originalType=e,l[d]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6602:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/containers-vs-vms-75f454982e671d86b4d127b6bed5db07.svg"},7663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(8168),i=(n(6540),n(5680));const s={},o="Lab 12 - Application Interaction",l={unversionedId:"Application Interaction/lab12",id:"Application Interaction/lab12",title:"Lab 12 - Application Interaction",description:"Task: Time server",source:"@site/docs/Application Interaction/lab12.md",sourceDirName:"Application Interaction",slug:"/Application Interaction/lab12",permalink:"/operating-systems/Application Interaction/lab12",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Cgroups Versus namespaces",permalink:"/operating-systems/Application Interaction/Questions/cgroups-vs-namespaces"},next:{title:"Assignments",permalink:"/operating-systems/Assignments/"}},r={},c=[{value:"Task: Time server",id:"task-time-server",level:2},{value:"Task: Password cracker",id:"task-password-cracker",level:2},{value:"Task: D-Bus - Battery level",id:"task-d-bus---battery-level",level:2},{value:"The X Window System",id:"the-x-window-system",level:2},{value:"X Client and Server on the Same Machine",id:"x-client-and-server-on-the-same-machine",level:3},{value:"Oneko",id:"oneko",level:3},{value:"Time Server",id:"time-server",level:2},{value:"Python Version",id:"python-version",level:3},{value:"Password Cracker",id:"password-cracker",level:2},{value:"Multiprocess Version",id:"multiprocess-version",level:3},{value:"Multithreaded Version",id:"multithreaded-version",level:3},{value:"Multiprocess Version in Python (1)",id:"multiprocess-version-in-python-1",level:3},{value:"Multiprocess Version in Python (2)",id:"multiprocess-version-in-python-2",level:3},{value:"Multithreaded Version in Python",id:"multithreaded-version-in-python",level:3},{value:"Guide: Containers vs VMs",id:"guide-containers-vs-vms",level:2},{value:"Containers",id:"containers",level:3},{value:"OS Cloud",id:"os-cloud",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Initial Liftoff",id:"initial-liftoff",level:3},{value:"Virtual Machine Creation",id:"virtual-machine-creation",level:3},{value:"Disk Creation",id:"disk-creation",level:3},{value:"OS-Cloud: More Disk Customization",id:"os-cloud-more-disk-customization",level:3},{value:"Copy Additional Files to the Newly Created Disk",id:"copy-additional-files-to-the-newly-created-disk",level:4},{value:"SSH Key Setup",id:"ssh-key-setup",level:4},{value:"OS-Cloud: Internet Access",id:"os-cloud-internet-access",level:3},{value:"Task: Create a New Disk by Hand",id:"task-create-a-new-disk-by-hand",level:3},{value:"Task: Implement <code>vm_stop</code>",id:"task-implement-vm_stop",level:3},{value:"More Implementation Details",id:"more-implementation-details",level:3},{value:"(Even) More Implementation Details",id:"even-more-implementation-details",level:3},{value:"D-Bus",id:"d-bus",level:2},{value:"Guide: D-Bus Inspection with D-Feet",id:"guide-d-bus-inspection-with-d-feet",level:2},{value:"Guide: Calling D-Bus Methods",id:"guide-calling-d-bus-methods",level:2},{value:"Guide: Inspecting the Low-level Communication",id:"guide-inspecting-the-low-level-communication",level:2},{value:"Guide: D-Bus usage in Python",id:"guide-d-bus-usage-in-python",level:2},{value:"Guide: Firefox",id:"guide-firefox",level:2}],p={toc:c},d="wrapper";function m({components:e,...t}){return(0,i.yg)(d,(0,a.A)({},p,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"lab-12---application-interaction"},"Lab 12 - Application Interaction"),(0,i.yg)("h2",{id:"task-time-server"},"Task: Time server"),(0,i.yg)("p",null,"Navigate to ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/time-server/drills/tasks/time-server/support"),".\nTry to figure out the protocol used by the server and the client.\nYou can do this by reading the source code, corroborated with information obtained at runtime."),(0,i.yg)("p",null,"Run the server again (the version in C), but instead of running the client, let's run ",(0,i.yg)("inlineCode",{parentName:"p"},"netcat")," and pipe the output to ",(0,i.yg)("inlineCode",{parentName:"p"},"hexdump"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"nc -d 127.0.0.1 2000 | hexdump -C\n")),(0,i.yg)("iframe",{id:"dfb370f9-f47d-409c-85ea-9803f97160e2",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="306822da-f512-42af-9d2a-a618d24a6a46"> <p>What format does the message exchanged between the server and the client have?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="e8dff468-b892-425f-b0d0-7cf11a603298"> <label class="form-check-label" for="e8dff468-b892-425f-b0d0-7cf11a603298"> <p>4 byte length (little endian) followed by 8 byte timestamp (little endian)</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="c8b29c9d-cb31-4aea-a757-2aa49fdb196f"> <label class="form-check-label" for="c8b29c9d-cb31-4aea-a757-2aa49fdb196f"> <p>4 byte length (big endian) followed by 8 byte timestamp (big endian)</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="af8fe156-707c-4ddd-a9c3-780417d18d6e"> <label class="form-check-label" for="af8fe156-707c-4ddd-a9c3-780417d18d6e"> <p>8 byte length (big endian) followed by 4 byte timestamp (big endian)</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="d8e61408-e939-4b12-89c2-2674d5741b32"> <label class="form-check-label" for="d8e61408-e939-4b12-89c2-2674d5741b32"> <p>8 byte length (little endian) followed by 4 byte timestamp (little endian)</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'c8b29c9d-cb31-4aea-a757-2aa49fdb196f\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>If we consider one output example:</p><pre><code class="language-console">00000000  00 00 00 08 00 00 00 00  63 1b a9 50              |........c..P|\n0000000c</code></pre><p>We can identify the 4 byte length in big endian (<code>00 00 00 08</code>), then the 8 byte timestamp (<code>00 00 00 00  63 1b a9 50</code>), also in big endian.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("dfb370f9-f47d-409c-85ea-9803f97160e2");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,i.yg)("iframe",{id:"e5bd24ae-75b3-4a21-8724-17a30786cacd",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="10369447-1116-476b-af0e-7c5c37ae9065"> <p>Is the protocol between the python server and the python client the same?\nCan we run the python server and connect to it via the C client?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="f36ac2e1-7985-49c5-b1ca-155105ac2c2b"> <label class="form-check-label" for="f36ac2e1-7985-49c5-b1ca-155105ac2c2b"> <p>Yes</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="52c07fed-3af1-4523-8546-603496011031"> <label class="form-check-label" for="52c07fed-3af1-4523-8546-603496011031"> <p>No, the protocols are different</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'f36ac2e1-7985-49c5-b1ca-155105ac2c2b\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>By doing the same investigation on the python server we discover that the protocol is the same.\nThis means that we can run the python server and the C client, or the C server and python client, and everything will work:</p><pre><code class="language-console">student@os:~/.../support/time-server/python$ python3 server.py</code></pre><pre><code class="language-console">student@os:~/.../support/time-server$ ./client 127.0.0.1 2000\nThe time is Thu Sep  1 11:48:03 2022</code></pre> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("e5bd24ae-75b3-4a21-8724-17a30786cacd");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/Application%20Interaction/lab12#time-server"},"this")," reading material."),(0,i.yg)("h2",{id:"task-password-cracker"},"Task: Password cracker"),(0,i.yg)("p",null,"Navigate to ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/password-cracker/drills/tasks/password-cracker/support"),".\nCreating 26 processes is not very realistic, since it's unlikely that a usual machine has that many cores."),(0,i.yg)("p",null,"Modify the program so that it only creates 4 workers.\nEach worker will receive 2 characters instead of one, defining an interval to search.\nFor example, the first worker will receive ",(0,i.yg)("inlineCode",{parentName:"p"},"a")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"f"),", meaning it will brute-force passwords starting with ",(0,i.yg)("inlineCode",{parentName:"p"},"a"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"b"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"c"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"d"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"e"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"f"),", the second ",(0,i.yg)("inlineCode",{parentName:"p"},"g")," - ",(0,i.yg)("inlineCode",{parentName:"p"},"l"),", and so on."),(0,i.yg)("p",null,"Check that the ",(0,i.yg)("inlineCode",{parentName:"p"},"worker()")," function is indeed called from different worker processes.\nOne simple way to do this is to print out the current process ID at the beginning of the function.\nTo get the current process ID, use the ",(0,i.yg)("inlineCode",{parentName:"p"},"getpid()")," function from the ",(0,i.yg)("inlineCode",{parentName:"p"},"os")," module."),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/Application%20Interaction/lab12#password-cracker"},"this")," reading material."),(0,i.yg)("h2",{id:"task-d-bus---battery-level"},"Task: D-Bus - Battery level"),(0,i.yg)("p",null,"Navigate to ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/dbus/drills/tasks/dbus/support"),".\nUse D-Bus to find out the computer's battery level.\nThere is the ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.UPower")," interface on the system bus that can provide this information."),(0,i.yg)("p",null,"The method you need to call is ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.DBus.Properties.Get")," from the ",(0,i.yg)("inlineCode",{parentName:"p"},"/org/freedesktop/UPower/devices/DisplayDevice")," object."),(0,i.yg)("p",null,"This method needs 2 arguments: an interface name and a property name."),(0,i.yg)("p",null,"Those should be ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.UPower.Device")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"Percentage")," respectively."),(0,i.yg)("p",null,"Then input all of the above into a ",(0,i.yg)("inlineCode",{parentName:"p"},"gdbus")," call, which, if everything is correct, should output the battery percentage level as a number between 0 and 100."),(0,i.yg)("p",null,"Note: if you are running on a desktop computer or inside a virtual machine, you will get the value ",(0,i.yg)("inlineCode",{parentName:"p"},"0.0"),", because those systems don't have a battery."),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/Application%20Interaction/lab12#d-bus"},"this")," reading material."),(0,i.yg)("h2",{id:"the-x-window-system"},"The X Window System"),(0,i.yg)("p",null,"Unix-like systems that support a Graphical User Interface usually do this through the X Window System.\nThis system is implemented with a client-server model: the X Server is the component that controls the screen, keyboard, mouse, and other parts related to the GUI, while the X clients are the applications that want to use the graphical interface (like, for example, an internet browser)."),(0,i.yg)("p",null,"The clients and the server communicate using a standardized protocol, and the system does not necessarily require the client and server to be on the same machine.\nAlthough not so common nowadays, the X client can run on a different machine than the server, with the communication happening over the network.\nBut in the more usual case, when both the client and the server are on the same machine, modern implementations of the X Window System use a faster communication channel, like a Unix socket."),(0,i.yg)("h3",{id:"x-client-and-server-on-the-same-machine"},"X Client and Server on the Same Machine"),(0,i.yg)("p",null,"Let's investigate the case when both the X client and X server run on the same machine.\nFirst we'll take a look at the Unix sockets that are in listening mode."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ sudo netstat -xnlp | grep X11\nunix  2      [ ACC ]     STREAM     LISTENING     29120    3472/Xorg            @/tmp/.X11-unix/X0\nunix  2      [ ACC ]     STREAM     LISTENING     29121    3472/Xorg            /tmp/.X11-unix/X0\n")),(0,i.yg)("p",null,"We observe the ",(0,i.yg)("inlineCode",{parentName:"p"},"Xorg")," process (the X server) listening on a Unix socket with the path ",(0,i.yg)("inlineCode",{parentName:"p"},"/tmp/.X11-unix/X0"),"."),(0,i.yg)("p",null,"Now let's run an X client (that is, a GUI application) and check that it will indeed connect to this Unix socket.\nA very simple example is the ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes")," application:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ strace -e trace=socket,connect xeyes\nsocket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC, 0) = 3\nconnect(3, {sa_family=AF_UNIX, sun_path=@"/tmp/.X11-unix/X0"}, 20) = 0\n')),(0,i.yg)("p",null,"As expected, the application creates a Unix socket, then connects to the path ",(0,i.yg)("inlineCode",{parentName:"p"},'@"/tmp/.X11-unix/X0"'),"."),(0,i.yg)("p",null,"Furthermore, let's confirm that there is actual communication taking place between ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes")," and the X server.\nWe'll run ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes")," again, and then we'll keep moving the mouse cursor around.\nWhen the mouse is moved, the following events are taking place:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"The X server captures the mouse movements (since the server is the one that controls the mouse)"),(0,i.yg)("li",{parentName:"ul"},'The X server will pass these "mouse moved" events to the clients (including xeyes)'),(0,i.yg)("li",{parentName:"ul"},"The client (xeyes) uses these events to update its window (changing the position of the pupils inside the eyes)")),(0,i.yg)("p",null,"So, if we run ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes")," under ",(0,i.yg)("inlineCode",{parentName:"p"},"strace"),", we expect to see some communication on the Unix socket that is created at the beginning:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"strace -e 'trace=!poll' -e trace='socket,connect,recvmsg' xeyes |& grep -v '\\-1 EAGAIN'\n")),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"strace-xeyes",src:n(2960).A,width:"1920",height:"1080"})),(0,i.yg)("h3",{id:"oneko"},"Oneko"),(0,i.yg)("p",null,"An alternative to ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes")," which allows us to observe Unix sockets is ",(0,i.yg)("inlineCode",{parentName:"p"},"oneko"),".\nGoing through the same steps, we see that the application also create a Unix socket, then connects to the path ",(0,i.yg)("inlineCode",{parentName:"p"},'@"/tmp/.X11-unix/X0"'),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ strace -e trace=socket,connect oneko\nsocket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC, 0) = 3\nconnect(3, {sa_family=AF_UNIX, sun_path=@"/tmp/.X11-unix/X1"}, 20) = 0\n--- SIGALRM {si_signo=SIGALRM, si_code=SI_KERNEL} ---\n')),(0,i.yg)("p",null,"When running ",(0,i.yg)("inlineCode",{parentName:"p"},"oneko"),", what differs from ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes")," is the ",(0,i.yg)("inlineCode",{parentName:"p"},"SIGALRM")," signal.\nThis means that ",(0,i.yg)("inlineCode",{parentName:"p"},"oneko")," uses a timer, which is periodically set, and then it expires only to be reset again.\nThe purpose of this timer is to slow down the cat."),(0,i.yg)("p",null,"Verifying the communication between the X server and ",(0,i.yg)("inlineCode",{parentName:"p"},"oneko")," is easy.\nWe see that the cat follows our mouse cursor, behaving similarly to ",(0,i.yg)("inlineCode",{parentName:"p"},"xeyes"),".\nAfter running ",(0,i.yg)("inlineCode",{parentName:"p"},"oneko")," under ",(0,i.yg)("inlineCode",{parentName:"p"},"strace"),", we see the communication uses the UNIX socket created at the beginning:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"strace -e 'trace=!poll' -e trace='socket,connect,recvmsg' oneko |& grep -v '\\-1 EAGAIN'\n")),(0,i.yg)("iframe",{id:"b1f62bdf-3908-47a5-8b49-dddc8dcc47df",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="34c633d0-9115-40e2-bf0a-72c27effb5e7"> <p>What is the purpose of the timer used in the Oneko\'s implementation</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="aea529ae-a799-4bdd-a86a-bf56c2b7dcf8"> <label class="form-check-label" for="aea529ae-a799-4bdd-a86a-bf56c2b7dcf8"> <p>Slow down the cat</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="7c3c7117-ac2f-4ee4-9edd-7c26204bfebd"> <label class="form-check-label" for="7c3c7117-ac2f-4ee4-9edd-7c26204bfebd"> <p>It server no purpose</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="5ee255c0-2f32-444b-8dd4-eaa7a987deaf"> <label class="form-check-label" for="5ee255c0-2f32-444b-8dd4-eaa7a987deaf"> <p>Speed up the cat</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'aea529ae-a799-4bdd-a86a-bf56c2b7dcf8\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>The purpose of the timer is to delay the cat. You can verify this by running</p><pre><code class="language-console">while true; do kill -14 $(pidof oneko)</code></pre><p>You\'ll notice the cat is much faster in following your mouse.</p><p>Try and find other ways to "hack" Oneko to make it move faster.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("b1f62bdf-3908-47a5-8b49-dddc8dcc47df");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,i.yg)("h2",{id:"time-server"},"Time Server"),(0,i.yg)("p",null,"Check out the code in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/time-server/support/server.c")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/time-server/support/client.c"),"."),(0,i.yg)("p",null,"This is a simple program consisting of a server and a client.\nThe server uses a tcp socket to wait for connections.\nOnce a client has connected, the server will send the current time to it.\nThe client will then print the received time to the console."),(0,i.yg)("p",null,"Let's build and run this example:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ make\nstudent@os:~/.../support$ ./server\n")),(0,i.yg)("p",null,"Then, in another terminal:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ ./client 127.0.0.1 2000\nThe time is Thu Sep  1 11:48:03 2022\n")),(0,i.yg)("h3",{id:"python-version"},"Python Version"),(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/time-server/support/python")," we have the equivalent python implementation for both the server and client:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/python$ python3 server.py\n")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/python$ python3 client.py 127.0.0.1 2000\nThe time is Thu Sep  1 11:58:01 2022\n")),(0,i.yg)("h2",{id:"password-cracker"},"Password Cracker"),(0,i.yg)("p",null,"In this example, we will solve the following problem: given the sha512 hash of a password, we want to obtain the password that generated the hash."),(0,i.yg)("p",null,"Since a hash function is not reversible, one way to solve this problem is by brute-force: generate all possible word combinations, compute the hash for each word, and compare it with our desired hash value.\nThis is not feasible for long passwords, so for our example we will consider only passwords containing lowercase letters and having the length of 4."),(0,i.yg)("p",null,"In order to speed up the entire process, we want to parallelize the solution.\nInstead of one process checking all combinations, we'll split the work among multiple processes or threads."),(0,i.yg)("h3",{id:"multiprocess-version"},"Multiprocess Version"),(0,i.yg)("p",null,"The code for this version is in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/password-cracker/support/password-cracker-multiprocess.c"),"."),(0,i.yg)("p",null,"The idea is the following: we create 26 worker processes, where each process will consider passwords that start with one particular letter (the first process will brute-force passwords starting with ",(0,i.yg)("inlineCode",{parentName:"p"},"a"),", the second with ",(0,i.yg)("inlineCode",{parentName:"p"},"b"),", and so on)."),(0,i.yg)("p",null,"Since we are using processes, which are naturally isolated, we need a method of communication.\nThe main process should be able to send data to the workers and read back results from them.\nFor this purpose we will use pipes: a pair of 2 pipes between the main process and each worker, one pipe for each direction of communication."),(0,i.yg)("p",null,"In summary, the flow will look like this:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"main process"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"create worker processes, along with 2 pipes for each worker (one pipe for requests, one for results)")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"send the 'a' character to the first process request pipe, 'b' to the second, etc.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"read the results from each result pipe")))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"worker process"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"read one character from the request pipe")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"generate all words of length 4 that begin with that character")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"for each generated word, compute the sha512 hash and compare it with the desired hash")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"if there is a match, write it to the result pipe"))))),(0,i.yg)("p",null,"Let's build and run the program:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/password-cracker$ make\ngcc -Wall -o password-cracker-multiprocess password-cracker-multiprocess.c -lcrypto\ngcc -Wall -Wno-int-to-pointer-cast -Wno-pointer-to-int-cast -o password-cracker-multithread password-cracker-multithread.c -lcrypto -lpthread\n\nstudent@os:~/.../support/password-cracker$ ./password-cracker-multiprocess\nworker 7 found haxx\n")),(0,i.yg)("h3",{id:"multithreaded-version"},"Multithreaded Version"),(0,i.yg)("p",null,"Check out the code in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/password-cracker/support/password-cracker-multithread.c"),"."),(0,i.yg)("p",null,"The core idea of the program is the same, but now we're using threads instead of processes."),(0,i.yg)("p",null,"This makes the communication easier: we'll use the thread function argument to send the first character of the password to each thread.\nAs for the result, each thread will return it as the return value of the thread function."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ ./password-cracker-multithread\nworker 7 found haxx\n")),(0,i.yg)("h3",{id:"multiprocess-version-in-python-1"},"Multiprocess Version in Python (1)"),(0,i.yg)("p",null,"Code in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/password-cracker/support/python/password-cracker-multiprocess-1.py"),"."),(0,i.yg)("p",null,"This is the Python equivalent of the previous multiprocess version. The program structure is the same, but Python has a few nice features that make our life easier:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"there is a ",(0,i.yg)("inlineCode",{parentName:"p"},"Process")," object that takes a function argument and spawns a new process that begins execution from that function.\nNo need to call ",(0,i.yg)("inlineCode",{parentName:"p"},"fork")," manually.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"the ",(0,i.yg)("inlineCode",{parentName:"p"},"Pipe")," object in Python is already bidirectional, unlike the OS pipes, which are unidirectional.\nSo we don't need to create 2 pipes for each direction.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"we don't have to write the code that generates all the password combinations, ",(0,i.yg)("inlineCode",{parentName:"p"},"itertools.product")," will do it for us"))),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ python3 python/password-cracker-multiprocess-1.py\nworker 7 found haxx\n")),(0,i.yg)("h3",{id:"multiprocess-version-in-python-2"},"Multiprocess Version in Python (2)"),(0,i.yg)("p",null,"Code in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/password-cracker/support/python/password-cracker-multiprocess-2.py"),"."),(0,i.yg)("p",null,"In this case, the code looks different than in the previous examples.\nNow we are taking advantage of some Python constructs, namely ",(0,i.yg)("inlineCode",{parentName:"p"},"process pools"),", which are a collection of worker processes."),(0,i.yg)("p",null,"A ",(0,i.yg)("inlineCode",{parentName:"p"},"Pool")," object has, among others, a function called ",(0,i.yg)("inlineCode",{parentName:"p"},"map"),".\n",(0,i.yg)("inlineCode",{parentName:"p"},"map")," takes a function, together with an array of values, and applies this function on each value from the array.\nAt first glance, it might look like the usual ",(0,i.yg)("inlineCode",{parentName:"p"},"map")," function, but with the key difference that the function application is done by the processes from the pool."),(0,i.yg)("p",null,"In other words, the work is distributed to the worker processes from the pool, and all the communication that we had to handle in the previous examples is done behind the scenes, greatly simplifying the code."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ python3 python/password-cracker-multiprocess-2.py\nworker 7 found haxx\n")),(0,i.yg)("h3",{id:"multithreaded-version-in-python"},"Multithreaded Version in Python"),(0,i.yg)("p",null,"Code in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/password-cracker/support/python/password-cracker-multithread.py"),"."),(0,i.yg)("p",null,"The Python equivalent of the previous multithreaded version."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ python3 python/password-cracker-multithread.py\nworker 7 found haxx\n")),(0,i.yg)("p",null,"This example is given only to provide an idea of how a multithreaded program is written.\nRemember that CPU-bound threads in python don't actually run in parallel, due to the Global Interpreter Lock."),(0,i.yg)("h2",{id:"guide-containers-vs-vms"},"Guide: Containers vs VMs"),(0,i.yg)("p",null,"Containers are a lightweight virtualization technology that allows multiple isolated user-space instances to run on a single host operating system.\nThey are often compared to ",(0,i.yg)("a",{parentName:"p",href:"https://linux.die.net/man/1/chroot"},(0,i.yg)("inlineCode",{parentName:"a"},"chroot"))," because they both provide isolated environments for running applications."),(0,i.yg)("p",null,"Cgroups limit, account for, and isolate the resource usage (CPU, memory, disk I/O, network, etc.) of a collection of processes.\nThey can be used to enforce resource limits, prioritization, accounting, and control.\nNamespaces isolate processes from each other by creating independent views of system resources.\nThere are different types of namespaces, such as user, PID, network, mount, IPC, and UTS.\nYou can read more about them ",(0,i.yg)("a",{parentName:"p",href:"https://www.nginx.com/blog/what-are-namespaces-cgroups-how-do-they-work/"},"here"),", ",(0,i.yg)("a",{parentName:"p",href:"https://www.baeldung.com/linux/cgroups-and-namespaces"},"here")," and a particularly good read about namespaces can be found ",(0,i.yg)("a",{parentName:"p",href:"https://blog.quarkslab.com/digging-into-linux-namespaces-part-1.html"},"here")),(0,i.yg)("iframe",{id:"19f9bc95-c7b8-45d4-a762-5bf56eb929ac",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="e7fdec90-2b21-434b-a58f-82d048e88181"> <p>Which of the following affirmations about namespaces and cgroups is correct?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="e42a6f6c-5f12-46a9-9c51-222b3963e45f"> <label class="form-check-label" for="e42a6f6c-5f12-46a9-9c51-222b3963e45f"> <p>Both provide resource management.</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="7ed4dacf-1b83-412a-9e59-0dac0bd62140"> <label class="form-check-label" for="7ed4dacf-1b83-412a-9e59-0dac0bd62140"> <p>Cgroups provide resource management and namespaces provide isolation and security.</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="fd14bb90-d89b-4e95-8ce3-b76e76b45f24"> <label class="form-check-label" for="fd14bb90-d89b-4e95-8ce3-b76e76b45f24"> <p>Both provide isolation and security.</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="448c3f74-e9ae-4fdc-88ba-d5055a83bddd"> <label class="form-check-label" for="448c3f74-e9ae-4fdc-88ba-d5055a83bddd"> <p>Namespaces provide resource management and cgroups provide isolation and security.</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'7ed4dacf-1b83-412a-9e59-0dac0bd62140\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>They both serve different purposes, cgroups provide resource management and namespaces provide isolation and security.\nCgroups manage resources, while namespaces isolate and secure them.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("19f9bc95-c7b8-45d4-a762-5bf56eb929ac");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,i.yg)("p",null,"However, containers take this isolation a step further by using kernel features such as namespaces and cgroups to provide a more complete and secure isolation of resources."),(0,i.yg)("p",null,"Virtual machines, on the other hand, are a heavier form of virtualization that involves running a complete guest operating system on top of a host operating system using a hypervisor.\nThis allows multiple guest operating systems to run on a single physical machine, each with its own set of virtualized hardware resources."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"VMs vs Containers",src:n(6602).A})),(0,i.yg)("p",null,"One key difference between containers and VMs is the level of abstraction.\nContainers virtualize the operating system, allowing multiple containers to share the same kernel while providing the illusion of running on separate machines.\nVMs virtualize the hardware, allowing multiple guest operating systems to run on the same physical machine while providing the illusion of running on separate physical hardware."),(0,i.yg)("p",null,"Another difference is the resource overhead.\nContainers are generally more lightweight than VMs because they share the host kernel and do not require a separate guest operating system to be installed.\nThis means that containers can start up faster and use less memory than VMs."),(0,i.yg)("iframe",{id:"7bd729da-c434-4ab5-b429-61a9ced842ec",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="759c4078-882d-4edd-aa37-a33627db8f9b"> <p>What is one advantage of using containers over VMs in regard to starting times and memory consumption?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="3c85d305-4068-4d9a-b93e-7c437ba91e67"> <label class="form-check-label" for="3c85d305-4068-4d9a-b93e-7c437ba91e67"> <p>VMs can start up faster and use less memory than containers.</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="b201c99f-1722-4a56-a08e-b1adf87edaa8"> <label class="form-check-label" for="b201c99f-1722-4a56-a08e-b1adf87edaa8"> <p>Containers can start up faster and use less memory than VMs.</p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="1cbfbf72-a206-47de-8798-6e27e17edcbb"> <label class="form-check-label" for="1cbfbf72-a206-47de-8798-6e27e17edcbb"> <p>The comparison cannot be made.</p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'b201c99f-1722-4a56-a08e-b1adf87edaa8\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>This means that they impose less resource overhead than virtual machines, which need to run a complete guest operating system on top of the host operating system using a hypervisor.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("7bd729da-c434-4ab5-b429-61a9ced842ec");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,i.yg)("h3",{id:"containers"},"Containers"),(0,i.yg)("p",null,"Our app will make use of ",(0,i.yg)("inlineCode",{parentName:"p"},"docker")," containers.\nA container is an OS-level virtualization method in which a group of userspace processes are isolated from the rest of the system."),(0,i.yg)("p",null,"Take for example a database server.\nInstead of running it directly on the host system, we'll run it in its own container.\nThis way, the server process will be isolated from other processes on the system.\nIt will also have its own filesystem."),(0,i.yg)("p",null,"Besides isolation, containers are also useful for portability.\nSince a container comes with its own filesystem image, we can pack it together will all the dependencies, so that the app will run correctly no matter what packages are installed on the host system."),(0,i.yg)("p",null,"Finally, since our application will consist of more than 1 container, we'll also use ",(0,i.yg)("inlineCode",{parentName:"p"},"docker-compose"),", which is a tool that helps us with running multi-container applications."),(0,i.yg)("h2",{id:"os-cloud"},"OS Cloud"),(0,i.yg)("p",null,'In this section, we are going to build a "toy cloud" called ',(0,i.yg)("inlineCode",{parentName:"p"},"OS Cloud"),".\nSimilar to a real cloud (like ",(0,i.yg)("inlineCode",{parentName:"p"},"aws"),"), ",(0,i.yg)("inlineCode",{parentName:"p"},"OS Cloud")," will allow us to create and manage virtual machines, through an ",(0,i.yg)("inlineCode",{parentName:"p"},"http")," API."),(0,i.yg)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.yg)("p",null,"Make sure the following packages are installed:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"sudo apt-get -y update; sudo apt-get -y install docker-compose jq\n")),(0,i.yg)("p",null,"Also, make sure your user can run docker commands.\nIf not, maybe you need to add it to the ",(0,i.yg)("inlineCode",{parentName:"p"},"docker")," group:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"sudo usermod -aG docker student\n")),(0,i.yg)("p",null,"Then, after re-login:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ docker ps\nCONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n")),(0,i.yg)("p",null,"If you are running inside a virtual machine, you need to enable nested virtualization.\nExample for vmware:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"nested-virt-vmware",src:n(9934).A,width:"845",height:"699"})),(0,i.yg)("p",null,"For virtualbox:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"nested-virt-vbox",src:n(3311).A,width:"819",height:"590"})),(0,i.yg)("p",null,"If the button is greyed out, try from the command line:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~$ VBoxManage  list vms\n"USO 2022-2023" {042a5725-bfb7-4a46-9743-1164d3acac23}\n\nstudent@os:~$ VBoxManage modifyvm {042a5725-bfb7-4a46-9743-1164d3acac23} --nested-hw-virt on\n')),(0,i.yg)("h3",{id:"initial-liftoff"},"Initial Liftoff"),(0,i.yg)("p",null,"First, we need to do some initial setup:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ ./initial_setup.sh\n")),(0,i.yg)("p",null,"Then go to ",(0,i.yg)("inlineCode",{parentName:"p"},"support/os-cloud")," and run:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ ./setup_db.sh\nSetting up db\nStarting db server\nWaiting for db server to start\n...\nStopping db server\nRestarting db server\nWaiting for db server to start\nCreating tables\nStopping db server\n\nstudent@os:~/.../support/os-cloud$ docker-compose up --build\n")),(0,i.yg)("p",null,"Now the http API will listen on port ",(0,i.yg)("inlineCode",{parentName:"p"},"localhost:5000"),". Let's try:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ curl localhost:5000\nWelcome to OS Cloud!\n")),(0,i.yg)("p",null,"Let's check the running virtual machines:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ curl localhost:5000/vm_list\n[]\n")),(0,i.yg)("p",null,"We got an empty list, since there are no virtual machines yet.\nLet's create one (the command will take about 1 minute to complete):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -H "Content-Type: application/json" \\\n -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G"}\' \\\n localhost:5000/vm_create\n{"id":1,"status":"ok"}\n')),(0,i.yg)("iframe",{id:"28aa1a1a-47e2-4b3f-8fe9-3ee1e8d90fa1",srcdoc:'<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"><script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"><\/script><link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css"><script src="//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"><\/script><script>hljs.highlightAll();<\/script><div class="card d-flex" style="width: 75%; margin: auto; margin-top: 1rem; margin-bottom: 1rem;"> <div class="card-header" id="008a1fb2-a5c7-42a8-9682-75fad1a6c20d"> <p>How do you create a new virtual machine with a memory of 3GB and disk size of 100 GB?</p> </div> <ul class="list-group list-group-flush"> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="123f447e-84b0-4fa8-924c-fde6aa609209"> <label class="form-check-label" for="123f447e-84b0-4fa8-924c-fde6aa609209"> <p>By running <code>curl -H "Content-Type: application/json" -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "3G", "disk_size": "101G"}\' localhost:5000/vm_create</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="89cd87d9-53f8-4d05-9ed0-b31cd96cc73c"> <label class="form-check-label" for="89cd87d9-53f8-4d05-9ed0-b31cd96cc73c"> <p>By running <code>curl -H "Content-Type: application/json" -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "3G", "disk_size": "100G"}\' localhost:5000/vm_create</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="b623d426-0aa4-40c7-85a2-d866f9bf2504"> <label class="form-check-label" for="b623d426-0aa4-40c7-85a2-d866f9bf2504"> <p>By running <code>curl -H "Content-Type: application/json" -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "6G", "disk_size": "1000G"}\' localhost:5000/vm_delete</code></p> </label> </div> </li> <li class="list-group-item choice"> <div class="form-check"> <input class="form-check-input" type="radio" name="flexRadioDefault" id="e74a8b31-0be6-464f-ba45-8ea00cbf60e1"> <label class="form-check-label" for="e74a8b31-0be6-464f-ba45-8ea00cbf60e1"> <p>By running <code>curl -H "Content-Type: application/json" -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "3G", "disk_size": "100G"}\' localhost:5000/vm_delete</code></p> </label> </div> </li> </ul> <div class="card-footer"> <div class="text-center" style="padding: 5px;"> <button class="check btn btn-primary" type="button" onclick="console.log(\'Clickedcheck\');answerIndex=\'89cd87d9-53f8-4d05-9ed0-b31cd96cc73c\';document.getElementsByClassName(\'check\')[0].classList.add(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=true;if(radio.checked){if(radio.id===answerIndex){choices[i].classList.add(\'list-group-item-success\');document.getElementsByClassName(\'feedback\')[0].classList.remove(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'feedback\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;}else{choices[i].classList.add(\'list-group-item-danger\');}}}">Check Answer </button> <button class="reset btn btn-default" type="button" onclick="console.log(\'Clickedreset\');document.getElementsByClassName(\'check\')[0].classList.remove(\'disabled\');choices=document.getElementsByClassName(\'choice\');for(i=0;i<choices.length;i++){radio=choices[i].firstElementChild.firstElementChild;radio.disabled=false;choices[i].classList.remove(\'list-group-item-success\');choices[i].classList.remove(\'list-group-item-danger\');radio.checked=false;}document.getElementsByClassName(\'feedback\')[0].classList.add(\'d-none\');var savTop=parent.document.documentElement.scrollTop;document.getElementsByClassName(\'card\')[0].scrollIntoView(false);parent.document.documentElement.scrollTop=savTop;">Try Again</button> </div> </div></div><div class="feedback card d-flex d-none" style="width: 80%; margin: auto; margin-top: 1rem;"> <div class="card-header"> Feedback </div> <div class="card-body alert alert-success"> <p>We need to uso <code>curl</code> with the right path <code>localhost:5000/vm_create</code>, specifying the right data <code>{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "3G", "disk_size": "100G"}</code>.</p> </div></div>',width:"100%",style:{border:"none",overflow:"hidden"},onLoad:()=>{var e=document.getElementById("28aa1a1a-47e2-4b3f-8fe9-3ee1e8d90fa1");e.height=e.contentWindow.document.body.scrollHeight+36}}),(0,i.yg)("p",null,"Check the virtual machine list again:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl localhost:5000/vm_list\n[{"id":1,"name":"my_vm"}]\n')),(0,i.yg)("p",null,"We can also use the ",(0,i.yg)("inlineCode",{parentName:"p"},"jq")," tool to pretty print the ",(0,i.yg)("inlineCode",{parentName:"p"},"json")," outputs:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -s localhost:5000/vm_list | jq .\n[\n  {\n    "id": 1,\n    "name": "my_vm"\n  }\n]\n')),(0,i.yg)("p",null,"We see our newly created virtual machine.\nLet's get some information about it:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "RUNNING"\n}\n')),(0,i.yg)("p",null,"We recognize some parameters that we specified at creation time, like ",(0,i.yg)("inlineCode",{parentName:"p"},"mem_size")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"disk_size"),".\nAlso, the IP address ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.2")," has been allocated for our machine."),(0,i.yg)("h3",{id:"virtual-machine-creation"},"Virtual Machine Creation"),(0,i.yg)("p",null,"Take a look at the ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_create")," function in ",(0,i.yg)("inlineCode",{parentName:"p"},"support/os-cloud/os-cloud/vm.py"),".\nThe steps undertaken are roughly:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"some initial allocations: the virtual machine IP address, network interface, qemu ports, etc")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"the virtual machine disk is created, based on the template specified by the user (like ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22.04"),")")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"the virtual machine is started with this new disk, in order to do some more customizations (the ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function)")),(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("p",{parentName:"li"},"the virtual machine is restarted again with the final disk in place"))),(0,i.yg)("h3",{id:"disk-creation"},"Disk Creation"),(0,i.yg)("p",null,"All the disk templates are in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/support/disk-templates"),".\nThis directory will be mounted in ",(0,i.yg)("inlineCode",{parentName:"p"},"/disk-templates")," inside the container."),(0,i.yg)("p",null,"The first step of disk creation is to create a ",(0,i.yg)("inlineCode",{parentName:"p"},"qcow2")," disk file based on the template specified by the user (step 2 from the explanation above)."),(0,i.yg)("p",null,"This is done in the ",(0,i.yg)("inlineCode",{parentName:"p"},"create_disk_from_template")," function in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/support/os-cloud/disk.py"),".\nThe function will first create a disk object in the database, then it will call 2 shell scripts: ",(0,i.yg)("inlineCode",{parentName:"p"},"create_disk_from_template.sh")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"setup_root_password.sh"),"."),(0,i.yg)("p",null,"The second step is to start the virtual machine with this disk and do some customizations (step 3 from above)."),(0,i.yg)("p",null,"This is done in the ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/support/os-cloud/vm.py"),".\nThe code will connect to the vm's qemu serial console using ",(0,i.yg)("inlineCode",{parentName:"p"},"pexpect"),".\nThen it will use a series of ",(0,i.yg)("inlineCode",{parentName:"p"},"expect_exact")," + ",(0,i.yg)("inlineCode",{parentName:"p"},"sendline")," pairs to interact with the virtual machine, as if those commands were typed in the command-line."),(0,i.yg)("h3",{id:"os-cloud-more-disk-customization"},"OS-Cloud: More Disk Customization"),(0,i.yg)("p",null,"You might have probably noticed that there are 2 types of disk customizations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"One type is for things that can be done without running the virtual machine.\nIf we only want to modify some files inside the disk filesystem, we can do so by mounting the disk.\nThis is done, for example, in the ",(0,i.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04/setup_root_password.sh")," script.\nThere we use ",(0,i.yg)("inlineCode",{parentName:"p"},"nbd_connect_qcow2")," + ",(0,i.yg)("inlineCode",{parentName:"p"},"mount")," to mount the disk, then we modify the ",(0,i.yg)("inlineCode",{parentName:"p"},"/etc/shadow")," file to change the root password.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The second case is for operations that must be done with the virtual machine running.\nThese are handled in the ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function: the virtual machine is first started (",(0,i.yg)("inlineCode",{parentName:"p"},"start_qemu_for_vm"),"), then ",(0,i.yg)("inlineCode",{parentName:"p"},"pexpect")," is used to interact with the virtual machine via the ",(0,i.yg)("inlineCode",{parentName:"p"},"qemu")," serial console.\nHere we do things like running ",(0,i.yg)("inlineCode",{parentName:"p"},"ssh-keygen")," - a binary that is part of the disk filesystem, which depends on other parts of the operating system from the disk to be running.\nNote that in ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare"),", for convenience, we also do some customizations that fall into the first category (like modifying ",(0,i.yg)("inlineCode",{parentName:"p"},"/etc/ssh/sshd_config"),")."))),(0,i.yg)("h4",{id:"copy-additional-files-to-the-newly-created-disk"},"Copy Additional Files to the Newly Created Disk"),(0,i.yg)("p",null,"This is a customization from the first category.\nIn ",(0,i.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04/files")," there is a file called ",(0,i.yg)("inlineCode",{parentName:"p"},"99-os-cloud-welcome")," (a script that prints a greeting message).\nWe want to copy this file to ",(0,i.yg)("inlineCode",{parentName:"p"},"/etc/update-motd.d")," in our newly created disk, so that it will run whenever a user logs in."),(0,i.yg)("p",null,"To do this, you will create a script called ",(0,i.yg)("inlineCode",{parentName:"p"},"copy_files.sh")," in ",(0,i.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04"),".\nThis script will receive a path to a ",(0,i.yg)("inlineCode",{parentName:"p"},"qcow2")," disk file as an argument, it will mount the disk, and then copy the file to the necessary location.\nThen, in the ",(0,i.yg)("inlineCode",{parentName:"p"},"create_disk_from_template")," function in ",(0,i.yg)("inlineCode",{parentName:"p"},"disk.py")," you will call this script, similar with how the other scripts are called."),(0,i.yg)("p",null,"You can use ",(0,i.yg)("inlineCode",{parentName:"p"},"disk-templates/ubuntu_22.04/setup_root_password.sh")," as an example."),(0,i.yg)("h4",{id:"ssh-key-setup"},"SSH Key Setup"),(0,i.yg)("p",null,"We want to be able to log into the virtual machine using an ssh key, instead of the password ",(0,i.yg)("inlineCode",{parentName:"p"},"123456"),".\nNotice that the ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_create")," API also accepts an ",(0,i.yg)("inlineCode",{parentName:"p"},"ssh_key")," parameter.\nHere, the user can provide an ssh public key, which the system will install in ",(0,i.yg)("inlineCode",{parentName:"p"},"/root/.ssh/authorized_keys")," in the newly created virtual machine."),(0,i.yg)("p",null,"Your task is to implement this feature, as a customization from the second category (that is, implemented in the ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function).\nThe key will be accessible to the function as the ",(0,i.yg)("inlineCode",{parentName:"p"},"ssh_pub_key")," parameter.\nThen it's only a matter of writing the key to the appropriate place, using a command like ",(0,i.yg)("inlineCode",{parentName:"p"},"echo key > /root/.ssh/authorized_keys"),".\nNote that the ",(0,i.yg)("inlineCode",{parentName:"p"},"/root/.ssh")," directory might not exist, so you need to create it as well."),(0,i.yg)("p",null,"After the feature is complete, you can test it using the keys in the ",(0,i.yg)("inlineCode",{parentName:"p"},"support/os-cloud/keys")," directory.\nThis directory contains a pair of public-private keys.\nThe directory will also be mounted inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"os-cloud")," container in ",(0,i.yg)("inlineCode",{parentName:"p"},"/keys"),"."),(0,i.yg)("p",null,"You will create another virtual machine, passing the public key to ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_create"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -H "Content-Type: application/json" \\\n -d \'{ "name": "my_vm2", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G", "ssh_key": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC8CDHgeE4NIIIih3wSz58GDkfPLUk2m9gmbZB1f6o8Lzawzb3HVFpslAUWK0f/Ymw9cloInpMo50gWMYFSyJ7ZrOWWak54BedpHDkFAxxy+JCE9b+pkKsrAT7wiir7gn2LHlhj55FLZkC9PpM9cBcrMfzlcP9Bf+2cnpDdINybSLmOUmrI23ANteM4lEVaa2yEbCaJk6dFB8+atz5zPjvVI0Hd+kJK7yJ0xV6Zc2ADle7TKW3dyiXOE9qFKe9933Rj7ocqNXCAO1cxUoJCVuVS7lh+1pSSPXLWLTOhVp/XiLGWVP6KRYmmn710MWKm9Kj1tPiGUphUraL20SJiRT6/ os-cloud-user"}\' \\\n localhost:5000/vm_create\n{"id":2,"status":"ok"}\n')),(0,i.yg)("p",null,"Obtain the IP address that was allocated to the new vm:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support/os-cloud$ curl -s -H "Content-Type: application/json" -d \'{ "id": 2 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 2,\n  "ip": "192.168.0.3",\n  "mem_size": 2147483648,\n  "name": "my_vm2",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "RUNNING"\n}\n')),(0,i.yg)("p",null,"Then go inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"os-cloud")," container and ssh to the vm using the private key in ",(0,i.yg)("inlineCode",{parentName:"p"},"/keys"),".\nIt should work without prompting for the password:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose exec os-cloud bash\nroot@ac93d3d6cab2:/app# ssh -i /keys/ssh_key root@192.168.0.3\nWelcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-56-generic x86_64)\n[...]\nPowered by OS Cloud\nLast login: Mon Jan  2 19:34:53 2023 from 192.168.0.1\nroot@ubuntu:~#\n")),(0,i.yg)("h3",{id:"os-cloud-internet-access"},"OS-Cloud: Internet Access"),(0,i.yg)("p",null,"Notice that our virtual machines don't have Internet access:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"Powered by OS Cloud\nLast login: Mon Jan  2 19:52:47 UTC 2023 on ttyS0\nroot@ubuntu:~# curl google.com\ncurl: (6) Could not resolve host: google.com\n")),(0,i.yg)("p",null,"In this task, we want to fix this problem.\nTo do this, we must first understand how the networking for the virtual machines is done."),(0,i.yg)("p",null,"First, there is the concept of a ",(0,i.yg)("inlineCode",{parentName:"p"},"network"),", which you saw in the previous section.\nThere is a network called ",(0,i.yg)("inlineCode",{parentName:"p"},"default"),", with the address of ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.0/24"),".\nAll virtual machines are part of this network, that's why they were allocated ip addresses like ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.2"),"."),(0,i.yg)("p",null,"Let's go inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"os-cloud")," container and take a look at the network interfaces:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"$ docker-compose exec os-cloud bash\nroot@8333e5cefb0d:/app# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n2: br0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default qlen 1000\n    link/ether 8a:68:b7:5b:6b:45 brd ff:ff:ff:ff:ff:ff\n    inet 192.168.0.1/16 scope global br0\n       valid_lft forever preferred_lft forever\n3: tap0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\n    link/ether 8a:68:b7:5b:6b:45 brd ff:ff:ff:ff:ff:ff\n4: tap1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast master br0 state UP group default qlen 1000\n    link/ether fa:f8:7f:83:50:8f brd ff:ff:ff:ff:ff:ff\n77: eth0@if78: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default\n    link/ether 02:42:ac:16:00:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 172.22.0.3/16 brd 172.22.255.255 scope global eth0\n       valid_lft forever preferred_lft forever\n\nroot@8333e5cefb0d:/app# ps -ef | grep qemu\nroot          19       8 29 09:15 ?        00:01:26 qemu-system-x86_64 -m 2048 -hda /vm-disks/1/disk.qcow2 -net nic,macaddr=52:54:00:12:34:00 -net tap,ifname=tap0,script=no -monitor telnet::10001,server,nowait -serial telnet::10002,server,nowait -nographic -enable-kvm\nroot          29       8 28 09:15 ?        00:01:24 qemu-system-x86_64 -m 2048 -hda /vm-disks/2/disk.qcow2 -net nic,macaddr=52:54:00:12:34:01 -net tap,ifname=tap1,script=no -monitor telnet::10003,server,nowait -serial telnet::10004,server,nowait -nographic -enable-kvm\n")),(0,i.yg)("p",null,"Here we have 2 virtual machines running.\nEach virtual machine uses a ",(0,i.yg)("inlineCode",{parentName:"p"},"tap")," interface (the ",(0,i.yg)("inlineCode",{parentName:"p"},"-net tap,ifname=tap0,script=no")," parameter for ",(0,i.yg)("inlineCode",{parentName:"p"},"qemu"),").\nThis means that the ",(0,i.yg)("inlineCode",{parentName:"p"},"ens0")," interface inside the virtual machine corresponds to the ",(0,i.yg)("inlineCode",{parentName:"p"},"tap0")," interface outside the virtual machine.\nAll the tap interfaces are bridged together into the ",(0,i.yg)("inlineCode",{parentName:"p"},"br0")," bridge, which has the ip address ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.1"),".\nAlso, each virtual machine has the default gateway configured to be ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.1"),"."),(0,i.yg)("p",null,"In summary, it looks something like this:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"os-cloud",src:n(4354).A})),(0,i.yg)("p",null,"All the traffic coming from the virtual machines passes through the ",(0,i.yg)("inlineCode",{parentName:"p"},"br0")," interface.\nSo, in order to make the Internet work, all we have to do is a simple ",(0,i.yg)("inlineCode",{parentName:"p"},"NAT"),", with a command like:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"root@8333e5cefb0d:/app# iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j MASQUERADE\n")),(0,i.yg)("p",null,"Now, the virtual machines should have Internet access:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'root@8333e5cefb0d:/app# ssh root@192.168.0.2\n[...]\nroot@ubuntu:~# curl google.com\n<HTML><HEAD><meta http-equiv="content-type" content="text/html;charset=utf-8">\n<TITLE>301 Moved</TITLE></HEAD><BODY>\n<H1>301 Moved</H1>\nThe document has moved\n<A HREF="http://www.google.com/">here</A>.\n</BODY></HTML>\n')),(0,i.yg)("p",null,"Now your task is to run the ",(0,i.yg)("inlineCode",{parentName:"p"},"iptables")," command above automatically when the system starts, so that it's not necessary to run it manually like we did in the above example."),(0,i.yg)("p",null,"A good place to do this is in the ",(0,i.yg)("inlineCode",{parentName:"p"},"create_one_network")," function in ",(0,i.yg)("inlineCode",{parentName:"p"},"network.py"),".\nThere you can add another ",(0,i.yg)("inlineCode",{parentName:"p"},"subprocess.run")," call to run ",(0,i.yg)("inlineCode",{parentName:"p"},"iptables"),".\nThe ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.0/24")," value should not be hardcoded, but you can take it from the ",(0,i.yg)("inlineCode",{parentName:"p"},"ip_with_prefixlen")," member of the ",(0,i.yg)("inlineCode",{parentName:"p"},"Net")," object."),(0,i.yg)("h3",{id:"task-create-a-new-disk-by-hand"},"Task: Create a New Disk by Hand"),(0,i.yg)("p",null,"Navigate to ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/os-cloud/drills/tasks/os-cloud/support"),".\nLet's replicate the above-mentioned steps and create a new disk ourselves."),(0,i.yg)("p",null,"First, we have to call the 2 scripts from the ",(0,i.yg)("inlineCode",{parentName:"p"},"create_disk_from_template")," function:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ ./disk-templates/ubuntu_22.04/create_disk_from_template.sh ./disk-templates/ubuntu_22.04/ubuntu_22.04.qcow2 my-disk.qcow2 10737418240\nImage resized.\n\nstudent@os:~/.../support$ ls -lh my-disk.qcow2\n-rw-r--r-- 1 student student 619M Nov 20 15:41 my-disk.qcow2\n\nstudent@os:~/.../support$ sudo ./disk-templates/ubuntu_22.04/setup_root_password.sh my-disk.qcow2 123456\n")),(0,i.yg)("p",null,"Now we can start a qemu instance using this disk:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ qemu-system-x86_64 -enable-kvm -m 2G -hda my-disk.qcow2 -nographic\n...\nUbuntu 22.04 LTS ubuntu ttyS0\n\nubuntu login: root\nPassword:\n...\nroot@ubuntu:~#\n")),(0,i.yg)("p",null,"Here we can further run customization commands, like the ones in the ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22_04_vm_prepare")," function, or any other things that we want."),(0,i.yg)("p",null,"When we're done, we run the ",(0,i.yg)("inlineCode",{parentName:"p"},"halt")," command:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"root@ubuntu:~# halt\nroot@ubuntu:~#          Stopping Session 1 of User root...\n[  OK  ] Removed slice /system/modprobe.\n[  OK  ] Stopped target Graphical Interface.\n...\n         Starting System Halt...\n[   86.431398] reboot: System halted\n")),(0,i.yg)("p",null,"When the ",(0,i.yg)("inlineCode",{parentName:"p"},"System halted")," message is printed, press ",(0,i.yg)("inlineCode",{parentName:"p"},"CTRL+A X")," to exit qemu (that is, press ",(0,i.yg)("inlineCode",{parentName:"p"},"CTRL+A"),", release ",(0,i.yg)("inlineCode",{parentName:"p"},"CTRL")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"A"),", press ",(0,i.yg)("inlineCode",{parentName:"p"},"X"),")."),(0,i.yg)("h3",{id:"task-implement-vm_stop"},"Task: Implement ",(0,i.yg)("inlineCode",{parentName:"h3"},"vm_stop")),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_stop")," command will stop a particular virtual machine, meaning it will stop the qemu process for that vm.\nThe implementation starts in ",(0,i.yg)("inlineCode",{parentName:"p"},"api_vm_stop")," in ",(0,i.yg)("inlineCode",{parentName:"p"},"app.py"),", which is the function that handles the ",(0,i.yg)("inlineCode",{parentName:"p"},"http")," request for the stop operation.\nHere you need to do the following:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"extract the virtual machine ",(0,i.yg)("inlineCode",{parentName:"p"},"id")," from the request")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"use the ",(0,i.yg)("inlineCode",{parentName:"p"},"vm.vm_get")," function to convert this ID into a ",(0,i.yg)("inlineCode",{parentName:"p"},"VM")," structure")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"call ",(0,i.yg)("inlineCode",{parentName:"p"},"vm.vm_stop")," and pass the ",(0,i.yg)("inlineCode",{parentName:"p"},"VM")," object to it"))),(0,i.yg)("p",null,"In ",(0,i.yg)("inlineCode",{parentName:"p"},"vm.vm_stop"),":"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"call ",(0,i.yg)("inlineCode",{parentName:"p"},"stop_qemu_for_vm"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"change the vm pid in the database to ",(0,i.yg)("inlineCode",{parentName:"p"},"-1"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"change the vm state in the database to ",(0,i.yg)("inlineCode",{parentName:"p"},"VM_STATE_STOPPED")))),(0,i.yg)("p",null,"After modifying the code, you should run ",(0,i.yg)("inlineCode",{parentName:"p"},"docker-compose up --build")," again.\nAlso, if your database became inconsistent, you can clean it up by re-running the ",(0,i.yg)("inlineCode",{parentName:"p"},"setup_db.sh")," script.\nThen delete all vm disks with ",(0,i.yg)("inlineCode",{parentName:"p"},"sudo rm -rf vm-disks/*"),"."),(0,i.yg)("p",null,"With ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_stop")," implemented, the system should work like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support$ curl -s localhost:5000/vm_list | jq .\n[\n  {\n    "id": 1,\n    "name": "my_vm"\n  }\n]\nstudent@os:~/.../support$ curl -H "Content-Type: application/json" -d \'{ "id": 1}\' localhost:5000/vm_scurl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "RUNNING"\n}\n')),(0,i.yg)("p",null,"The vm is in the ",(0,i.yg)("inlineCode",{parentName:"p"},"RUNNING")," state.\nNow let's stop it:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support$ curl -H "Content-Type: application/json" -d \'{ "id": 1}\' localhost:5000/vm_stop\n{"status":"ok"}\nstudent@os:~/.../support$ curl -s -H "Content-Type: application/json" -d \'{ "id": 1 }\' localhost:5000/vm_info | jq .\n{\n  "disk_size": 10737418240,\n  "id": 1,\n  "ip": "192.168.0.2",\n  "mem_size": 2147483648,\n  "name": "my_vm",\n  "network": "default",\n  "os": "ubuntu_22.04",\n  "state": "STOPPED"\n}\n')),(0,i.yg)("p",null,"Now the state is ",(0,i.yg)("inlineCode",{parentName:"p"},"STOPPED"),".\nInside the container, the qemu process should be gone as well:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support$ docker-compose exec os-cloud bash\nroot@b0600eff8903:/app# ps -ef\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 10:00 ?        00:00:00 /sbin/docker-init -- python3 -u app.py\nroot           7       1  0 10:00 ?        00:00:00 python3 -u app.py\nroot          33       0  0 10:00 pts/3    00:00:00 bash\nroot          41      33  0 10:00 pts/3    00:00:00 ps -ef\n")),(0,i.yg)("p",null,"Finally, the vm can be started again using ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_start"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'student@os:~/.../support$ curl -H "Content-Type: application/json" -d \'{ "id": 1}\' localhost:5000/vm_start\n{"status":"ok"}\n')),(0,i.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,i.yg)("a",{parentName:"p",href:"/operating-systems/Application%20Interaction/lab12#os-cloud"},"this")," reading material."),(0,i.yg)("h3",{id:"more-implementation-details"},"More Implementation Details"),(0,i.yg)("p",null,"The application consists of 2 containers:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"db"),", which runs a ",(0,i.yg)("inlineCode",{parentName:"p"},"MySQL")," database")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"os-cloud"),", which runs the web application and the virtual machines"))),(0,i.yg)("p",null,"Let's check them.\nAfter running ",(0,i.yg)("inlineCode",{parentName:"p"},"docker-compose up"),", in another terminal run ",(0,i.yg)("inlineCode",{parentName:"p"},"docker-compose ps"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose ps\n       Name                      Command              State                    Ports\n------------------------------------------------------------------------------------------------------\nos-cloud_db_1         docker-entrypoint.sh mariadbd   Up      3306/tcp\nos-cloud_os-cloud_1   python3 -u app.py               Up      0.0.0.0:5000->5000/tcp,:::5000->5000/tcp\n\n")),(0,i.yg)("p",null,"Now let's move inside the ",(0,i.yg)("inlineCode",{parentName:"p"},"os-cloud")," container:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose exec os-cloud bash\nroot@89a986d2526e:/app#\n")),(0,i.yg)("p",null,"Since the virtual machines run inside this container, we should expect to see the one that we created in the previous step."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"root@89a986d2526e:/app# ps -ef | cat\nUID          PID    PPID  C STIME TTY          TIME CMD\nroot           1       0  0 09:02 ?        00:00:00 /sbin/docker-init -- python3 -u app.py\nroot           7       1  0 09:02 ?        00:00:00 python3 -u app.py\nroot          12       7  6 09:02 ?        00:00:41 qemu-system-x86_64 -enable-kvm -m 2048 -hda /vm-disks/1/disk.qcow2 -net nic,macaddr=52:54:00:12:34:00 -net tap,ifname=tap0,script=no -monitor telnet::10001,server,nowait -serial telnet::10002,server,nowait -nographic\nroot          27       0  0 09:11 pts/3    00:00:00 bash\nroot          35      27  0 09:13 pts/3    00:00:00 ps -ef\n")),(0,i.yg)("p",null,"Indeed, a ",(0,i.yg)("inlineCode",{parentName:"p"},"qemu-system-x86_64")," process is there.\nThe vm should be accessible via ",(0,i.yg)("inlineCode",{parentName:"p"},"ssh")," on the IP ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.2")," with password ",(0,i.yg)("inlineCode",{parentName:"p"},"123456")," (if you get ",(0,i.yg)("inlineCode",{parentName:"p"},"connection refused")," here, you need to wait a bit more for the machine to boot):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"root@adf6e0bf4e6e:/app# ssh root@192.168.0.2\nThe authenticity of host '192.168.0.2 (192.168.0.2)' can't be established.\nED25519 key fingerprint is SHA256:3Mfa1fB9y4knUDJWEmEOTz9dWOE7SVhnH/kCBJ15Y0E.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '192.168.0.2' (ED25519) to the list of known hosts.\nroot@192.168.0.2's password:\nWelcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-40-generic x86_64)\n\n...\n\nLast login: Thu Nov 17 07:49:55 2022\nroot@ubuntu:~#\n")),(0,i.yg)("p",null,"The vm is also accessible on the serial console (notice the ",(0,i.yg)("inlineCode",{parentName:"p"},"-serial telnet::10002,server,nowait")," argument to qemu).\nIf we start a telnet connection on port ",(0,i.yg)("inlineCode",{parentName:"p"},"10002"),", qemu will show us the virtual machine's serial console (basically the output that we normally see when running a virtual machine in text mode)"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"root@adf6e0bf4e6e:/app# telnet localhost 10002\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\n\nubuntu login: root\nPassword:\nWelcome to Ubuntu 22.04 LTS (GNU/Linux 5.15.0-40-generic x86_64)\n\n...\n\nLast login: Thu Nov 17 07:50:11 UTC 2022 from 192.168.0.1 on pts/0\nroot@ubuntu:~#\n")),(0,i.yg)("p",null,"To exit the serial console, press ",(0,i.yg)("inlineCode",{parentName:"p"},"CTRL+]"),", then type ",(0,i.yg)("inlineCode",{parentName:"p"},"quit"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"root@ubuntu:~#\ntelnet> quit\nConnection closed.\nroot@adf6e0bf4e6e:/app#\n")),(0,i.yg)("h3",{id:"even-more-implementation-details"},"(Even) More Implementation Details"),(0,i.yg)("p",null,"The architecture of the system can be summarized in the following diagram:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"os-cloud",src:n(8865).A})),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"os-cloud")," container is the core of the entire system.\nIt consists of a web application written in python using ",(0,i.yg)("inlineCode",{parentName:"p"},"flask"),".\nThis web application exposes a virtual machine ",(0,i.yg)("inlineCode",{parentName:"p"},"API")," that the user can interact with (like ",(0,i.yg)("inlineCode",{parentName:"p"},"vm_create"),")."),(0,i.yg)("p",null,"So, when we're calling ",(0,i.yg)("inlineCode",{parentName:"p"},"curl")," like in the example above:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'curl -H "Content-Type: application/json" \\\n -d \'{ "name": "my_vm", "image": "ubuntu_22.04", "network": "default", "mem_size": "2G", "disk_size": "10G"}\' \\\n localhost:5000/vm_create\n')),(0,i.yg)("p",null,"It will do an ",(0,i.yg)("inlineCode",{parentName:"p"},"HTTP POST")," request (because of the ",(0,i.yg)("inlineCode",{parentName:"p"},"-d")," parameter) to ",(0,i.yg)("inlineCode",{parentName:"p"},"/vm_create"),".\nThe request will be handled by the ",(0,i.yg)("inlineCode",{parentName:"p"},"api_vm_create")," function in ",(0,i.yg)("inlineCode",{parentName:"p"},"app.py")," (because of the ",(0,i.yg)("inlineCode",{parentName:"p"},'@app.route("/vm_create", methods=["POST"])')," line)."),(0,i.yg)("p",null,"Inside this function, we also have access to the request payload (the string that comes after ",(0,i.yg)("inlineCode",{parentName:"p"},"-d")," in our ",(0,i.yg)("inlineCode",{parentName:"p"},"curl")," call).\nMore specifically, ",(0,i.yg)("inlineCode",{parentName:"p"},"request.json")," will parse this payload as a ",(0,i.yg)("inlineCode",{parentName:"p"},"JSON")," object and hand it back to us as a python dictionary.\nIn this dictionary we'll find the parameters for our request, like ",(0,i.yg)("inlineCode",{parentName:"p"},"name"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"image"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"network"),", and so on."),(0,i.yg)("p",null,"The function will then take the actions required to create the virtual machine: create the disk, start qemu, interact with the database, etc.\nFinally, whatever is returned by the ",(0,i.yg)("inlineCode",{parentName:"p"},"api_vm_create")," function will be received by the ",(0,i.yg)("inlineCode",{parentName:"p"},"curl")," request as the ",(0,i.yg)("inlineCode",{parentName:"p"},"HTTP")," response.\nHere we also return ",(0,i.yg)("inlineCode",{parentName:"p"},"JSON")," objects, like ",(0,i.yg)("inlineCode",{parentName:"p"},'{"id":1,"status":"ok"}'),"."),(0,i.yg)("p",null,"There are 3 objects used by the system:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"vm")," - the actual virtual machine")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"disk")," - holds information about virtual machine disks")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"network")," - holds information about a network"))),(0,i.yg)("p",null,"Each of these objects are stored in a table in the database."),(0,i.yg)("p",null,"Let's check the database contents (take the password from the ",(0,i.yg)("inlineCode",{parentName:"p"},"setup_db.sh")," file):"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~/.../support/os-cloud$ docker-compose exec db mysql -u os-cloud -p os-cloud\nEnter password:\n...\nMariaDB [os-cloud]> select * from vm;\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n| id | name  | disk_id | mem_size   | network_id | tap_interface_idx | ip         | qemu_pid | qemu_monitor_port | qemu_serial_port | state |\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n|  1 | my_vm |       1 | 2147483648 |          1 |                 0 | 3232235522 |       18 |             10001 |            10002 |     0 |\n+----+-------+---------+------------+------------+-------------------+------------+----------+-------------------+------------------+-------+\n1 row in set (0.001 sec)\n\nMariaDB [os-cloud]> select * from disk;\n+----+-------------+---------------+\n| id | size        | template_name |\n+----+-------------+---------------+\n|  1 | 10737418240 | ubuntu_22.04  |\n+----+-------------+---------------+\n1 row in set (0.000 sec)\n\nMariaDB [os-cloud]> select * from network;\n+----+---------+----------------------+------------+------------+\n| id | name    | bridge_interface_idx | ip         | mask       |\n+----+---------+----------------------+------------+------------+\n|  1 | default |                    0 | 3232235520 | 4294901760 |\n+----+---------+----------------------+------------+------------+\n1 row in set (0.000 sec)\n")),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Note: in real life, DON'T store passwords in text files inside a repository"),"."),(0,i.yg)("p",null,"Some observations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"There is a ",(0,i.yg)("inlineCode",{parentName:"p"},"default")," network already created.\nThat is why we specified ",(0,i.yg)("inlineCode",{parentName:"p"},'"network": "default"')," in the vm creation parameters, and we see that the vm is assigned to this network (",(0,i.yg)("inlineCode",{parentName:"p"},"network_id")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"1"),").")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"This network's ip address is ",(0,i.yg)("inlineCode",{parentName:"p"},"3232235520"),", which in hex is ",(0,i.yg)("inlineCode",{parentName:"p"},"0xC0A80000"),", that is, ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.0"),".\nThe netmask is ",(0,i.yg)("inlineCode",{parentName:"p"},"0xFFFF0000"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"/16"),".\nThis explains why our vm received the ip address ",(0,i.yg)("inlineCode",{parentName:"p"},"192.168.0.2"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"There is a disk with the size of ",(0,i.yg)("inlineCode",{parentName:"p"},"10GB"),", based on the ",(0,i.yg)("inlineCode",{parentName:"p"},"ubuntu_22.04")," template, exactly like we requested.\nThis disk is assigned to our vm (",(0,i.yg)("inlineCode",{parentName:"p"},"disk_id")," is ",(0,i.yg)("inlineCode",{parentName:"p"},"1"),").\nThe disk file will reside in ",(0,i.yg)("inlineCode",{parentName:"p"},"support/os-cloud/vm-disks/1/disk.qcow2"),", or ",(0,i.yg)("inlineCode",{parentName:"p"},"/vm-disks/1/disk.qcow2")," inside the container."))),(0,i.yg)("h2",{id:"d-bus"},"D-Bus"),(0,i.yg)("p",null,"D-Bus is an Inter-Process Communication (IPC) mechanism that is commonly present on Linux.\nIt is particularly used by various components of the desktop environment (like GNOME) to communicate between one another, although the system itself is general-purpose and can be used in any other situations."),(0,i.yg)("p",null,"As the name suggests, the communication model is that of a bus: processes connect to the bus, then exchange messages with other processes through the bus.\nThe bus itself is implemented by the dbus-daemon, and there are in fact multiple buses: one system bus, accessible system-wide, and one or more session buses, each one corresponding to one user login session."),(0,i.yg)("p",null,"Every process that connects to D-Bus receives a unique connection name.\nThis name can be something human-readable, like ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications"),", or some generated ID, like ",(0,i.yg)("inlineCode",{parentName:"p"},":1.63"),".\nOnce a process is connected, it can expose one or multiple ",(0,i.yg)("inlineCode",{parentName:"p"},"objects"),".\nAn object has a path-like name, consisting of strings separated by a slash character (for example, ",(0,i.yg)("inlineCode",{parentName:"p"},"/org/freedesktop/Notifications"),").\nEach object contains one or more ",(0,i.yg)("inlineCode",{parentName:"p"},"interfaces"),", which have the methods that can be called on that object."),(0,i.yg)("h2",{id:"guide-d-bus-inspection-with-d-feet"},"Guide: D-Bus Inspection with D-Feet"),(0,i.yg)("p",null,"In order to better understand these concepts, we'll use a graphical tool (",(0,i.yg)("inlineCode",{parentName:"p"},"D-Feet"),") to inspect all the available D-Bus objects on our system."),(0,i.yg)("p",null,"Run D-Feet and select ",(0,i.yg)("inlineCode",{parentName:"p"},"Session Bus")," from the top button:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"dfeet-session-bus",src:n(5602).A,width:"1631",height:"845"})),(0,i.yg)("p",null,"On the left panel, we can see all the processes connected to D-Bus with their associated ",(0,i.yg)("inlineCode",{parentName:"p"},"connection names"),".\nScroll down and find ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications"),".\nOn the right side, expand ",(0,i.yg)("inlineCode",{parentName:"p"},"/org/freedesktop/Notifications")," and then expand the ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications")," interface.\nThe window should look like this:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"dfeet-notifications",src:n(8529).A,width:"1623",height:"834"})),(0,i.yg)("p",null,"Some observations:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The bus communication happens over a Unix socket, with the path ",(0,i.yg)("inlineCode",{parentName:"p"},"/run/user/1000/bus"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications")," on the left panel is the ",(0,i.yg)("inlineCode",{parentName:"p"},"connection name"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The process that has connected with this name is ",(0,i.yg)("inlineCode",{parentName:"p"},"/usr/bin/gjs /usr/share/gnome-shell/org.gnome.Shell.Notifications")," and has the pid of ",(0,i.yg)("inlineCode",{parentName:"p"},"4373"),".")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"This process exposes one object: ",(0,i.yg)("inlineCode",{parentName:"p"},"/org/freedesktop/Notifications"),".\nNote that the object name is the same as the connection name, where the dots have been replaced with slashes.\nThis is not a requirement, as the objects exposed by a process can have any name."))),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The object has 4 interfaces: ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.DBus.Introspectable"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.DBus.Peer"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.DBus.Properties")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications"),".\nNote that the last one (",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications"),") is the same as the connection name, but this again is just a coincidence, not a requirement.")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The interface ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications")," has some methods that can be called, such as ",(0,i.yg)("inlineCode",{parentName:"p"},"Notify"),"."))),(0,i.yg)("h2",{id:"guide-calling-d-bus-methods"},"Guide: Calling D-Bus Methods"),(0,i.yg)("p",null,"The application behind ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications")," is responsible with desktop notifications (the small bubbles of text that appear at the top of the screen when some event happens).\nWhen an application wants to send a notification it needs to connect to D-Bus and call the ",(0,i.yg)("inlineCode",{parentName:"p"},"Notify")," method from the ",(0,i.yg)("inlineCode",{parentName:"p"},"org.freedesktop.Notifications")," interface."),(0,i.yg)("p",null,"In this example, we want to call the ",(0,i.yg)("inlineCode",{parentName:"p"},"Notify")," method ourselves.\nTo do this, we must first understand the signature of this method:"),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"Notify (String arg_0, UInt32 arg_1, String arg_2, String arg_3, String arg_4, Array of [String] arg_5, Dict of {String, Variant} arg_6, Int32 arg_7) \u21a6 (UInt32 arg_8)")),(0,i.yg)("p",null,"This doesn't tell us much, but we can find more documentation ",(0,i.yg)("a",{parentName:"p",href:"https://specifications.freedesktop.org/notification-spec/notification-spec-latest.html#basic-design"},"here"),", since ",(0,i.yg)("inlineCode",{parentName:"p"},"freedesktop")," is an open standard."),(0,i.yg)("p",null,"We'll set the arguments to the following (for our simple case, most of them will be unused):"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"app_name"),": ",(0,i.yg)("inlineCode",{parentName:"p"},'""'))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"replaces_id"),": ",(0,i.yg)("inlineCode",{parentName:"p"},"0"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"app_icon"),": ",(0,i.yg)("inlineCode",{parentName:"p"},'""'))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"summary"),": ",(0,i.yg)("inlineCode",{parentName:"p"},'"This is the title"'))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"body"),": ",(0,i.yg)("inlineCode",{parentName:"p"},'"This is the content"'))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"actions"),": ",(0,i.yg)("inlineCode",{parentName:"p"},"[]"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"hints"),": ",(0,i.yg)("inlineCode",{parentName:"p"},"{}"))),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},(0,i.yg)("inlineCode",{parentName:"p"},"expire_timeout"),": ",(0,i.yg)("inlineCode",{parentName:"p"},"-1")))),(0,i.yg)("p",null,"Now the question is how to actually call the method.\nNormally, we would have to write an application that connects to D-Bus and executes the call.\nBut for demonstrative purposes there are easier ways."),(0,i.yg)("p",null,"One way is directly from d-feet.\nIf we double-click on the ",(0,i.yg)("inlineCode",{parentName:"p"},"Notify")," method in the right-side pane of d-feet, a window will open that allows us to call the method with any arguments that we want:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"dfeet-execute-dialog",src:n(1696).A,width:"1821",height:"868"})),(0,i.yg)("p",null,"Then we click the ",(0,i.yg)("inlineCode",{parentName:"p"},"Execute")," button and the notification will appear:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"dfeet-execute-",src:n(4671).A,width:"1920",height:"1080"})),(0,i.yg)("p",null,"Another way is from the command-line. There's the ",(0,i.yg)("inlineCode",{parentName:"p"},"gdbus")," tool that can do this:"),(0,i.yg)("h2",{id:"guide-inspecting-the-low-level-communication"},"Guide: Inspecting the Low-level Communication"),(0,i.yg)("p",null,"Let's run ",(0,i.yg)("inlineCode",{parentName:"p"},"gdbus")," under ",(0,i.yg)("inlineCode",{parentName:"p"},"strace")," to see what's happening behind the scenes.\nRun the script in ",(0,i.yg)("inlineCode",{parentName:"p"},"support/dbus/send_notification_strace.sh"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'strace: Process 61888 attached\n[pid 61887] socket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC, 0) = 5\n[pid 61887] connect(5, {sa_family=AF_UNIX, sun_path="/run/user/1000/bus"}, 110) = 0\n[pid 61887] sendmsg(5, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="\\0", iov_len=1}], msg_iovlen=1,\nmsg_control=[{cmsg_len=28, cmsg_level=SOL_SOCKET, cmsg_type=SCM_CREDENTIALS, cmsg_data={pid=61887,\nuid=1000, gid=1000}}],\nmsg_controllen=32, msg_flags=0}, MSG_NOSIGNAL) = 1\nstrace: Process 61889 attached\n\n[...]\n\n[pid 61889] sendmsg(5, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="l\\1\\0\\1T\\0\\0\\0\\3\\0\\0\\0\\237\\0\\0\\0\\1\n\\1o\\0\\36\\0\\0\\0/org/freedesktop/Notifications\\0\\0\\2\\1s\\0\\35\\0\\0\\0org.freedesktop.Notifications\\0\\0\\0\\6\\1s\\0\\35\n\\0\\0\\0org.freedesktop.Notifications\\0\\0\\0\\10\\1g\\0\\rsusssasa{sv}i\\0\\0\\0\\0\\0\\0\\3\\1s\\0\\6\\0\\0\\0Notify\\0\\0\\0\\0\\0\\0\n\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\21\\0\\0\\0This is the title\\0\\0\\0\\23\\0\\0\\0This is the content\\0\\0\\0\\0\\0\\0\\0\\0\\0\n\\0\\0\\0\\0\\377\\377\\377\\377", iov_len=260}], msg_iovlen=1, msg_controllen=0,\n msg_flags=0}, MSG_NOSIGNAL) = 260\n[pid 61889] recvmsg(5, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="l\\2\\1\\1\\4\\0\\0\\0\\312\\0\\0\\0.\\0\\0\\0", iov_len=16}],\nmsg_iovlen=1, msg_controllen=0, msg_flags=MSG_CMSG_CLOEXEC}, MSG_CMSG_CLOEXEC) = 16\n[pid 61889] recvmsg(5, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="\\6\\1s\\0\\6\\0\\0\\0:1.497\\0\\0\\10\\1g\\0\\1u\\0\\0\\5\\1u\\0\n\\3\\0\\0\\0\\7\\1s\\0\\5\\0\\0\\0:1.49\\0\\0\\0\\36\\0\\0\\0", iov_len=52}], msg_iovlen=1, msg_controllen=0, msg_flags=MSG_CMSG_CLOEXEC}, MSG_CMSG_CLOEXEC) = 52\n(uint32 30,)\n[pid 61889] +++ exited with 0 +++\n[pid 61888] +++ exited with 0 +++\n+++ exited with 0 +++\n')),(0,i.yg)("p",null,"We see a Unix socket being created and a connection made to ",(0,i.yg)("inlineCode",{parentName:"p"},"/run/user/1000/bus"),", as expected.\nThen a series of messages are exchanged on the socket, which are part of the D-Bus protocol.\nOn a closer look, we can even identify some strings from our notification, like ",(0,i.yg)("inlineCode",{parentName:"p"},"This is the title")," or ",(0,i.yg)("inlineCode",{parentName:"p"},"This is the content"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},'[pid 61889] sendmsg(5, {msg_name=NULL, msg_namelen=0, msg_iov=[{iov_base="l\\1\\0\\1T\\0\\0\\0\\3\\0\\0\\0\\237\\0\\0\\0\\1\n\\1o\\0\\36\\0\\0\\0/org/freedesktop/Notifications\\0\\0\\2\\1s\\0\\35\\0\\0\\0org.freedesktop.Notifications\\0\\0\\0\\6\\1s\\0\\35\n\\0\\0\\0org.freedesktop.Notifications\\0\\0\\0\\10\\1g\\0\\rsusssasa{sv}i\\0\\0\\0\\0\\0\\0\\3\\1s\\0\\6\\0\\0\\0Notify\\0\\0\\0\\0\\0\\0\n\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\21\\0\\0\\0This is the title\\0\\0\\0\\23\\0\\0\\0This is the content\\0\\0\\0\\0\\0\\0\\0\\0\\0\n\\0\\0\\0\\0\\377\\377\\377\\377", iov_len=260}], msg_iovlen=1, msg_controllen=0,\n')),(0,i.yg)("h2",{id:"guide-d-bus-usage-in-python"},"Guide: D-Bus usage in Python"),(0,i.yg)("p",null,"Use the ",(0,i.yg)("inlineCode",{parentName:"p"},"dbus")," python bindings to get the computer's battery level using a python script.\nYou can start from the documentation ",(0,i.yg)("a",{parentName:"p",href:"https://dbus.freedesktop.org/doc/dbus-python/tutorial.html#"},"here"),".\nYou need to read the sections ",(0,i.yg)("inlineCode",{parentName:"p"},"Connecting to the Bus"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"Proxy objects"),", and ",(0,i.yg)("inlineCode",{parentName:"p"},"Interfaces and methods"),"."),(0,i.yg)("p",null,"There's also a skeleton you can use in ",(0,i.yg)("inlineCode",{parentName:"p"},"chapters/app-interact/arena/support/dbus/get_battery_level.py"),"."),(0,i.yg)("p",null,"In summary, your script will start by connecting to the ",(0,i.yg)("inlineCode",{parentName:"p"},"System Bus"),".\nThen you'll use the ",(0,i.yg)("inlineCode",{parentName:"p"},"get_object")," method to obtain a proxy object.\nOn this proxy object, you can actually do the method call as explained ",(0,i.yg)("a",{parentName:"p",href:"https://dbus.freedesktop.org/doc/dbus-python/tutorial.html#interfaces-and-methods"},"here"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"To call a method, call the method of the same name on the proxy object, passing in the interface name via the dbus_interface keyword argument\n")),(0,i.yg)("p",null,"So, if you want to call the method ",(0,i.yg)("inlineCode",{parentName:"p"},"this.is.an.interface.method")," with the arguments ",(0,i.yg)("inlineCode",{parentName:"p"},"A")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"B")," you can do it like this:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-python"},'result = proxy.method(A, B, dbus_interface = "this.is.an.interface")\n')),(0,i.yg)("h2",{id:"guide-firefox"},"Guide: Firefox"),(0,i.yg)("p",null,"Let's do the following experiment:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Open the Firefox browser")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"From a terminal run ",(0,i.yg)("inlineCode",{parentName:"p"},"firefox www.google.com")))),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"firefox-url-open",src:n(9837).A,width:"1920",height:"1080"})),(0,i.yg)("p",null,"Notice that the URL we passed in the command-line was opened in the existing Firefox window as a new tab.\nEven though we started a separate Firefox process, which should have created a separate new window, this didn't actually happen.\nInstead, the process that we started from the command-line exited immediately and the site was opened in the already running Firefox instance."),(0,i.yg)("p",null,"Without any precise knowledge about Firefox internals, we can guess that something like this happened:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The newly started Firefox process detected that another instance of Firefox is already running")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"The newly started Firefox process sent a message to the existing running process, requesting it to open a URL in a new tab"))),(0,i.yg)("p",null,"Since we're talking about message passing between 2 processes, there's a chance that maybe D-Bus was involved.\nLet's check: we'll use a tool called ",(0,i.yg)("inlineCode",{parentName:"p"},"dbus-monitor")," that will print all messages passed through D-Bus."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"student@os:~$ dbus-monitor\n")),(0,i.yg)("p",null,"Then, in another terminal, we'll run ",(0,i.yg)("inlineCode",{parentName:"p"},"firefox www.google.com")," again."),(0,i.yg)("p",null,"Going back to the ",(0,i.yg)("inlineCode",{parentName:"p"},"dbus-monitor")," output, we find the following:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"...\nmethod call time=1655809062.813923 sender=:1.757 -> destination=org.mozilla.firefox.ZGVmYXVsdC1yZWxlYXNl serial=2 path=/org/mozilla/firefox/Remote; interface=org.mozilla.firefox; member=OpenURL\n   array of bytes [\n      02 00 00 00 1a 00 00 00 2f 00 00 00 2f 68 6f 6d 65 2f 61 64 72 69 61 6e\n      73 00 2f 6f 70 74 2f 66 69 72 65 66 6f 78 2f 66 69 72 65 66 6f 78 00 77\n      77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 00\n   ]\n")),(0,i.yg)("p",null,"There was a D-Bus call to ",(0,i.yg)("inlineCode",{parentName:"p"},"org.mozilla.firefox.ZGVmYXVsdC1yZWxlYXNl"),", on the object ",(0,i.yg)("inlineCode",{parentName:"p"},"/org/mozilla/firefox/Remote"),", method ",(0,i.yg)("inlineCode",{parentName:"p"},"OpenURL")," from the ",(0,i.yg)("inlineCode",{parentName:"p"},"org.mozilla.firefox")," interface.\nIndeed, we see that this object exists in d-feet as well:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"dfeet-firefox",src:n(8126).A,width:"1820",height:"868"})),(0,i.yg)("p",null,"We can try to call the ",(0,i.yg)("inlineCode",{parentName:"p"},"OpenURL")," method ourselves, directly from d-feet.\nThe method has only one argument of the type ",(0,i.yg)("inlineCode",{parentName:"p"},"Array of [Byte]"),".\nAlthough there's no documentation for it, we can use the same byte array that we saw in ",(0,i.yg)("inlineCode",{parentName:"p"},"dbus-monitor"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-console"},"   array of bytes [\n      02 00 00 00 1a 00 00 00 2f 00 00 00 2f 68 6f 6d 65 2f 61 64 72 69 61 6e\n      73 00 2f 6f 70 74 2f 66 69 72 65 66 6f 78 2f 66 69 72 65 66 6f 78 00 77\n      77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d 00\n   ]\n")),(0,i.yg)("p",null,"(Note that ",(0,i.yg)("inlineCode",{parentName:"p"},"77 77 77 2e 67 6f 6f 67 6c 65 2e 63 6f 6d")," at the end is the string ",(0,i.yg)("inlineCode",{parentName:"p"},"www.google.com"),", so that's another confirmation that we're on the right track)."),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"dfeet-url-open",src:n(8124).A,width:"1920",height:"1080"})))}m.isMDXComponent=!0},8124:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dfeet_url_open-99b78cbaf472fad6a0c5dd4d550b4a55.gif"},8126:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dfeet_firefox-f29826be8e314acb7f0047d5b5b86431.png"},8529:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/dfeet_notifications-80931f45466247c5cd1d6164d83f97d8.png"},8865:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/os_cloud-ff20c47681f663aa8430106ab44e0cd5.svg"},9837:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/firefox_url_open-85c4cc365a96e2d43b66891dc60c0911.gif"},9934:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/nested_virt_vmware-1b3a6b314c74c626bc006936abb01bf7.png"}}]);