"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[895],{5680:(e,a,t)=>{t.d(a,{xA:()=>y,yg:()=>c});var n=t(6540);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)t=l[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=n.createContext({}),p=function(e){var a=n.useContext(o),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},y=function(e){var a=p(e.components);return n.createElement(o.Provider,{value:a},e.children)},m="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},d=n.forwardRef((function(e,a){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,y=i(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,c=m["".concat(o,".").concat(d)]||m[d]||g[d]||l;return t?n.createElement(c,s(s({ref:a},y),{},{components:t})):n.createElement(c,s({ref:a},y))}));function c(e,a){var t=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var l=t.length,s=new Array(l);s[0]=d;var i={};for(var o in a)hasOwnProperty.call(a,o)&&(i[o]=a[o]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<l;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},278:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>o,contentTitle:()=>s,default:()=>g,frontMatter:()=>l,metadata:()=>i,toc:()=>p});var n=t(8168),r=(t(6540),t(5680));const l={},s=void 0,i={unversionedId:"Software Stack/lab1",id:"Software Stack/lab1",title:"lab1",description:"Modern Software Stacks",source:"@site/docs/Software Stack/lab1.md",sourceDirName:"Software Stack",slug:"/Software Stack/lab1",permalink:"/operating-systems/95/Software Stack/lab1",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"strcpy() System Call",permalink:"/operating-systems/95/Software Stack/Questions/strcpy-syscall"},next:{title:"lab2",permalink:"/operating-systems/95/Software Stack/lab2"}},o={},p=[{value:"Modern Software Stacks",id:"modern-software-stacks",level:2},{value:"System Calls",id:"system-calls",level:2},{value:"Syscall Wrappers",id:"syscall-wrappers",level:2},{value:"Question Text",id:"question-text",level:3},{value:"Question Answers",id:"question-answers",level:3},{value:"Feedback",id:"feedback",level:3},{value:"Libcall with Syscall",id:"libcall-with-syscall",level:2},{value:"Question Text",id:"question-text-1",level:3},{value:"Question Answers",id:"question-answers-1",level:3},{value:"Feedback",id:"feedback-1",level:3},{value:"Tasks",id:"tasks",level:2},{value:"System Calls",id:"system-calls-1",level:3},{value:"System Call Wrappers",id:"system-call-wrappers",level:3},{value:"Library Calls vs System Calls",id:"library-calls-vs-system-calls",level:3}],y={toc:p},m="wrapper";function g(e){let{components:a,...l}=e;return(0,r.yg)(m,(0,n.A)({},y,l,{components:a,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"modern-software-stacks"},"Modern Software Stacks"),(0,r.yg)("p",null,"Most modern computing systems use a software stack such as the one in the figure below:"),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Modern Software Stack",src:t(6119).A})),(0,r.yg)("p",null,"This modern software stack allows fast development and provides a rich set of applications to the user."),(0,r.yg)("p",null,"The basic software component is the ",(0,r.yg)("strong",{parentName:"p"},"operating system*- (OS) (technically the operating system "),"kernel",(0,r.yg)("strong",{parentName:"p"},").\nThe OS provides the fundamental primitives to interact with hardware (read and write data) and to manage the running of applications (such as memory allocation, thread creation, scheduling).\nThese primitives form the "),"system call API*- or ",(0,r.yg)("strong",{parentName:"p"},"system API"),".\nAn item in the system call API, i.e. the equivalent of a function call that triggers the execution of a functionality in the operating system, is a ",(0,r.yg)("strong",{parentName:"p"},"system call"),"."),(0,r.yg)("p",null,"The system call API is well-defined, stable and complete: it exposes the entire functionality of the operating system and hardware.\nHowever, it is also minimalistic with respect to features, and it provides a low-level (close to hardware) specification, making it cumbersome to use and ",(0,r.yg)("strong",{parentName:"p"},"not portable"),"."),(0,r.yg)("p",null,"Due to the downsides of the system call API, a basic library, the ",(0,r.yg)("strong",{parentName:"p"},"standard C library*- (also called "),"libc",(0,r.yg)("strong",{parentName:"p"},"), is built on top of it.\nBecause the system call API uses an OS-specific calling convention, the standard C library typically wraps each system call into an equivalent function call, following a portable calling convention.\nMore than these wrappers, the standard C library provides its own API that is typically portable.\nPart of the API exposed by the standard C library is the "),"standard C API",(0,r.yg)("strong",{parentName:"p"},", also called "),"ANSI C*- or ",(0,r.yg)("strong",{parentName:"p"},"ISO C"),";\nthis API is typically portable across all platforms (operating systems and hardware).\nThis API, going beyond system call wrappers, has several advantages:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"portability: irrespective of the underlying operating system (and system call API), the API is the same"),(0,r.yg)("li",{parentName:"ul"},"extensive features: string management, I/O formatting"),(0,r.yg)("li",{parentName:"ul"},"possibility of increased efficiency with techniques such as buffering, as we show later")),(0,r.yg)("h2",{id:"system-calls"},"System Calls"),(0,r.yg)("p",null,"Enter the ",(0,r.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/basic-syscall/")," folder.\nRun ",(0,r.yg)("inlineCode",{parentName:"p"},"make")," and then enter ",(0,r.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/basic-syscall/support/")," folder and go through the practice items below."),(0,r.yg)("p",null,"For debugging, use ",(0,r.yg)("inlineCode",{parentName:"p"},"strace")," to trace the system calls from your program and make sure the arguments are set right."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.s")," files to print both ",(0,r.yg)("inlineCode",{parentName:"p"},"Hello, world!")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Bye, world!"),".\nThis means adding another ",(0,r.yg)("inlineCode",{parentName:"p"},"write()")," system call."),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-id"},"Quiz 1")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-tool"},"Quiz 2")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-numbers"},"Quiz 3"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.s")," files to sleep before the ",(0,r.yg)("inlineCode",{parentName:"p"},"exit")," system call."),(0,r.yg)("p",{parentName:"li"},"You need to make the ",(0,r.yg)("inlineCode",{parentName:"p"},"sys_nanosleep()")," system call, with the ",(0,r.yg)("inlineCode",{parentName:"p"},"timespec")," structure.\nFind its ID ",(0,r.yg)("a",{parentName:"p",href:"https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/"},"here"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.s")," files to read a message from standard input and print it to standard output."),(0,r.yg)("p",{parentName:"li"},"You'll need to define a buffer in the ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"bss")," section.\nUse the ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call to read data in the buffer.\nThe return value of ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," (placed in the ",(0,r.yg)("inlineCode",{parentName:"p"},"rax")," register) is the number of bytes read.\nUse that value as the 3rd argument or ",(0,r.yg)("inlineCode",{parentName:"p"},"write"),", i.e. the number of bytes printed."),(0,r.yg)("p",{parentName:"li"},"Find the ID of the ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call ",(0,r.yg)("a",{parentName:"p",href:"https://x64.syscall.sh/"},"here"),".\nTo find out more about its arguments, see ",(0,r.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/read.2.html"},"its man page"),".\nStandard input descriptor is ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Difficult"),": Port the initial program to ARM on 64 bits (also called ",(0,r.yg)("strong",{parentName:"p"},"aarch64"),")."),(0,r.yg)("p",{parentName:"li"},"Use the skeleton files in the ",(0,r.yg)("inlineCode",{parentName:"p"},"arm/")," folder.\nFind information about the ",(0,r.yg)("inlineCode",{parentName:"p"},"aarch64")," system calls ",(0,r.yg)("a",{parentName:"p",href:"https://arm64.syscall.sh/"},"here"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create your own program, written in assembly, doing some system calls you want to learn more about.\nSome system calls you could try: ",(0,r.yg)("inlineCode",{parentName:"p"},"open()"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"rename()"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"mkdir()"),".\nCreate a Makefile for that program.\nRun the resulting program with ",(0,r.yg)("inlineCode",{parentName:"p"},"strace")," to see the actual system calls being made (and their arguments)."))),(0,r.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,r.yg)("a",{parentName:"p",href:"/operating-systems/95/Software%20Stack/lab1#analyzing-the-software-stack"},"this")," reading material."),(0,r.yg)("h2",{id:"syscall-wrappers"},"Syscall Wrappers"),(0,r.yg)("h3",{id:"question-text"},"Question Text"),(0,r.yg)("p",null,"What language do we use to invoke system calls?"),(0,r.yg)("h3",{id:"question-answers"},"Question Answers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"assembly")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"C")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"C++")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Go"))),(0,r.yg)("h3",{id:"feedback"},"Feedback"),(0,r.yg)("p",null,"System calls require setting of registers that can only be done in assembly language."),(0,r.yg)("h2",{id:"libcall-with-syscall"},"Libcall with Syscall"),(0,r.yg)("h3",{id:"question-text-1"},"Question Text"),(0,r.yg)("p",null,"Which of the following library calls will for sure invoke a system call?"),(0,r.yg)("h3",{id:"question-answers-1"},"Question Answers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"fopen()"))),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"fwrite()"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"printf()"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("inlineCode",{parentName:"p"},"strcpy()")))),(0,r.yg)("h3",{id:"feedback-1"},"Feedback"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"fopen()")," requires opening a file and access to the operating system (for filesystem access).\nThe others may not require a system call (",(0,r.yg)("inlineCode",{parentName:"p"},"strcpy()"),") or may use buffering to delay the invocation of a system call (",(0,r.yg)("inlineCode",{parentName:"p"},"fwrite()"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"printf()"),")."),(0,r.yg)("h2",{id:"tasks"},"Tasks"),(0,r.yg)("h3",{id:"system-calls-1"},"System Calls"),(0,r.yg)("p",null,"Enter the ",(0,r.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/basic-syscall/")," folder.\nRun ",(0,r.yg)("inlineCode",{parentName:"p"},"make")," and then enter ",(0,r.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/basic-syscall/support/")," folder and go through the practice items below."),(0,r.yg)("p",null,"For debugging, use ",(0,r.yg)("inlineCode",{parentName:"p"},"strace")," to trace the system calls from your program and make sure the arguments are set right."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.s")," files to print both ",(0,r.yg)("inlineCode",{parentName:"p"},"Hello, world!")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"Bye, world!"),".\nThis means adding another ",(0,r.yg)("inlineCode",{parentName:"p"},"write()")," system call."),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-id"},"Quiz 1")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-tool"},"Quiz 2")),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-numbers"},"Quiz 3"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.s")," files to sleep before the ",(0,r.yg)("inlineCode",{parentName:"p"},"exit")," system call."),(0,r.yg)("p",{parentName:"li"},"You need to make the ",(0,r.yg)("inlineCode",{parentName:"p"},"sys_nanosleep()")," system call, with the ",(0,r.yg)("inlineCode",{parentName:"p"},"timespec")," structure.\nFind its ID ",(0,r.yg)("a",{parentName:"p",href:"https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/"},"here"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.asm")," and / or ",(0,r.yg)("inlineCode",{parentName:"p"},"hello.s")," files to read a message from standard input and print it to standard output."),(0,r.yg)("p",{parentName:"li"},"You'll need to define a buffer in the ",(0,r.yg)("inlineCode",{parentName:"p"},"data")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"bss")," section.\nUse the ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call to read data in the buffer.\nThe return value of ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," (placed in the ",(0,r.yg)("inlineCode",{parentName:"p"},"rax")," register) is the number of bytes read.\nUse that value as the 3rd argument or ",(0,r.yg)("inlineCode",{parentName:"p"},"write"),", i.e. the number of bytes printed."),(0,r.yg)("p",{parentName:"li"},"Find the ID of the ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call ",(0,r.yg)("a",{parentName:"p",href:"https://x64.syscall.sh/"},"here"),".\nTo find out more about its arguments, see ",(0,r.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man2/read.2.html"},"its man page"),".\nStandard input descriptor is ",(0,r.yg)("inlineCode",{parentName:"p"},"0"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Difficult"),": Port the initial program to ARM on 64 bits (also called ",(0,r.yg)("strong",{parentName:"p"},"aarch64"),")."),(0,r.yg)("p",{parentName:"li"},"Use the skeleton files in the ",(0,r.yg)("inlineCode",{parentName:"p"},"arm/")," folder.\nFind information about the ",(0,r.yg)("inlineCode",{parentName:"p"},"aarch64")," system calls ",(0,r.yg)("a",{parentName:"p",href:"https://arm64.syscall.sh/"},"here"),".")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create your own program, written in assembly, doing some system calls you want to learn more about.\nSome system calls you could try: ",(0,r.yg)("inlineCode",{parentName:"p"},"open()"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"rename()"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"mkdir()"),".\nCreate a Makefile for that program.\nRun the resulting program with ",(0,r.yg)("inlineCode",{parentName:"p"},"strace")," to see the actual system calls being made (and their arguments)."))),(0,r.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,r.yg)("a",{parentName:"p",href:"/operating-systems/95/Software%20Stack/lab1#analyzing-the-software-stack"},"this")," reading material."),(0,r.yg)("h3",{id:"system-call-wrappers"},"System Call Wrappers"),(0,r.yg)("p",null,"Enter the ",(0,r.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/syscall-wrapper/drills/tasks/support/")," folder and go through the practice items below."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the files in the ",(0,r.yg)("inlineCode",{parentName:"p"},"support/")," folder to make ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call available as a wrapper.\nMake a call to the ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call to read data from standard input in a buffer.\nThen call ",(0,r.yg)("inlineCode",{parentName:"p"},"write()")," to print data from that buffer."),(0,r.yg)("p",{parentName:"li"},"Note that the ",(0,r.yg)("inlineCode",{parentName:"p"},"read")," system call returns the number of bytes ",(0,r.yg)("inlineCode",{parentName:"p"},"read"),".\nUse that as the argument to the subsequent ",(0,r.yg)("inlineCode",{parentName:"p"},"write")," call that prints read data."),(0,r.yg)("p",{parentName:"li"},"We can see that it's easier to have wrapper calls and write most of the code in C than in assembly language."),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/syscall-wrapper"},"Quiz"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Update the files in the ",(0,r.yg)("inlineCode",{parentName:"p"},"support/")," folder to make the ",(0,r.yg)("inlineCode",{parentName:"p"},"getpid")," system call available as a wrapper.\nCreate a function with the signature ",(0,r.yg)("inlineCode",{parentName:"p"},"unsigned int itoa(int n, char *a)")," that converts an integer to a string.\nIt returns the number of digits in the string.\nFor example, it will convert the number ",(0,r.yg)("inlineCode",{parentName:"p"},"1234")," to the string ",(0,r.yg)("inlineCode",{parentName:"p"},'"1234"')," string (",(0,r.yg)("inlineCode",{parentName:"p"},"NULL"),"-terminated, 5 bytes long);\nthe return value is ",(0,r.yg)("inlineCode",{parentName:"p"},"4")," (the number of digits of the ",(0,r.yg)("inlineCode",{parentName:"p"},'"1234"')," string)."),(0,r.yg)("p",{parentName:"li"},"Then make the call to ",(0,r.yg)("inlineCode",{parentName:"p"},"getpid"),";\nit gets no arguments and returns an integer (the PID - *process ID- of the current process)."))),(0,r.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,r.yg)("a",{parentName:"p",href:"/operating-systems/95/Software%20Stack/lab1#system-call-wrappers"},"this")," reading material."),(0,r.yg)("h3",{id:"library-calls-vs-system-calls"},"Library Calls vs System Calls"),(0,r.yg)("p",null,"Enter the ",(0,r.yg)("inlineCode",{parentName:"p"},"chapters/software-stack/system-calls/drills/tasks/libcall-syscall/support/")," folder and go through the practice items below."),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Check library calls and system calls for the ",(0,r.yg)("inlineCode",{parentName:"p"},"call2.c")," file.\nUse ",(0,r.yg)("inlineCode",{parentName:"p"},"ltrace")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"strace"),"."),(0,r.yg)("p",{parentName:"li"},"Find explanations for the calls being made and the library call to system call mapping."),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("a",{parentName:"p",href:"Questions/libcall-syscall"},"Quiz")))),(0,r.yg)("p",null,"If you're having difficulties solving this exercise, go through ",(0,r.yg)("a",{parentName:"p",href:"/operating-systems/95/Software%20Stack/lab1#library-calls-vs-system-calls"},"this")," reading material."))}g.isMDXComponent=!0},6119:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/modern-sw-stack-4a2427d07a59c3a6599305b8eedc43dd.svg"}}]);