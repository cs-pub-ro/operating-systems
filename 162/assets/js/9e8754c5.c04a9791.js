"use strict";(self.webpackChunkso=self.webpackChunkso||[]).push([[5757],{1160:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var a=n(8168),i=(n(6540),n(5680));const l={},r="ELF Loader Assignment",o={unversionedId:"Assignments/ELF Loader/README",id:"Assignments/ELF Loader/README",title:"ELF Loader Assignment",description:"Objecives",source:"@site/docs/Assignments/ELF Loader/README.md",sourceDirName:"Assignments/ELF Loader",slug:"/Assignments/ELF Loader/",permalink:"/operating-systems/162/Assignments/ELF Loader/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Memory Allocator",permalink:"/operating-systems/162/Assignments/Memory Allocator/"},next:{title:"Parallel Firewall",permalink:"/operating-systems/162/Assignments/Parallel Firewall/"}},s={},p=[{value:"Objecives",id:"objecives",level:2},{value:"Statement",id:"statement",level:2},{value:"Support Code",id:"support-code",level:2},{value:"Implementation",id:"implementation",level:2},{value:"1. Minimal loader for syscall-only binaries (<strong>20 points</strong>)",id:"1-minimal-loader-for-syscall-only-binaries-20-points",level:3},{value:"2. Load memory regions with correct permissions (<strong>20 points</strong>)",id:"2-load-memory-regions-with-correct-permissions-20-points",level:3},{value:"3. Support static non-PIE binaries with libc (<strong>30 points</strong>)",id:"3-support-static-non-pie-binaries-with-libc-30-points",level:3},{value:"Auxv",id:"auxv",level:4},{value:"4. Support static PIE executables (<strong>20 points</strong>)",id:"4-support-static-pie-executables-20-points",level:3},{value:"Debugging",id:"debugging",level:2},{value:"General Tips",id:"general-tips",level:3},{value:"Useful Tools",id:"useful-tools",level:3},{value:"Compilation Tips",id:"compilation-tips",level:2}],g={toc:p},m="wrapper";function u({components:e,...t}){return(0,i.yg)(m,(0,a.A)({},g,t,{components:e,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"elf-loader-assignment"},"ELF Loader Assignment"),(0,i.yg)("h2",{id:"objecives"},"Objecives"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Practice working with virtual memory, memory protection, and manual relocation."),(0,i.yg)("li",{parentName:"ul"},"Understand the difference between different types of executables, like PIE, non-PIE, staticly-linked, etc."),(0,i.yg)("li",{parentName:"ul"},"Understand the stack layout expected by an executable, environment variables, auxiliary vector, command-line arguments, etc.")),(0,i.yg)("h2",{id:"statement"},"Statement"),(0,i.yg)("p",null,"Implement a custom minimal ELF loader, capabale of loading and executing statically linked binaries in Linux."),(0,i.yg)("p",null,"Your loader must eventually support:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Minimal static binaries that make direct Linux syscalls (without libc)"),(0,i.yg)("li",{parentName:"ul"},"Statically linked ",(0,i.yg)("strong",{parentName:"li"},"non-PIE")," C programs using ",(0,i.yg)("inlineCode",{parentName:"li"},"libc")),(0,i.yg)("li",{parentName:"ul"},"Statically linked ",(0,i.yg)("strong",{parentName:"li"},"PIE")," executables")),(0,i.yg)("h2",{id:"support-code"},"Support Code"),(0,i.yg)("p",null,"The support code consists of three directories:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"src/")," where you will create your sollution"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"test/")," contains the test suite and a Python script to verify your work")),(0,i.yg)("p",null,"The test suite consists of source code files (",(0,i.yg)("inlineCode",{parentName:"p"},".c")," and ",(0,i.yg)("inlineCode",{parentName:"p"},".asm"),"), that will be compiled and then executed using your loader.\nYou can use the ",(0,i.yg)("inlineCode",{parentName:"p"},"Makefile")," to compile all test files."),(0,i.yg)("h2",{id:"implementation"},"Implementation"),(0,i.yg)("p",null,"The assignment is split into ",(0,i.yg)("strong",{parentName:"p"},"4 graded parts"),", totaling ",(0,i.yg)("strong",{parentName:"p"},"90 points")," (10 points are given by the linter):"),(0,i.yg)("h3",{id:"1-minimal-loader-for-syscall-only-binaries-20-points"},"1. Minimal loader for syscall-only binaries (",(0,i.yg)("strong",{parentName:"h3"},"20 points"),")"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Goal:")," Make the loader work with extremely minimal ELF binaries (usually written in assembly) that make direct syscalls and do not use libc."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"All memory segments can be loaded with ",(0,i.yg)("inlineCode",{parentName:"li"},"RWX")," permissions."),(0,i.yg)("li",{parentName:"ul"},"No need to set up ",(0,i.yg)("inlineCode",{parentName:"li"},"argv"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"envp"),", or auxiliary vectors."),(0,i.yg)("li",{parentName:"ul"},"These binaries call syscall instructions directly, so ",(0,i.yg)("inlineCode",{parentName:"li"},"libc")," is not used.")),(0,i.yg)("p",null,"For this task, you will need to:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Open the file and map it somewhere in the memory"),(0,i.yg)("li",{parentName:"ul"},"Validate the ELF file (parse the header, check that it is an ELF file)"),(0,i.yg)("li",{parentName:"ul"},"Pass through the section headers, and for the ",(0,i.yg)("inlineCode",{parentName:"li"},"PT_LOAD")," sections create new memory regions (they can have RWX permissions for now), then copy the section from the file into the newly created memory region."),(0,i.yg)("li",{parentName:"ul"},"Pass the execution to the new ELF, by jumping to the entry point.")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Examples/Resources:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://refspecs.linuxbase.org/elf/gabi4+/ch5.pheader.html"},"ELF Specification"))),(0,i.yg)("h3",{id:"2-load-memory-regions-with-correct-permissions-20-points"},"2. Load memory regions with correct permissions (",(0,i.yg)("strong",{parentName:"h3"},"20 points"),")"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Goal:")," Instead of RWX, check the memory protection flags (",(0,i.yg)("inlineCode",{parentName:"p"},"PF_R"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"PF_W"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"PF_X"),") from the ELF ",(0,i.yg)("inlineCode",{parentName:"p"},"Program Headers"),"."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Use ",(0,i.yg)("inlineCode",{parentName:"li"},"mprotect()")," or map with the correct permissions directly using ",(0,i.yg)("inlineCode",{parentName:"li"},"mmap()"),".")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Key Concepts:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"PT_LOAD")," program headers contain ",(0,i.yg)("inlineCode",{parentName:"li"},"p_flags")," to specify memory permissions."),(0,i.yg)("li",{parentName:"ul"},"These must be respected to mimic the kernel loader."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://refspecs.linuxbase.org/elf/gabi4+/ch5.pheader.html"},"ELF Specification"))),(0,i.yg)("h3",{id:"3-support-static-non-pie-binaries-with-libc-30-points"},"3. Support static non-PIE binaries with libc (",(0,i.yg)("strong",{parentName:"h3"},"30 points"),")"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Goal:")," Load and run statically linked ",(0,i.yg)("strong",{parentName:"p"},"non-PIE")," C binaries compiled with libc (e.g., via ",(0,i.yg)("inlineCode",{parentName:"p"},"gcc -static"),")."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("p",{parentName:"li"},"Must set up a valid process ",(0,i.yg)("strong",{parentName:"p"},"stack"),", including:"),(0,i.yg)("ul",{parentName:"li"},(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"argc"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"argv"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"envp")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"auxv")," vector (with entries like ",(0,i.yg)("inlineCode",{parentName:"li"},"AT_PHDR"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"AT_PHENT"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"AT_PHNUM"),", etc.)")))),(0,i.yg)("p",null,"For this, you need to map a new memory region, that will become the new stack, then copy all the required information there."),(0,i.yg)("p",null,"The executable expects the stack layout as seen in the figure below:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Stack Layout",src:n(4062).A})),(0,i.yg)("p",null,"You can see more details about the stack ",(0,i.yg)("a",{parentName:"p",href:"https://lwn.net/Articles/631631/"},"here"),"."),(0,i.yg)("h4",{id:"auxv"},"Auxv"),(0,i.yg)("p",null,"The auxiliary vector, auxv, is a mechanism for communicating information from the kernel to user space.\nIt's basically a list of key-value pairs that contains different information about the state of the executable.\nYou can see the keys and required values of the auxv ",(0,i.yg)("a",{parentName:"p",href:"https://man7.org/linux/man-pages/man3/getauxval.3.html"},"in the man pages"),".\nSet all the values you can.\nFor example, for the key ",(0,i.yg)("inlineCode",{parentName:"p"},"AT_PAGESZ")," (defined as 6 in ",(0,i.yg)("a",{parentName:"p",href:"https://elixir.bootlin.com/glibc/glibc-2.42.9000/source/elf/elf.h#L1205"},"elf.h"),"), that needs to contain the value of the page size, the memory will look as follows:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-text"},"0xfff......    --\x3e High Addresses\n-----------\n  4096         # Page Size\n   6           # AT_PAGESZ key\n-----------\n-----------\n0x000......    --\x3e Low Addresses\n")),(0,i.yg)("p",null,"The auvx must end with an ",(0,i.yg)("inlineCode",{parentName:"p"},"AT_NULL")," key with a 0 value, so an auxv that sets ",(0,i.yg)("inlineCode",{parentName:"p"},"AT_PAGESZ"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"AT_UID")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"AT_NULL")," will look like this on the stack:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"Auxv Example",src:n(2088).A})),(0,i.yg)("p",null,"You will have to reserve a memory region large enough for the stack (you can use the maximum allowed stack size, using ",(0,i.yg)("inlineCode",{parentName:"p"},"getrlimit"),", or you can use a harcoded value large enough to fit everything).\nAfter that, you need to copy the argc, argv and envp in the expected layout, then set up the auxv."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Note:")," Beware of the ",(0,i.yg)("inlineCode",{parentName:"p"},"AT_RANDOM")," entry, the application will crash if you do not set it up properly."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Docs:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://lwn.net/Articles/631631/"},"How programs get run: ELF binaries")," (See section: ",(0,i.yg)("inlineCode",{parentName:"li"},"Populating the stack"),")"),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://man7.org/linux/man-pages/man3/getauxval.3.html"},"auxv man page"))),(0,i.yg)("h3",{id:"4-support-static-pie-executables-20-points"},"4. Support static PIE executables (",(0,i.yg)("strong",{parentName:"h3"},"20 points"),")"),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Goal:")," Make your loader support static ",(0,i.yg)("strong",{parentName:"p"},"PIE (Position Independent Executable)")," binaries."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"ELF type will be ",(0,i.yg)("inlineCode",{parentName:"li"},"ET_DYN"),", and segments must be mapped at a ",(0,i.yg)("strong",{parentName:"li"},"random base address"),"."),(0,i.yg)("li",{parentName:"ul"},"Entry point and memory segment virtual addresses must be adjusted by the ",(0,i.yg)("inlineCode",{parentName:"li"},"load_base"),".")),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Additional Requirements:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Must still build a valid stack (",(0,i.yg)("inlineCode",{parentName:"li"},"argc"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"argv"),", ",(0,i.yg)("inlineCode",{parentName:"li"},"auxv"),", etc.)"),(0,i.yg)("li",{parentName:"ul"},"Handle relocation of entry point and program headers correctly.")),(0,i.yg)("p",null,"You will need to load all the segments at a random offset.\nBeware of the auxv entries, some of them will need to be adjusted to the offset."),(0,i.yg)("p",null,(0,i.yg)("strong",{parentName:"p"},"Docs:")),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://eli.thegreenplace.net/2011/08/25/load-time-relocation-of-shared-libraries"},"What is a PIE binary?")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://0xc0ffee.netlify.app/osdev/22-elf-loader-p2"},"Example ELF Loader")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"https://www.mgaillard.fr/2021/04/15/load-elf-user-mode.html"},"Another ELF Loader Example"))),(0,i.yg)("h2",{id:"debugging"},"Debugging"),(0,i.yg)("p",null,"Here are some useful tips and tools to debug your ELF loader:"),(0,i.yg)("h3",{id:"general-tips"},"General Tips"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Start simple"),": First test with a syscall-only ELF binary (e.g., ",(0,i.yg)("inlineCode",{parentName:"li"},"write")," + ",(0,i.yg)("inlineCode",{parentName:"li"},"exit"),")."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Use GDB"),": Run ",(0,i.yg)("inlineCode",{parentName:"li"},"gdb ./elf_loader")," and set breakpoints in the loader and inside the loaded ELF. You can use ",(0,i.yg)("inlineCode",{parentName:"li"},"add-symbol-file path-to-elf start-address")," to debug the libc entry and the elf execution with debugging symbols."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Check memory layout"),": Print segment addresses and protections. You can use ",(0,i.yg)("inlineCode",{parentName:"li"},"pmap $(pidof elf-loader)"))),(0,i.yg)("h3",{id:"useful-tools"},"Useful Tools"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"readelf -l -h your_binary")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"objdump -d your_binary")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"gdb ./elf_loader"))),(0,i.yg)("h2",{id:"compilation-tips"},"Compilation Tips"),(0,i.yg)("p",null,"To build test binaries, run ",(0,i.yg)("inlineCode",{parentName:"p"},"make")," in the ",(0,i.yg)("inlineCode",{parentName:"p"},"test/")," directory.\nYou can modify the source files in ",(0,i.yg)("inlineCode",{parentName:"p"},"test/")," and try different things.\nTo run the loader manually, use ",(0,i.yg)("inlineCode",{parentName:"p"},"./elf-loader ../test/<test-name> arg1 arg2 ..."),"."))}u.isMDXComponent=!0},2088:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/auxv-example.drawio-337988ad6e07792003f401b0caf2aea2.svg"},4062:(e,t,n)=>{n.d(t,{A:()=>a});const a=n.p+"assets/images/stack-layout.drawio-b9debccd9c136c179bc5373426784894.svg"},5680:(e,t,n)=>{n.d(t,{xA:()=>g,yg:()=>d});var a=n(6540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach(function(t){i(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},g=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef(function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),m=p(n),y=i,d=m["".concat(s,".").concat(y)]||m[y]||u[y]||l;return n?a.createElement(d,r(r({ref:t},g),{},{components:n})):a.createElement(d,r({ref:t},g))});function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"}}]);